
deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08007240  08007240  00008240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075d8  080075d8  000091dc  2**0
                  CONTENTS
  4 .ARM          00000008  080075d8  080075d8  000085d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075e0  080075e0  000091dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075e0  080075e0  000085e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080075e4  080075e4  000085e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080075e8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091dc  2**0
                  CONTENTS
 10 .bss          0000027c  200001dc  200001dc  000091dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000458  20000458  000091dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fda0  00000000  00000000  0000920c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000230f  00000000  00000000  00018fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  0001b2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be0  00000000  00000000  0001c1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000374e  00000000  00000000  0001cdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011c06  00000000  00000000  00020526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cee4f  00000000  00000000  0003212c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00100f7b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000518c  00000000  00000000  00100fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  0010614c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007228 	.word	0x08007228

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007228 	.word	0x08007228

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af02      	add	r7, sp, #8

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e9e:	f000 ff01 	bl	8001ca4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ea2:	f000 f965 	bl	8001170 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ea6:	f000 fa63 	bl	8001370 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000eaa:	f000 f9cb 	bl	8001244 <MX_SPI1_Init>
	MX_TIM6_Init();
 8000eae:	f000 f9ff 	bl	80012b0 <MX_TIM6_Init>
	MX_USART2_UART_Init();
 8000eb2:	f000 fa33 	bl	800131c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOD,
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000ebc:	489f      	ldr	r0, [pc, #636]	@ (800113c <main+0x2a4>)
 8000ebe:	f001 fac7 	bl	8002450 <HAL_GPIO_WritePin>
	GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, 1);
	HAL_Delay(1000);
 8000ec2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ec6:	f000 ff5f 	bl	8001d88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD,
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000ed0:	489a      	ldr	r0, [pc, #616]	@ (800113c <main+0x2a4>)
 8000ed2:	f001 fabd 	bl	8002450 <HAL_GPIO_WritePin>
	GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, 0);
	HAL_Delay(1000);
 8000ed6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eda:	f000 ff55 	bl	8001d88 <HAL_Delay>

	GPIO_Init();
 8000ede:	f000 fcc7 	bl	8001870 <GPIO_Init>
	SPI_Init();
 8000ee2:	f000 fd0d 	bl	8001900 <SPI_Init>
	LIS_Init();
 8000ee6:	f000 fdd5 	bl	8001a94 <LIS_Init>
	//GPIOE->BSRR |= GPIO_BSRR_BS3;
	HAL_TIM_Base_Start_IT(&htim6);
 8000eea:	4895      	ldr	r0, [pc, #596]	@ (8001140 <main+0x2a8>)
 8000eec:	f002 f83a 	bl	8002f64 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart2,  rxdata, sizeof(rxdata));
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	4994      	ldr	r1, [pc, #592]	@ (8001144 <main+0x2ac>)
 8000ef4:	4894      	ldr	r0, [pc, #592]	@ (8001148 <main+0x2b0>)
 8000ef6:	f002 fbd4 	bl	80036a2 <HAL_UART_Receive_IT>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		// Call the read function
		LIS_Read();
 8000efa:	f000 fdd3 	bl	8001aa4 <LIS_Read>

		// Use the Convert_To_Val function to convert raw data into actual data
		x_final = Convert_To_Val(x) + X_OFFSET;
 8000efe:	4b93      	ldr	r3, [pc, #588]	@ (800114c <main+0x2b4>)
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fdee 	bl	8001ae4 <Convert_To_Val>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	3312      	adds	r3, #18
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	b21a      	sxth	r2, r3
 8000f12:	4b8f      	ldr	r3, [pc, #572]	@ (8001150 <main+0x2b8>)
 8000f14:	801a      	strh	r2, [r3, #0]
		y_final = Convert_To_Val(y) + Y_OFFSET;
 8000f16:	4b8f      	ldr	r3, [pc, #572]	@ (8001154 <main+0x2bc>)
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 fde2 	bl	8001ae4 <Convert_To_Val>
 8000f20:	4603      	mov	r3, r0
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	3312      	adds	r3, #18
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	4b8b      	ldr	r3, [pc, #556]	@ (8001158 <main+0x2c0>)
 8000f2c:	801a      	strh	r2, [r3, #0]

		if ((x_final != 0) && (y_final != 0)) {
 8000f2e:	4b88      	ldr	r3, [pc, #544]	@ (8001150 <main+0x2b8>)
 8000f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f000 80c8 	beq.w	80010ca <main+0x232>
 8000f3a:	4b87      	ldr	r3, [pc, #540]	@ (8001158 <main+0x2c0>)
 8000f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f000 80c2 	beq.w	80010ca <main+0x232>
			if (x_final > THRESH_HIGH) {
 8000f46:	4b82      	ldr	r3, [pc, #520]	@ (8001150 <main+0x2b8>)
 8000f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f4c:	2b78      	cmp	r3, #120	@ 0x78
 8000f4e:	dd0c      	ble.n	8000f6a <main+0xd2>
				GPIOD->ODR |= GPIO_ODR_OD14;
 8000f50:	4b7a      	ldr	r3, [pc, #488]	@ (800113c <main+0x2a4>)
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	4a79      	ldr	r2, [pc, #484]	@ (800113c <main+0x2a4>)
 8000f56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f5a:	6153      	str	r3, [r2, #20]
				GPIOD->ODR &= ~(GPIO_ODR_OD12 | GPIO_ODR_OD13 | GPIO_ODR_OD15);
 8000f5c:	4b77      	ldr	r3, [pc, #476]	@ (800113c <main+0x2a4>)
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	4a76      	ldr	r2, [pc, #472]	@ (800113c <main+0x2a4>)
 8000f62:	f423 4330 	bic.w	r3, r3, #45056	@ 0xb000
 8000f66:	6153      	str	r3, [r2, #20]
 8000f68:	e011      	b.n	8000f8e <main+0xf6>
			} else if (x_final < THRESH_LOW) {
 8000f6a:	4b79      	ldr	r3, [pc, #484]	@ (8001150 <main+0x2b8>)
 8000f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f70:	f113 0f78 	cmn.w	r3, #120	@ 0x78
 8000f74:	da0b      	bge.n	8000f8e <main+0xf6>
				GPIOD->ODR |= GPIO_ODR_OD12;
 8000f76:	4b71      	ldr	r3, [pc, #452]	@ (800113c <main+0x2a4>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	4a70      	ldr	r2, [pc, #448]	@ (800113c <main+0x2a4>)
 8000f7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f80:	6153      	str	r3, [r2, #20]
				GPIOD->ODR &= ~(GPIO_ODR_OD14 | GPIO_ODR_OD13 | GPIO_ODR_OD15);
 8000f82:	4b6e      	ldr	r3, [pc, #440]	@ (800113c <main+0x2a4>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	4a6d      	ldr	r2, [pc, #436]	@ (800113c <main+0x2a4>)
 8000f88:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8000f8c:	6153      	str	r3, [r2, #20]
			}

			if (x_final < THRESH_LOW && y_final > THRESH_HIGH) {
 8000f8e:	4b70      	ldr	r3, [pc, #448]	@ (8001150 <main+0x2b8>)
 8000f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f94:	f113 0f78 	cmn.w	r3, #120	@ 0x78
 8000f98:	da17      	bge.n	8000fca <main+0x132>
 8000f9a:	4b6f      	ldr	r3, [pc, #444]	@ (8001158 <main+0x2c0>)
 8000f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fa0:	2b78      	cmp	r3, #120	@ 0x78
 8000fa2:	dd12      	ble.n	8000fca <main+0x132>
				GPIOD->ODR |= GPIO_ODR_OD12;
 8000fa4:	4b65      	ldr	r3, [pc, #404]	@ (800113c <main+0x2a4>)
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	4a64      	ldr	r2, [pc, #400]	@ (800113c <main+0x2a4>)
 8000faa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fae:	6153      	str	r3, [r2, #20]
				GPIOD->ODR |= GPIO_ODR_OD13;
 8000fb0:	4b62      	ldr	r3, [pc, #392]	@ (800113c <main+0x2a4>)
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	4a61      	ldr	r2, [pc, #388]	@ (800113c <main+0x2a4>)
 8000fb6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fba:	6153      	str	r3, [r2, #20]

				GPIOD->ODR &= ~(GPIO_ODR_OD14 | GPIO_ODR_OD15);
 8000fbc:	4b5f      	ldr	r3, [pc, #380]	@ (800113c <main+0x2a4>)
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	4a5e      	ldr	r2, [pc, #376]	@ (800113c <main+0x2a4>)
 8000fc2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fc6:	6153      	str	r3, [r2, #20]
 8000fc8:	e07e      	b.n	80010c8 <main+0x230>
			} else if (x_final > THRESH_HIGH && y_final > THRESH_HIGH) {
 8000fca:	4b61      	ldr	r3, [pc, #388]	@ (8001150 <main+0x2b8>)
 8000fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd0:	2b78      	cmp	r3, #120	@ 0x78
 8000fd2:	dd17      	ble.n	8001004 <main+0x16c>
 8000fd4:	4b60      	ldr	r3, [pc, #384]	@ (8001158 <main+0x2c0>)
 8000fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fda:	2b78      	cmp	r3, #120	@ 0x78
 8000fdc:	dd12      	ble.n	8001004 <main+0x16c>
				GPIOD->ODR |= GPIO_ODR_OD13;
 8000fde:	4b57      	ldr	r3, [pc, #348]	@ (800113c <main+0x2a4>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	4a56      	ldr	r2, [pc, #344]	@ (800113c <main+0x2a4>)
 8000fe4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fe8:	6153      	str	r3, [r2, #20]
				GPIOD->ODR |= GPIO_ODR_OD14;
 8000fea:	4b54      	ldr	r3, [pc, #336]	@ (800113c <main+0x2a4>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	4a53      	ldr	r2, [pc, #332]	@ (800113c <main+0x2a4>)
 8000ff0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff4:	6153      	str	r3, [r2, #20]
				GPIOD->ODR &= ~(GPIO_ODR_OD12 | GPIO_ODR_OD15);
 8000ff6:	4b51      	ldr	r3, [pc, #324]	@ (800113c <main+0x2a4>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	4a50      	ldr	r2, [pc, #320]	@ (800113c <main+0x2a4>)
 8000ffc:	f423 4310 	bic.w	r3, r3, #36864	@ 0x9000
 8001000:	6153      	str	r3, [r2, #20]
 8001002:	e061      	b.n	80010c8 <main+0x230>
			} else if (x_final > THRESH_HIGH && y_final < THRESH_LOW) {
 8001004:	4b52      	ldr	r3, [pc, #328]	@ (8001150 <main+0x2b8>)
 8001006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100a:	2b78      	cmp	r3, #120	@ 0x78
 800100c:	dd18      	ble.n	8001040 <main+0x1a8>
 800100e:	4b52      	ldr	r3, [pc, #328]	@ (8001158 <main+0x2c0>)
 8001010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001014:	f113 0f78 	cmn.w	r3, #120	@ 0x78
 8001018:	da12      	bge.n	8001040 <main+0x1a8>
				GPIOD->ODR |= GPIO_ODR_OD15;
 800101a:	4b48      	ldr	r3, [pc, #288]	@ (800113c <main+0x2a4>)
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	4a47      	ldr	r2, [pc, #284]	@ (800113c <main+0x2a4>)
 8001020:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001024:	6153      	str	r3, [r2, #20]
				GPIOD->ODR |= GPIO_ODR_OD14;
 8001026:	4b45      	ldr	r3, [pc, #276]	@ (800113c <main+0x2a4>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	4a44      	ldr	r2, [pc, #272]	@ (800113c <main+0x2a4>)
 800102c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001030:	6153      	str	r3, [r2, #20]
				GPIOD->ODR &= ~(GPIO_ODR_OD12 | GPIO_ODR_OD13);
 8001032:	4b42      	ldr	r3, [pc, #264]	@ (800113c <main+0x2a4>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	4a41      	ldr	r2, [pc, #260]	@ (800113c <main+0x2a4>)
 8001038:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800103c:	6153      	str	r3, [r2, #20]
 800103e:	e043      	b.n	80010c8 <main+0x230>
			} else if (x_final < THRESH_LOW && y_final < THRESH_LOW) {
 8001040:	4b43      	ldr	r3, [pc, #268]	@ (8001150 <main+0x2b8>)
 8001042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001046:	f113 0f78 	cmn.w	r3, #120	@ 0x78
 800104a:	da18      	bge.n	800107e <main+0x1e6>
 800104c:	4b42      	ldr	r3, [pc, #264]	@ (8001158 <main+0x2c0>)
 800104e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001052:	f113 0f78 	cmn.w	r3, #120	@ 0x78
 8001056:	da12      	bge.n	800107e <main+0x1e6>
				GPIOD->ODR |= GPIO_ODR_OD12;
 8001058:	4b38      	ldr	r3, [pc, #224]	@ (800113c <main+0x2a4>)
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	4a37      	ldr	r2, [pc, #220]	@ (800113c <main+0x2a4>)
 800105e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001062:	6153      	str	r3, [r2, #20]
				GPIOD->ODR |= GPIO_ODR_OD15;
 8001064:	4b35      	ldr	r3, [pc, #212]	@ (800113c <main+0x2a4>)
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	4a34      	ldr	r2, [pc, #208]	@ (800113c <main+0x2a4>)
 800106a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800106e:	6153      	str	r3, [r2, #20]
				GPIOD->ODR &= ~(GPIO_ODR_OD13 | GPIO_ODR_OD14);
 8001070:	4b32      	ldr	r3, [pc, #200]	@ (800113c <main+0x2a4>)
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	4a31      	ldr	r2, [pc, #196]	@ (800113c <main+0x2a4>)
 8001076:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 800107a:	6153      	str	r3, [r2, #20]
 800107c:	e024      	b.n	80010c8 <main+0x230>
			}

			else if (y_final > THRESH_HIGH) {
 800107e:	4b36      	ldr	r3, [pc, #216]	@ (8001158 <main+0x2c0>)
 8001080:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001084:	2b78      	cmp	r3, #120	@ 0x78
 8001086:	dd0c      	ble.n	80010a2 <main+0x20a>
				GPIOD->ODR |= GPIO_ODR_OD13;
 8001088:	4b2c      	ldr	r3, [pc, #176]	@ (800113c <main+0x2a4>)
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	4a2b      	ldr	r2, [pc, #172]	@ (800113c <main+0x2a4>)
 800108e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001092:	6153      	str	r3, [r2, #20]
				GPIOD->ODR &= ~(GPIO_ODR_OD12 | GPIO_ODR_OD14 | GPIO_ODR_OD15);
 8001094:	4b29      	ldr	r3, [pc, #164]	@ (800113c <main+0x2a4>)
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	4a28      	ldr	r2, [pc, #160]	@ (800113c <main+0x2a4>)
 800109a:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 800109e:	6153      	str	r3, [r2, #20]
			if (x_final < THRESH_LOW && y_final > THRESH_HIGH) {
 80010a0:	e01a      	b.n	80010d8 <main+0x240>
			} else if (y_final < THRESH_LOW) {
 80010a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001158 <main+0x2c0>)
 80010a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a8:	f113 0f78 	cmn.w	r3, #120	@ 0x78
 80010ac:	da14      	bge.n	80010d8 <main+0x240>
				GPIOD->ODR |= GPIO_ODR_OD15;
 80010ae:	4b23      	ldr	r3, [pc, #140]	@ (800113c <main+0x2a4>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	4a22      	ldr	r2, [pc, #136]	@ (800113c <main+0x2a4>)
 80010b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010b8:	6153      	str	r3, [r2, #20]
				GPIOD->ODR &= ~(GPIO_ODR_OD12 | GPIO_ODR_OD13 | GPIO_ODR_OD14);
 80010ba:	4b20      	ldr	r3, [pc, #128]	@ (800113c <main+0x2a4>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	4a1f      	ldr	r2, [pc, #124]	@ (800113c <main+0x2a4>)
 80010c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80010c4:	6153      	str	r3, [r2, #20]
			if (x_final < THRESH_LOW && y_final > THRESH_HIGH) {
 80010c6:	e007      	b.n	80010d8 <main+0x240>
 80010c8:	e006      	b.n	80010d8 <main+0x240>
			}
		} else
			GPIOD->ODR &= ~(GPIO_ODR_OD12 | GPIO_ODR_OD13 | GPIO_ODR_OD14| GPIO_ODR_OD15);
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <main+0x2a4>)
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	4a1b      	ldr	r2, [pc, #108]	@ (800113c <main+0x2a4>)
 80010d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80010d4:	6153      	str	r3, [r2, #20]
 80010d6:	e000      	b.n	80010da <main+0x242>
			if (x_final < THRESH_LOW && y_final > THRESH_HIGH) {
 80010d8:	bf00      	nop

		// Give a finite delay
		HAL_Delay(50);
 80010da:	2032      	movs	r0, #50	@ 0x32
 80010dc:	f000 fe54 	bl	8001d88 <HAL_Delay>
		xangle = map(x_final, -1177, 1158, -90, 90);
 80010e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001150 <main+0x2b8>)
 80010e2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80010e6:	235a      	movs	r3, #90	@ 0x5a
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	f06f 0359 	mvn.w	r3, #89	@ 0x59
 80010ee:	f240 4286 	movw	r2, #1158	@ 0x486
 80010f2:	f46f 6193 	mvn.w	r1, #1176	@ 0x498
 80010f6:	f000 fd2f 	bl	8001b58 <map>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b17      	ldr	r3, [pc, #92]	@ (800115c <main+0x2c4>)
 8001100:	801a      	strh	r2, [r3, #0]
		yangle = map(y_final, -1159, 1177, -90, 90);
 8001102:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <main+0x2c0>)
 8001104:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001108:	235a      	movs	r3, #90	@ 0x5a
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	f06f 0359 	mvn.w	r3, #89	@ 0x59
 8001110:	f240 4299 	movw	r2, #1177	@ 0x499
 8001114:	4912      	ldr	r1, [pc, #72]	@ (8001160 <main+0x2c8>)
 8001116:	f000 fd1f 	bl	8001b58 <map>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <main+0x2cc>)
 8001120:	801a      	strh	r2, [r3, #0]

		sprintf(txdata,"\nx=%d y=%d",xangle,yangle);
 8001122:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <main+0x2c4>)
 8001124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001128:	461a      	mov	r2, r3
 800112a:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <main+0x2cc>)
 800112c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001130:	490d      	ldr	r1, [pc, #52]	@ (8001168 <main+0x2d0>)
 8001132:	480e      	ldr	r0, [pc, #56]	@ (800116c <main+0x2d4>)
 8001134:	f003 ff4a 	bl	8004fcc <siprintf>
		LIS_Read();
 8001138:	e6df      	b.n	8000efa <main+0x62>
 800113a:	bf00      	nop
 800113c:	40020c00 	.word	0x40020c00
 8001140:	20000250 	.word	0x20000250
 8001144:	200002f8 	.word	0x200002f8
 8001148:	20000298 	.word	0x20000298
 800114c:	200002e4 	.word	0x200002e4
 8001150:	200002ea 	.word	0x200002ea
 8001154:	200002e6 	.word	0x200002e6
 8001158:	200002ec 	.word	0x200002ec
 800115c:	200002f4 	.word	0x200002f4
 8001160:	fffffb79 	.word	0xfffffb79
 8001164:	200002f6 	.word	0x200002f6
 8001168:	08007240 	.word	0x08007240
 800116c:	200002fc 	.word	0x200002fc

08001170 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b094      	sub	sp, #80	@ 0x50
 8001174:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001176:	f107 0320 	add.w	r3, r7, #32
 800117a:	2230      	movs	r2, #48	@ 0x30
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f003 ff87 	bl	8005092 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	4b28      	ldr	r3, [pc, #160]	@ (800123c <SystemClock_Config+0xcc>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119c:	4a27      	ldr	r2, [pc, #156]	@ (800123c <SystemClock_Config+0xcc>)
 800119e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a4:	4b25      	ldr	r3, [pc, #148]	@ (800123c <SystemClock_Config+0xcc>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b0:	2300      	movs	r3, #0
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	4b22      	ldr	r3, [pc, #136]	@ (8001240 <SystemClock_Config+0xd0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a21      	ldr	r2, [pc, #132]	@ (8001240 <SystemClock_Config+0xd0>)
 80011ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <SystemClock_Config+0xd0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011cc:	2301      	movs	r3, #1
 80011ce:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011d4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d6:	2302      	movs	r3, #2
 80011d8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011de:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80011e0:	2304      	movs	r3, #4
 80011e2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 80011e4:	2354      	movs	r3, #84	@ 0x54
 80011e6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e8:	2302      	movs	r3, #2
 80011ea:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80011ec:	2307      	movs	r3, #7
 80011ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011f0:	f107 0320 	add.w	r3, r7, #32
 80011f4:	4618      	mov	r0, r3
 80011f6:	f001 f945 	bl	8002484 <HAL_RCC_OscConfig>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <SystemClock_Config+0x94>
		Error_Handler();
 8001200:	f000 f92c 	bl	800145c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001204:	230f      	movs	r3, #15
 8001206:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001208:	2302      	movs	r3, #2
 800120a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001210:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001214:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001216:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800121a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	2102      	movs	r1, #2
 8001222:	4618      	mov	r0, r3
 8001224:	f001 fba6 	bl	8002974 <HAL_RCC_ClockConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0xc2>
		Error_Handler();
 800122e:	f000 f915 	bl	800145c <Error_Handler>
	}
}
 8001232:	bf00      	nop
 8001234:	3750      	adds	r7, #80	@ 0x50
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40007000 	.word	0x40007000

08001244 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <MX_SPI1_Init+0x64>)
 800124a:	4a18      	ldr	r2, [pc, #96]	@ (80012ac <MX_SPI1_Init+0x68>)
 800124c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800124e:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001250:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001254:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001256:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800125c:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <MX_SPI1_Init+0x64>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001262:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <MX_SPI1_Init+0x64>)
 800126a:	2200      	movs	r2, #0
 800126c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800126e:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001270:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001274:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800127c:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <MX_SPI1_Init+0x64>)
 800127e:	2200      	movs	r2, #0
 8001280:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001282:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001284:	2200      	movs	r2, #0
 8001286:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001288:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <MX_SPI1_Init+0x64>)
 800128a:	2200      	movs	r2, #0
 800128c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001290:	220a      	movs	r2, #10
 8001292:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001294:	4804      	ldr	r0, [pc, #16]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001296:	f001 fd8d 	bl	8002db4 <HAL_SPI_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_SPI1_Init+0x60>
		Error_Handler();
 80012a0:	f000 f8dc 	bl	800145c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200001f8 	.word	0x200001f8
 80012ac:	40013000 	.word	0x40013000

080012b0 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012b6:	463b      	mov	r3, r7
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80012be:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <MX_TIM6_Init+0x64>)
 80012c0:	4a15      	ldr	r2, [pc, #84]	@ (8001318 <MX_TIM6_Init+0x68>)
 80012c2:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 41999;
 80012c4:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <MX_TIM6_Init+0x64>)
 80012c6:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80012ca:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012cc:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <MX_TIM6_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 199;
 80012d2:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <MX_TIM6_Init+0x64>)
 80012d4:	22c7      	movs	r2, #199	@ 0xc7
 80012d6:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <MX_TIM6_Init+0x64>)
 80012da:	2280      	movs	r2, #128	@ 0x80
 80012dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80012de:	480d      	ldr	r0, [pc, #52]	@ (8001314 <MX_TIM6_Init+0x64>)
 80012e0:	f001 fdf1 	bl	8002ec6 <HAL_TIM_Base_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM6_Init+0x3e>
		Error_Handler();
 80012ea:	f000 f8b7 	bl	800145c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 80012f6:	463b      	mov	r3, r7
 80012f8:	4619      	mov	r1, r3
 80012fa:	4806      	ldr	r0, [pc, #24]	@ (8001314 <MX_TIM6_Init+0x64>)
 80012fc:	f002 f866 	bl	80033cc <HAL_TIMEx_MasterConfigSynchronization>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM6_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 8001306:	f000 f8a9 	bl	800145c <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000250 	.word	0x20000250
 8001318:	40001000 	.word	0x40001000

0800131c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001320:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <MX_USART2_UART_Init+0x4c>)
 8001322:	4a12      	ldr	r2, [pc, #72]	@ (800136c <MX_USART2_UART_Init+0x50>)
 8001324:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001326:	4b10      	ldr	r3, [pc, #64]	@ (8001368 <MX_USART2_UART_Init+0x4c>)
 8001328:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800132c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <MX_USART2_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <MX_USART2_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800133a:	4b0b      	ldr	r3, [pc, #44]	@ (8001368 <MX_USART2_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <MX_USART2_UART_Init+0x4c>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <MX_USART2_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <MX_USART2_UART_Init+0x4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001352:	4805      	ldr	r0, [pc, #20]	@ (8001368 <MX_USART2_UART_Init+0x4c>)
 8001354:	f002 f8ca 	bl	80034ec <HAL_UART_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800135e:	f000 f87d 	bl	800145c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000298 	.word	0x20000298
 800136c:	40004400 	.word	0x40004400

08001370 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	@ 0x28
 8001374:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	4b31      	ldr	r3, [pc, #196]	@ (8001450 <MX_GPIO_Init+0xe0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a30      	ldr	r2, [pc, #192]	@ (8001450 <MX_GPIO_Init+0xe0>)
 8001390:	f043 0310 	orr.w	r3, r3, #16
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b2e      	ldr	r3, [pc, #184]	@ (8001450 <MX_GPIO_Init+0xe0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f003 0310 	and.w	r3, r3, #16
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001450 <MX_GPIO_Init+0xe0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	4a29      	ldr	r2, [pc, #164]	@ (8001450 <MX_GPIO_Init+0xe0>)
 80013ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b2:	4b27      	ldr	r3, [pc, #156]	@ (8001450 <MX_GPIO_Init+0xe0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	4b23      	ldr	r3, [pc, #140]	@ (8001450 <MX_GPIO_Init+0xe0>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4a22      	ldr	r2, [pc, #136]	@ (8001450 <MX_GPIO_Init+0xe0>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <MX_GPIO_Init+0xe0>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b1c      	ldr	r3, [pc, #112]	@ (8001450 <MX_GPIO_Init+0xe0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001450 <MX_GPIO_Init+0xe0>)
 80013e4:	f043 0308 	orr.w	r3, r3, #8
 80013e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ea:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <MX_GPIO_Init+0xe0>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2108      	movs	r1, #8
 80013fa:	4816      	ldr	r0, [pc, #88]	@ (8001454 <MX_GPIO_Init+0xe4>)
 80013fc:	f001 f828 	bl	8002450 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, led12_Pin | led13_Pin | led14_Pin | led15_Pin,
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001406:	4814      	ldr	r0, [pc, #80]	@ (8001458 <MX_GPIO_Init+0xe8>)
 8001408:	f001 f822 	bl	8002450 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PE3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800140c:	2308      	movs	r3, #8
 800140e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001410:	2301      	movs	r3, #1
 8001412:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	480c      	ldr	r0, [pc, #48]	@ (8001454 <MX_GPIO_Init+0xe4>)
 8001424:	f000 fe78 	bl	8002118 <HAL_GPIO_Init>

	/*Configure GPIO pins : led12_Pin led13_Pin led14_Pin led15_Pin */
	GPIO_InitStruct.Pin = led12_Pin | led13_Pin | led14_Pin | led15_Pin;
 8001428:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800142c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001436:	2301      	movs	r3, #1
 8001438:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	@ (8001458 <MX_GPIO_Init+0xe8>)
 8001442:	f000 fe69 	bl	8002118 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001446:	bf00      	nop
 8001448:	3728      	adds	r7, #40	@ 0x28
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	40021000 	.word	0x40021000
 8001458:	40020c00 	.word	0x40020c00

0800145c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001460:	b672      	cpsid	i
}
 8001462:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <Error_Handler+0x8>

08001468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	4b10      	ldr	r3, [pc, #64]	@ (80014b4 <HAL_MspInit+0x4c>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	4a0f      	ldr	r2, [pc, #60]	@ (80014b4 <HAL_MspInit+0x4c>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800147c:	6453      	str	r3, [r2, #68]	@ 0x44
 800147e:	4b0d      	ldr	r3, [pc, #52]	@ (80014b4 <HAL_MspInit+0x4c>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <HAL_MspInit+0x4c>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	4a08      	ldr	r2, [pc, #32]	@ (80014b4 <HAL_MspInit+0x4c>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001498:	6413      	str	r3, [r2, #64]	@ 0x40
 800149a:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <HAL_MspInit+0x4c>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014a6:	2007      	movs	r0, #7
 80014a8:	f000 fd62 	bl	8001f70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40023800 	.word	0x40023800

080014b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	@ 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a19      	ldr	r2, [pc, #100]	@ (800153c <HAL_SPI_MspInit+0x84>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d12b      	bne.n	8001532 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <HAL_SPI_MspInit+0x88>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e2:	4a17      	ldr	r2, [pc, #92]	@ (8001540 <HAL_SPI_MspInit+0x88>)
 80014e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ea:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <HAL_SPI_MspInit+0x88>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <HAL_SPI_MspInit+0x88>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	4a10      	ldr	r2, [pc, #64]	@ (8001540 <HAL_SPI_MspInit+0x88>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6313      	str	r3, [r2, #48]	@ 0x30
 8001506:	4b0e      	ldr	r3, [pc, #56]	@ (8001540 <HAL_SPI_MspInit+0x88>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001512:	23e0      	movs	r3, #224	@ 0xe0
 8001514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001522:	2305      	movs	r3, #5
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	@ (8001544 <HAL_SPI_MspInit+0x8c>)
 800152e:	f000 fdf3 	bl	8002118 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001532:	bf00      	nop
 8001534:	3728      	adds	r7, #40	@ 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40013000 	.word	0x40013000
 8001540:	40023800 	.word	0x40023800
 8001544:	40020000 	.word	0x40020000

08001548 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0e      	ldr	r2, [pc, #56]	@ (8001590 <HAL_TIM_Base_MspInit+0x48>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d115      	bne.n	8001586 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b0d      	ldr	r3, [pc, #52]	@ (8001594 <HAL_TIM_Base_MspInit+0x4c>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	4a0c      	ldr	r2, [pc, #48]	@ (8001594 <HAL_TIM_Base_MspInit+0x4c>)
 8001564:	f043 0310 	orr.w	r3, r3, #16
 8001568:	6413      	str	r3, [r2, #64]	@ 0x40
 800156a:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <HAL_TIM_Base_MspInit+0x4c>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	f003 0310 	and.w	r3, r3, #16
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	2036      	movs	r0, #54	@ 0x36
 800157c:	f000 fd03 	bl	8001f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001580:	2036      	movs	r0, #54	@ 0x36
 8001582:	f000 fd1c 	bl	8001fbe <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40001000 	.word	0x40001000
 8001594:	40023800 	.word	0x40023800

08001598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	@ 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a1d      	ldr	r2, [pc, #116]	@ (800162c <HAL_UART_MspInit+0x94>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d133      	bne.n	8001622 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b1c      	ldr	r3, [pc, #112]	@ (8001630 <HAL_UART_MspInit+0x98>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001630 <HAL_UART_MspInit+0x98>)
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ca:	4b19      	ldr	r3, [pc, #100]	@ (8001630 <HAL_UART_MspInit+0x98>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <HAL_UART_MspInit+0x98>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	4a14      	ldr	r2, [pc, #80]	@ (8001630 <HAL_UART_MspInit+0x98>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e6:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <HAL_UART_MspInit+0x98>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015f2:	230c      	movs	r3, #12
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001602:	2307      	movs	r3, #7
 8001604:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4809      	ldr	r0, [pc, #36]	@ (8001634 <HAL_UART_MspInit+0x9c>)
 800160e:	f000 fd83 	bl	8002118 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	2026      	movs	r0, #38	@ 0x26
 8001618:	f000 fcb5 	bl	8001f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800161c:	2026      	movs	r0, #38	@ 0x26
 800161e:	f000 fcce 	bl	8001fbe <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	@ 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40004400 	.word	0x40004400
 8001630:	40023800 	.word	0x40023800
 8001634:	40020000 	.word	0x40020000

08001638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <NMI_Handler+0x4>

08001640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <MemManage_Handler+0x4>

08001650 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <UsageFault_Handler+0x4>

08001660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168e:	f000 fb5b 	bl	8001d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <USART2_IRQHandler+0x10>)
 800169e:	f002 f825 	bl	80036ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000298 	.word	0x20000298

080016ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016b0:	4802      	ldr	r0, [pc, #8]	@ (80016bc <TIM6_DAC_IRQHandler+0x10>)
 80016b2:	f001 fcc7 	bl	8003044 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000250 	.word	0x20000250

080016c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return 1;
 80016c4:	2301      	movs	r3, #1
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_kill>:

int _kill(int pid, int sig)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016da:	f003 fd2d 	bl	8005138 <__errno>
 80016de:	4603      	mov	r3, r0
 80016e0:	2216      	movs	r2, #22
 80016e2:	601a      	str	r2, [r3, #0]
  return -1;
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_exit>:

void _exit (int status)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ffe7 	bl	80016d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001702:	bf00      	nop
 8001704:	e7fd      	b.n	8001702 <_exit+0x12>

08001706 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	e00a      	b.n	800172e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001718:	f3af 8000 	nop.w
 800171c:	4601      	mov	r1, r0
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	60ba      	str	r2, [r7, #8]
 8001724:	b2ca      	uxtb	r2, r1
 8001726:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3301      	adds	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	429a      	cmp	r2, r3
 8001734:	dbf0      	blt.n	8001718 <_read+0x12>
  }

  return len;
 8001736:	687b      	ldr	r3, [r7, #4]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e009      	b.n	8001766 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	60ba      	str	r2, [r7, #8]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3301      	adds	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	429a      	cmp	r2, r3
 800176c:	dbf1      	blt.n	8001752 <_write+0x12>
  }
  return len;
 800176e:	687b      	ldr	r3, [r7, #4]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <_close>:

int _close(int file)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017a0:	605a      	str	r2, [r3, #4]
  return 0;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_isatty>:

int _isatty(int file)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017b8:	2301      	movs	r3, #1
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b085      	sub	sp, #20
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	60f8      	str	r0, [r7, #12]
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e8:	4a14      	ldr	r2, [pc, #80]	@ (800183c <_sbrk+0x5c>)
 80017ea:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <_sbrk+0x60>)
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f4:	4b13      	ldr	r3, [pc, #76]	@ (8001844 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d102      	bne.n	8001802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017fc:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <_sbrk+0x64>)
 80017fe:	4a12      	ldr	r2, [pc, #72]	@ (8001848 <_sbrk+0x68>)
 8001800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001802:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	429a      	cmp	r2, r3
 800180e:	d207      	bcs.n	8001820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001810:	f003 fc92 	bl	8005138 <__errno>
 8001814:	4603      	mov	r3, r0
 8001816:	220c      	movs	r2, #12
 8001818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
 800181e:	e009      	b.n	8001834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001826:	4b07      	ldr	r3, [pc, #28]	@ (8001844 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	4a05      	ldr	r2, [pc, #20]	@ (8001844 <_sbrk+0x64>)
 8001830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20020000 	.word	0x20020000
 8001840:	00000400 	.word	0x00000400
 8001844:	200002e0 	.word	0x200002e0
 8001848:	20000458 	.word	0x20000458

0800184c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <SystemInit+0x20>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001856:	4a05      	ldr	r2, [pc, #20]	@ (800186c <SystemInit+0x20>)
 8001858:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800185c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <GPIO_Init>:
int16_t mapvalue = 0, xangle = 0, yangle = 0;
uint8_t rxdata[3] = { '\0' };
char txdata[12] = { 0 };
uint8_t txleft[] = "closed\n";

void GPIO_Init() {
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001874:	4b1e      	ldr	r3, [pc, #120]	@ (80018f0 <GPIO_Init+0x80>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001878:	4a1d      	ldr	r2, [pc, #116]	@ (80018f0 <GPIO_Init+0x80>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6313      	str	r3, [r2, #48]	@ 0x30

	// Configuring PA5, PA6, PA7 in alternate function mode
	GPIOA->MODER |= (GPIO_MODER_MODER5_1 | GPIO_MODER_MODER6_1
 8001880:	4b1c      	ldr	r3, [pc, #112]	@ (80018f4 <GPIO_Init+0x84>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a1b      	ldr	r2, [pc, #108]	@ (80018f4 <GPIO_Init+0x84>)
 8001886:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 800188a:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODER7_1);

	// Select AF5 for SPI on PA5, PA6, PA7
	GPIOA->AFR[0] |= (GPIO_AFRL_AFSEL5_2 | GPIO_AFRL_AFSEL5_0
 800188c:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <GPIO_Init+0x84>)
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4a18      	ldr	r2, [pc, #96]	@ (80018f4 <GPIO_Init+0x84>)
 8001892:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8001896:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 800189a:	6213      	str	r3, [r2, #32]
			| GPIO_AFRL_AFSEL6_2 | GPIO_AFRL_AFSEL6_0 | GPIO_AFRL_AFSEL7_2
			| GPIO_AFRL_AFSEL7_0);

	// Enable GPIOE clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 800189c:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <GPIO_Init+0x80>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a0:	4a13      	ldr	r2, [pc, #76]	@ (80018f0 <GPIO_Init+0x80>)
 80018a2:	f043 0310 	orr.w	r3, r3, #16
 80018a6:	6313      	str	r3, [r2, #48]	@ 0x30

	// Since PE3 is CS, it needs to be configured in Output Mode
	GPIOE->MODER |= GPIO_MODER_MODER3_0;
 80018a8:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <GPIO_Init+0x88>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a12      	ldr	r2, [pc, #72]	@ (80018f8 <GPIO_Init+0x88>)
 80018ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018b2:	6013      	str	r3, [r2, #0]

	GPIOA->OSPEEDR |= ( GPIO_OSPEEDER_OSPEEDR5_0 | GPIO_OSPEEDER_OSPEEDR6_0 |GPIO_OSPEEDER_OSPEEDR7_0);
 80018b4:	4b0f      	ldr	r3, [pc, #60]	@ (80018f4 <GPIO_Init+0x84>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	4a0e      	ldr	r2, [pc, #56]	@ (80018f4 <GPIO_Init+0x84>)
 80018ba:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 80018be:	6093      	str	r3, [r2, #8]

	GPIOA->PUPDR |= (GPIO_PUPDR_PUPD5_1 | GPIO_PUPDR_PUPD6_1| GPIO_PUPDR_PUPD7_1);
 80018c0:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <GPIO_Init+0x84>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4a0b      	ldr	r2, [pc, #44]	@ (80018f4 <GPIO_Init+0x84>)
 80018c6:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 80018ca:	60d3      	str	r3, [r2, #12]

	// Enable clock for GPIOD and Configure PD12 in output mode
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80018cc:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <GPIO_Init+0x80>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d0:	4a07      	ldr	r2, [pc, #28]	@ (80018f0 <GPIO_Init+0x80>)
 80018d2:	f043 0308 	orr.w	r3, r3, #8
 80018d6:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOD->MODER |= (GPIO_MODER_MODER12_0 | GPIO_MODER_MODER13_0| GPIO_MODER_MODER14_0 | GPIO_MODER_MODER15_0);
 80018d8:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <GPIO_Init+0x8c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a07      	ldr	r2, [pc, #28]	@ (80018fc <GPIO_Init+0x8c>)
 80018de:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40020000 	.word	0x40020000
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40020c00 	.word	0x40020c00

08001900 <SPI_Init>:

void SPI_Init() {
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
	// Enable SPI clock
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8001904:	4b27      	ldr	r3, [pc, #156]	@ (80019a4 <SPI_Init+0xa4>)
 8001906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001908:	4a26      	ldr	r2, [pc, #152]	@ (80019a4 <SPI_Init+0xa4>)
 800190a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800190e:	6453      	str	r3, [r2, #68]	@ 0x44

	// Select the Master Configuration
	SPI1->CR1 |= SPI_CR1_MSTR;
 8001910:	4b25      	ldr	r3, [pc, #148]	@ (80019a8 <SPI_Init+0xa8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a24      	ldr	r2, [pc, #144]	@ (80019a8 <SPI_Init+0xa8>)
 8001916:	f043 0304 	orr.w	r3, r3, #4
 800191a:	6013      	str	r3, [r2, #0]

	SPI1->CR1 &= ~SPI_CR1_BIDIMODE;
 800191c:	4b22      	ldr	r3, [pc, #136]	@ (80019a8 <SPI_Init+0xa8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a21      	ldr	r2, [pc, #132]	@ (80019a8 <SPI_Init+0xa8>)
 8001922:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001926:	6013      	str	r3, [r2, #0]

	SPI1->CR1 &= ~SPI_CR1_RXONLY;
 8001928:	4b1f      	ldr	r3, [pc, #124]	@ (80019a8 <SPI_Init+0xa8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a1e      	ldr	r2, [pc, #120]	@ (80019a8 <SPI_Init+0xa8>)
 800192e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001932:	6013      	str	r3, [r2, #0]

	// Set the Data Frame Format (DFF) to '0' or 8-bit.
	SPI1->CR1 &= ~SPI_CR1_DFF;
 8001934:	4b1c      	ldr	r3, [pc, #112]	@ (80019a8 <SPI_Init+0xa8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1b      	ldr	r2, [pc, #108]	@ (80019a8 <SPI_Init+0xa8>)
 800193a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800193e:	6013      	str	r3, [r2, #0]

	// SSI and SSM bits in the SP1->CR1 register need to be set
	// to '1'
	SPI1->CR1 |= (SPI_CR1_SSI | SPI_CR1_SSM);
 8001940:	4b19      	ldr	r3, [pc, #100]	@ (80019a8 <SPI_Init+0xa8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a18      	ldr	r2, [pc, #96]	@ (80019a8 <SPI_Init+0xa8>)
 8001946:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800194a:	6013      	str	r3, [r2, #0]

	// Setting Baud Rate
	SPI1->CR1 &= ~SPI_CR1_BR;
 800194c:	4b16      	ldr	r3, [pc, #88]	@ (80019a8 <SPI_Init+0xa8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a15      	ldr	r2, [pc, #84]	@ (80019a8 <SPI_Init+0xa8>)
 8001952:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8001956:	6013      	str	r3, [r2, #0]

	// Set the transmission to MSB First Mode
	SPI1->CR1 &= ~SPI_CR1_LSBFIRST;
 8001958:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <SPI_Init+0xa8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a12      	ldr	r2, [pc, #72]	@ (80019a8 <SPI_Init+0xa8>)
 800195e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001962:	6013      	str	r3, [r2, #0]

	// Configure CPOL and CPHASE to '0' and '0', respectively.
	// i.e. Clock is at '0' when idle, and data capture is done
	// on the first clock transition which is the rising edge.
	SPI1->CR1 &= ~SPI_CR1_CPHA;
 8001964:	4b10      	ldr	r3, [pc, #64]	@ (80019a8 <SPI_Init+0xa8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0f      	ldr	r2, [pc, #60]	@ (80019a8 <SPI_Init+0xa8>)
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~SPI_CR1_CPOL;
 8001970:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <SPI_Init+0xa8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0c      	ldr	r2, [pc, #48]	@ (80019a8 <SPI_Init+0xa8>)
 8001976:	f023 0302 	bic.w	r3, r3, #2
 800197a:	6013      	str	r3, [r2, #0]

	// Enable CRC
	SPI1->CR1 |= SPI_CR1_CRCEN;
 800197c:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <SPI_Init+0xa8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a09      	ldr	r2, [pc, #36]	@ (80019a8 <SPI_Init+0xa8>)
 8001982:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001986:	6013      	str	r3, [r2, #0]

	// Enable SPI
	SPI1->CR1 |= SPI_CR1_SPE;
 8001988:	4b07      	ldr	r3, [pc, #28]	@ (80019a8 <SPI_Init+0xa8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a06      	ldr	r2, [pc, #24]	@ (80019a8 <SPI_Init+0xa8>)
 800198e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001992:	6013      	str	r3, [r2, #0]

	// Selecting Motorola Format
	SPI1->CR2 = 0x0000;
 8001994:	4b04      	ldr	r3, [pc, #16]	@ (80019a8 <SPI_Init+0xa8>)
 8001996:	2200      	movs	r2, #0
 8001998:	605a      	str	r2, [r3, #4]
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40013000 	.word	0x40013000

080019ac <SPI_Transmit>:

uint16_t SPI_Transmit(uint8_t data) {
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
	//  Wait until the TX buffer is empty, i.e. data is transmitted
	while (!((SPI1->SR) & SPI_SR_TXE)) {
 80019b6:	bf00      	nop
 80019b8:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <SPI_Transmit+0x48>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f9      	beq.n	80019b8 <SPI_Transmit+0xc>
	}
	// Load the data into the data register
	SPI1->DR = data;
 80019c4:	4a0b      	ldr	r2, [pc, #44]	@ (80019f4 <SPI_Transmit+0x48>)
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	60d3      	str	r3, [r2, #12]

	while (!(SPI1->SR & SPI_SR_RXNE)) {
 80019ca:	bf00      	nop
 80019cc:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <SPI_Transmit+0x48>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f9      	beq.n	80019cc <SPI_Transmit+0x20>
	}
	// If reception is intended, read the value from the data register
	rxd = SPI1->DR;
 80019d8:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <SPI_Transmit+0x48>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	b29a      	uxth	r2, r3
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <SPI_Transmit+0x4c>)
 80019e0:	801a      	strh	r2, [r3, #0]

	return rxd;
 80019e2:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <SPI_Transmit+0x4c>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40013000 	.word	0x40013000
 80019f8:	200002ee 	.word	0x200002ee

080019fc <SPI_Receive>:

uint16_t SPI_Receive(uint8_t addr) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
	GPIOE->BSRR |= GPIO_BSRR_BR3;
 8001a06:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <SPI_Receive+0x4c>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a48 <SPI_Receive+0x4c>)
 8001a0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a10:	6193      	str	r3, [r2, #24]
	addr |= 0x80;
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a18:	71fb      	strb	r3, [r7, #7]
	SPI_Transmit(addr);
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ffc5 	bl	80019ac <SPI_Transmit>
	rxdf = SPI_Transmit(0);
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff ffc2 	bl	80019ac <SPI_Transmit>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b07      	ldr	r3, [pc, #28]	@ (8001a4c <SPI_Receive+0x50>)
 8001a2e:	801a      	strh	r2, [r3, #0]
	GPIOE->BSRR |= GPIO_BSRR_BS3;
 8001a30:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <SPI_Receive+0x4c>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	4a04      	ldr	r2, [pc, #16]	@ (8001a48 <SPI_Receive+0x4c>)
 8001a36:	f043 0308 	orr.w	r3, r3, #8
 8001a3a:	6193      	str	r3, [r2, #24]
	return rxdf;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	@ (8001a4c <SPI_Receive+0x50>)
 8001a3e:	881b      	ldrh	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	200002f0 	.word	0x200002f0

08001a50 <LIS_Write>:

void LIS_Write(uint8_t addr, uint8_t data) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	460a      	mov	r2, r1
 8001a5a:	71fb      	strb	r3, [r7, #7]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	71bb      	strb	r3, [r7, #6]
	// Selecting the LIS accelerometer
	GPIOE->BSRR |= GPIO_BSRR_BR3;
 8001a60:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <LIS_Write+0x40>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <LIS_Write+0x40>)
 8001a66:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a6a:	6193      	str	r3, [r2, #24]

	// Send the Register Address
	SPI_Transmit(addr);
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff ff9c 	bl	80019ac <SPI_Transmit>

	// Send the data to be written
	SPI_Transmit(data);
 8001a74:	79bb      	ldrb	r3, [r7, #6]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ff98 	bl	80019ac <SPI_Transmit>

	// De-select the accelerometer
	GPIOE->BSRR |= GPIO_BSRR_BS3;
 8001a7c:	4b04      	ldr	r3, [pc, #16]	@ (8001a90 <LIS_Write+0x40>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a03      	ldr	r2, [pc, #12]	@ (8001a90 <LIS_Write+0x40>)
 8001a82:	f043 0308 	orr.w	r3, r3, #8
 8001a86:	6193      	str	r3, [r2, #24]
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40021000 	.word	0x40021000

08001a94 <LIS_Init>:

void LIS_Init() {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	// Powering on the accelerometer and Enabling the x,y and z axis for acceleration capture
	LIS_Write(CTRL_REG1, 0x47);
 8001a98:	2147      	movs	r1, #71	@ 0x47
 8001a9a:	2020      	movs	r0, #32
 8001a9c:	f7ff ffd8 	bl	8001a50 <LIS_Write>
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <LIS_Read>:

void LIS_Read() {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	// Reading the data for x-axis
	x = SPI_Receive(OUT_X);
 8001aa8:	2029      	movs	r0, #41	@ 0x29
 8001aaa:	f7ff ffa7 	bl	80019fc <SPI_Receive>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b09      	ldr	r3, [pc, #36]	@ (8001ad8 <LIS_Read+0x34>)
 8001ab4:	801a      	strh	r2, [r3, #0]

	// Reading the data for y-axis
	y = SPI_Receive(OUT_Y);
 8001ab6:	202b      	movs	r0, #43	@ 0x2b
 8001ab8:	f7ff ffa0 	bl	80019fc <SPI_Receive>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <LIS_Read+0x38>)
 8001ac2:	801a      	strh	r2, [r3, #0]

	// Reading the data for z-axis
	z = SPI_Receive(OUT_Z);
 8001ac4:	202d      	movs	r0, #45	@ 0x2d
 8001ac6:	f7ff ff99 	bl	80019fc <SPI_Receive>
 8001aca:	4603      	mov	r3, r0
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b04      	ldr	r3, [pc, #16]	@ (8001ae0 <LIS_Read+0x3c>)
 8001ad0:	801a      	strh	r2, [r3, #0]
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200002e4 	.word	0x200002e4
 8001adc:	200002e6 	.word	0x200002e6
 8001ae0:	200002e8 	.word	0x200002e8

08001ae4 <Convert_To_Val>:

int16_t Convert_To_Val(uint16_t val) {
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	80fb      	strh	r3, [r7, #6]
	if ((val & 0x80) == 0x80) {
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d01a      	beq.n	8001b2e <Convert_To_Val+0x4a>
		val = ~val;
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	80fb      	strh	r3, [r7, #6]
		val += 1;
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	3301      	adds	r3, #1
 8001b02:	80fb      	strh	r3, [r7, #6]
		val &= 0x00FF;
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	80fb      	strh	r3, [r7, #6]
		val = (val * 2300) / 127;
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	f640 02fc 	movw	r2, #2300	@ 0x8fc
 8001b10:	fb02 f303 	mul.w	r3, r2, r3
 8001b14:	4a0f      	ldr	r2, [pc, #60]	@ (8001b54 <Convert_To_Val+0x70>)
 8001b16:	fb82 1203 	smull	r1, r2, r2, r3
 8001b1a:	441a      	add	r2, r3
 8001b1c:	1192      	asrs	r2, r2, #6
 8001b1e:	17db      	asrs	r3, r3, #31
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	80fb      	strh	r3, [r7, #6]
		return (-1 * val);
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	425b      	negs	r3, r3
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b21b      	sxth	r3, r3
 8001b2c:	e00c      	b.n	8001b48 <Convert_To_Val+0x64>
	} else
		return ((val * 2300) / 127);
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	f640 02fc 	movw	r2, #2300	@ 0x8fc
 8001b34:	fb02 f303 	mul.w	r3, r2, r3
 8001b38:	4a06      	ldr	r2, [pc, #24]	@ (8001b54 <Convert_To_Val+0x70>)
 8001b3a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b3e:	441a      	add	r2, r3
 8001b40:	1192      	asrs	r2, r2, #6
 8001b42:	17db      	asrs	r3, r3, #31
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	b21b      	sxth	r3, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	81020409 	.word	0x81020409

08001b58 <map>:

int16_t map(int16_t value, int16_t min, int16_t max, int16_t valmin,
		int16_t valmax) {
 8001b58:	b490      	push	{r4, r7}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4604      	mov	r4, r0
 8001b60:	4608      	mov	r0, r1
 8001b62:	4611      	mov	r1, r2
 8001b64:	461a      	mov	r2, r3
 8001b66:	4623      	mov	r3, r4
 8001b68:	80fb      	strh	r3, [r7, #6]
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	80bb      	strh	r3, [r7, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	807b      	strh	r3, [r7, #2]
 8001b72:	4613      	mov	r3, r2
 8001b74:	803b      	strh	r3, [r7, #0]
	mapvalue = value * (valmax - valmin) / (max - min);
 8001b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b7a:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8001b7e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001b82:	1a8a      	subs	r2, r1, r2
 8001b84:	fb03 f202 	mul.w	r2, r3, r2
 8001b88:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001b8c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b90:	1acb      	subs	r3, r1, r3
 8001b92:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b96:	b21a      	sxth	r2, r3
 8001b98:	4b04      	ldr	r3, [pc, #16]	@ (8001bac <map+0x54>)
 8001b9a:	801a      	strh	r2, [r3, #0]
	return mapvalue;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	@ (8001bac <map+0x54>)
 8001b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc90      	pop	{r4, r7}
 8001baa:	4770      	bx	lr
 8001bac:	200002f2 	.word	0x200002f2

08001bb0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

	HAL_UART_Receive_IT(&huart2, rxdata, sizeof(rxdata));
 8001bb8:	2203      	movs	r2, #3
 8001bba:	4904      	ldr	r1, [pc, #16]	@ (8001bcc <HAL_UART_RxCpltCallback+0x1c>)
 8001bbc:	4804      	ldr	r0, [pc, #16]	@ (8001bd0 <HAL_UART_RxCpltCallback+0x20>)
 8001bbe:	f001 fd70 	bl	80036a2 <HAL_UART_Receive_IT>

}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200002f8 	.word	0x200002f8
 8001bd0:	20000298 	.word	0x20000298

08001bd4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

	if (rxdata[0] == 'o' && rxdata[1] == 'n' && rxdata[2] == 'n') {
 8001bdc:	4b18      	ldr	r3, [pc, #96]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b6f      	cmp	r3, #111	@ 0x6f
 8001be2:	d10e      	bne.n	8001c02 <HAL_TIM_PeriodElapsedCallback+0x2e>
 8001be4:	4b16      	ldr	r3, [pc, #88]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001be6:	785b      	ldrb	r3, [r3, #1]
 8001be8:	2b6e      	cmp	r3, #110	@ 0x6e
 8001bea:	d10a      	bne.n	8001c02 <HAL_TIM_PeriodElapsedCallback+0x2e>
 8001bec:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001bee:	789b      	ldrb	r3, [r3, #2]
 8001bf0:	2b6e      	cmp	r3, #110	@ 0x6e
 8001bf2:	d106      	bne.n	8001c02 <HAL_TIM_PeriodElapsedCallback+0x2e>

		HAL_UART_Transmit(&huart2, (uint8_t*) txdata, sizeof(txdata), TIMEOUT);
 8001bf4:	2364      	movs	r3, #100	@ 0x64
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	4912      	ldr	r1, [pc, #72]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001bfa:	4813      	ldr	r0, [pc, #76]	@ (8001c48 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001bfc:	f001 fcc6 	bl	800358c <HAL_UART_Transmit>
 8001c00:	e019      	b.n	8001c36 <HAL_TIM_PeriodElapsedCallback+0x62>
	} else if (rxdata[0] == 'o' && rxdata[1] == 'f' && rxdata[2] == 'f') {
 8001c02:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b6f      	cmp	r3, #111	@ 0x6f
 8001c08:	d10e      	bne.n	8001c28 <HAL_TIM_PeriodElapsedCallback+0x54>
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c0c:	785b      	ldrb	r3, [r3, #1]
 8001c0e:	2b66      	cmp	r3, #102	@ 0x66
 8001c10:	d10a      	bne.n	8001c28 <HAL_TIM_PeriodElapsedCallback+0x54>
 8001c12:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c14:	789b      	ldrb	r3, [r3, #2]
 8001c16:	2b66      	cmp	r3, #102	@ 0x66
 8001c18:	d106      	bne.n	8001c28 <HAL_TIM_PeriodElapsedCallback+0x54>
		HAL_UART_Transmit(&huart2, (uint8_t*) txleft, sizeof(txleft), TIMEOUT);
 8001c1a:	2364      	movs	r3, #100	@ 0x64
 8001c1c:	2208      	movs	r2, #8
 8001c1e:	490b      	ldr	r1, [pc, #44]	@ (8001c4c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001c20:	4809      	ldr	r0, [pc, #36]	@ (8001c48 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c22:	f001 fcb3 	bl	800358c <HAL_UART_Transmit>
 8001c26:	e006      	b.n	8001c36 <HAL_TIM_PeriodElapsedCallback+0x62>
	} else {
		HAL_UART_Transmit(&huart2, (uint8_t*) txdata, sizeof(txdata), TIMEOUT);
 8001c28:	2364      	movs	r3, #100	@ 0x64
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	4905      	ldr	r1, [pc, #20]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c2e:	4806      	ldr	r0, [pc, #24]	@ (8001c48 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c30:	f001 fcac 	bl	800358c <HAL_UART_Transmit>
	}

}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200002f8 	.word	0x200002f8
 8001c44:	200002fc 	.word	0x200002fc
 8001c48:	20000298 	.word	0x20000298
 8001c4c:	20000004 	.word	0x20000004

08001c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c88 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c54:	f7ff fdfa 	bl	800184c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c58:	480c      	ldr	r0, [pc, #48]	@ (8001c8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c5a:	490d      	ldr	r1, [pc, #52]	@ (8001c90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c60:	e002      	b.n	8001c68 <LoopCopyDataInit>

08001c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c66:	3304      	adds	r3, #4

08001c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c6c:	d3f9      	bcc.n	8001c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c70:	4c0a      	ldr	r4, [pc, #40]	@ (8001c9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c74:	e001      	b.n	8001c7a <LoopFillZerobss>

08001c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c78:	3204      	adds	r2, #4

08001c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c7c:	d3fb      	bcc.n	8001c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c7e:	f003 fa61 	bl	8005144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c82:	f7ff f909 	bl	8000e98 <main>
  bx  lr    
 8001c86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c90:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001c94:	080075e8 	.word	0x080075e8
  ldr r2, =_sbss
 8001c98:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001c9c:	20000458 	.word	0x20000458

08001ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca0:	e7fe      	b.n	8001ca0 <ADC_IRQHandler>
	...

08001ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce4 <HAL_Init+0x40>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce4 <HAL_Init+0x40>)
 8001cae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce4 <HAL_Init+0x40>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce4 <HAL_Init+0x40>)
 8001cba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc0:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <HAL_Init+0x40>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a07      	ldr	r2, [pc, #28]	@ (8001ce4 <HAL_Init+0x40>)
 8001cc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f000 f94f 	bl	8001f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f000 f808 	bl	8001ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd8:	f7ff fbc6 	bl	8001468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023c00 	.word	0x40023c00

08001ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf0:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <HAL_InitTick+0x54>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <HAL_InitTick+0x58>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f967 	bl	8001fda <HAL_SYSTICK_Config>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00e      	b.n	8001d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b0f      	cmp	r3, #15
 8001d1a:	d80a      	bhi.n	8001d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f000 f92f 	bl	8001f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d28:	4a06      	ldr	r2, [pc, #24]	@ (8001d44 <HAL_InitTick+0x5c>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e000      	b.n	8001d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	20000010 	.word	0x20000010
 8001d44:	2000000c 	.word	0x2000000c

08001d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <HAL_IncTick+0x20>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <HAL_IncTick+0x24>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	4a04      	ldr	r2, [pc, #16]	@ (8001d6c <HAL_IncTick+0x24>)
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000010 	.word	0x20000010
 8001d6c:	20000308 	.word	0x20000308

08001d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return uwTick;
 8001d74:	4b03      	ldr	r3, [pc, #12]	@ (8001d84 <HAL_GetTick+0x14>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000308 	.word	0x20000308

08001d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d90:	f7ff ffee 	bl	8001d70 <HAL_GetTick>
 8001d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da0:	d005      	beq.n	8001dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <HAL_Delay+0x44>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4413      	add	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dae:	bf00      	nop
 8001db0:	f7ff ffde 	bl	8001d70 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d8f7      	bhi.n	8001db0 <HAL_Delay+0x28>
  {
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000010 	.word	0x20000010

08001dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <__NVIC_SetPriorityGrouping+0x44>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dec:	4013      	ands	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e02:	4a04      	ldr	r2, [pc, #16]	@ (8001e14 <__NVIC_SetPriorityGrouping+0x44>)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	60d3      	str	r3, [r2, #12]
}
 8001e08:	bf00      	nop
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e1c:	4b04      	ldr	r3, [pc, #16]	@ (8001e30 <__NVIC_GetPriorityGrouping+0x18>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	f003 0307 	and.w	r3, r3, #7
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	db0b      	blt.n	8001e5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	f003 021f 	and.w	r2, r3, #31
 8001e4c:	4907      	ldr	r1, [pc, #28]	@ (8001e6c <__NVIC_EnableIRQ+0x38>)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	2001      	movs	r0, #1
 8001e56:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000e100 	.word	0xe000e100

08001e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	6039      	str	r1, [r7, #0]
 8001e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	db0a      	blt.n	8001e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	490c      	ldr	r1, [pc, #48]	@ (8001ebc <__NVIC_SetPriority+0x4c>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	0112      	lsls	r2, r2, #4
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	440b      	add	r3, r1
 8001e94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e98:	e00a      	b.n	8001eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4908      	ldr	r1, [pc, #32]	@ (8001ec0 <__NVIC_SetPriority+0x50>)
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	3b04      	subs	r3, #4
 8001ea8:	0112      	lsls	r2, r2, #4
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	440b      	add	r3, r1
 8001eae:	761a      	strb	r2, [r3, #24]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000e100 	.word	0xe000e100
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	@ 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f1c3 0307 	rsb	r3, r3, #7
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	bf28      	it	cs
 8001ee2:	2304      	movcs	r3, #4
 8001ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d902      	bls.n	8001ef4 <NVIC_EncodePriority+0x30>
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3b03      	subs	r3, #3
 8001ef2:	e000      	b.n	8001ef6 <NVIC_EncodePriority+0x32>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	401a      	ands	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	43d9      	mvns	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	4313      	orrs	r3, r2
         );
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3724      	adds	r7, #36	@ 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f3c:	d301      	bcc.n	8001f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e00f      	b.n	8001f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f42:	4a0a      	ldr	r2, [pc, #40]	@ (8001f6c <SysTick_Config+0x40>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f4a:	210f      	movs	r1, #15
 8001f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f50:	f7ff ff8e 	bl	8001e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f54:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <SysTick_Config+0x40>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5a:	4b04      	ldr	r3, [pc, #16]	@ (8001f6c <SysTick_Config+0x40>)
 8001f5c:	2207      	movs	r2, #7
 8001f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	e000e010 	.word	0xe000e010

08001f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff ff29 	bl	8001dd0 <__NVIC_SetPriorityGrouping>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b086      	sub	sp, #24
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f98:	f7ff ff3e 	bl	8001e18 <__NVIC_GetPriorityGrouping>
 8001f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	6978      	ldr	r0, [r7, #20]
 8001fa4:	f7ff ff8e 	bl	8001ec4 <NVIC_EncodePriority>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff5d 	bl	8001e70 <__NVIC_SetPriority>
}
 8001fb6:	bf00      	nop
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff31 	bl	8001e34 <__NVIC_EnableIRQ>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ffa2 	bl	8001f2c <SysTick_Config>
 8001fe8:	4603      	mov	r3, r0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002000:	f7ff feb6 	bl	8001d70 <HAL_GetTick>
 8002004:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d008      	beq.n	8002024 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2280      	movs	r2, #128	@ 0x80
 8002016:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e052      	b.n	80020ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0216 	bic.w	r2, r2, #22
 8002032:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002042:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d103      	bne.n	8002054 <HAL_DMA_Abort+0x62>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0208 	bic.w	r2, r2, #8
 8002062:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0201 	bic.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002074:	e013      	b.n	800209e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002076:	f7ff fe7b 	bl	8001d70 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b05      	cmp	r3, #5
 8002082:	d90c      	bls.n	800209e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2220      	movs	r2, #32
 8002088:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2203      	movs	r2, #3
 800208e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e015      	b.n	80020ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1e4      	bne.n	8002076 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b0:	223f      	movs	r2, #63	@ 0x3f
 80020b2:	409a      	lsls	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d004      	beq.n	80020f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2280      	movs	r2, #128	@ 0x80
 80020ea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e00c      	b.n	800210a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2205      	movs	r2, #5
 80020f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	@ 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	e16b      	b.n	800240c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002134:	2201      	movs	r2, #1
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	429a      	cmp	r2, r3
 800214e:	f040 815a 	bne.w	8002406 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b01      	cmp	r3, #1
 800215c:	d005      	beq.n	800216a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002166:	2b02      	cmp	r3, #2
 8002168:	d130      	bne.n	80021cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	2203      	movs	r2, #3
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a0:	2201      	movs	r2, #1
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	091b      	lsrs	r3, r3, #4
 80021b6:	f003 0201 	and.w	r2, r3, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d017      	beq.n	8002208 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	2203      	movs	r2, #3
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d123      	bne.n	800225c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	08da      	lsrs	r2, r3, #3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3208      	adds	r2, #8
 800221c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	220f      	movs	r2, #15
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	08da      	lsrs	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3208      	adds	r2, #8
 8002256:	69b9      	ldr	r1, [r7, #24]
 8002258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0203 	and.w	r2, r3, #3
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80b4 	beq.w	8002406 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	4b60      	ldr	r3, [pc, #384]	@ (8002424 <HAL_GPIO_Init+0x30c>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a6:	4a5f      	ldr	r2, [pc, #380]	@ (8002424 <HAL_GPIO_Init+0x30c>)
 80022a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002424 <HAL_GPIO_Init+0x30c>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002428 <HAL_GPIO_Init+0x310>)
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	089b      	lsrs	r3, r3, #2
 80022c0:	3302      	adds	r3, #2
 80022c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	220f      	movs	r2, #15
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a52      	ldr	r2, [pc, #328]	@ (800242c <HAL_GPIO_Init+0x314>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d02b      	beq.n	800233e <HAL_GPIO_Init+0x226>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a51      	ldr	r2, [pc, #324]	@ (8002430 <HAL_GPIO_Init+0x318>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d025      	beq.n	800233a <HAL_GPIO_Init+0x222>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a50      	ldr	r2, [pc, #320]	@ (8002434 <HAL_GPIO_Init+0x31c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d01f      	beq.n	8002336 <HAL_GPIO_Init+0x21e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4f      	ldr	r2, [pc, #316]	@ (8002438 <HAL_GPIO_Init+0x320>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d019      	beq.n	8002332 <HAL_GPIO_Init+0x21a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4e      	ldr	r2, [pc, #312]	@ (800243c <HAL_GPIO_Init+0x324>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d013      	beq.n	800232e <HAL_GPIO_Init+0x216>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4d      	ldr	r2, [pc, #308]	@ (8002440 <HAL_GPIO_Init+0x328>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d00d      	beq.n	800232a <HAL_GPIO_Init+0x212>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4c      	ldr	r2, [pc, #304]	@ (8002444 <HAL_GPIO_Init+0x32c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d007      	beq.n	8002326 <HAL_GPIO_Init+0x20e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a4b      	ldr	r2, [pc, #300]	@ (8002448 <HAL_GPIO_Init+0x330>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d101      	bne.n	8002322 <HAL_GPIO_Init+0x20a>
 800231e:	2307      	movs	r3, #7
 8002320:	e00e      	b.n	8002340 <HAL_GPIO_Init+0x228>
 8002322:	2308      	movs	r3, #8
 8002324:	e00c      	b.n	8002340 <HAL_GPIO_Init+0x228>
 8002326:	2306      	movs	r3, #6
 8002328:	e00a      	b.n	8002340 <HAL_GPIO_Init+0x228>
 800232a:	2305      	movs	r3, #5
 800232c:	e008      	b.n	8002340 <HAL_GPIO_Init+0x228>
 800232e:	2304      	movs	r3, #4
 8002330:	e006      	b.n	8002340 <HAL_GPIO_Init+0x228>
 8002332:	2303      	movs	r3, #3
 8002334:	e004      	b.n	8002340 <HAL_GPIO_Init+0x228>
 8002336:	2302      	movs	r3, #2
 8002338:	e002      	b.n	8002340 <HAL_GPIO_Init+0x228>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <HAL_GPIO_Init+0x228>
 800233e:	2300      	movs	r3, #0
 8002340:	69fa      	ldr	r2, [r7, #28]
 8002342:	f002 0203 	and.w	r2, r2, #3
 8002346:	0092      	lsls	r2, r2, #2
 8002348:	4093      	lsls	r3, r2
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002350:	4935      	ldr	r1, [pc, #212]	@ (8002428 <HAL_GPIO_Init+0x310>)
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	3302      	adds	r3, #2
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800235e:	4b3b      	ldr	r3, [pc, #236]	@ (800244c <HAL_GPIO_Init+0x334>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002382:	4a32      	ldr	r2, [pc, #200]	@ (800244c <HAL_GPIO_Init+0x334>)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002388:	4b30      	ldr	r3, [pc, #192]	@ (800244c <HAL_GPIO_Init+0x334>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023ac:	4a27      	ldr	r2, [pc, #156]	@ (800244c <HAL_GPIO_Init+0x334>)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023b2:	4b26      	ldr	r3, [pc, #152]	@ (800244c <HAL_GPIO_Init+0x334>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023d6:	4a1d      	ldr	r2, [pc, #116]	@ (800244c <HAL_GPIO_Init+0x334>)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023dc:	4b1b      	ldr	r3, [pc, #108]	@ (800244c <HAL_GPIO_Init+0x334>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002400:	4a12      	ldr	r2, [pc, #72]	@ (800244c <HAL_GPIO_Init+0x334>)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3301      	adds	r3, #1
 800240a:	61fb      	str	r3, [r7, #28]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	2b0f      	cmp	r3, #15
 8002410:	f67f ae90 	bls.w	8002134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002414:	bf00      	nop
 8002416:	bf00      	nop
 8002418:	3724      	adds	r7, #36	@ 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800
 8002428:	40013800 	.word	0x40013800
 800242c:	40020000 	.word	0x40020000
 8002430:	40020400 	.word	0x40020400
 8002434:	40020800 	.word	0x40020800
 8002438:	40020c00 	.word	0x40020c00
 800243c:	40021000 	.word	0x40021000
 8002440:	40021400 	.word	0x40021400
 8002444:	40021800 	.word	0x40021800
 8002448:	40021c00 	.word	0x40021c00
 800244c:	40013c00 	.word	0x40013c00

08002450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
 800245c:	4613      	mov	r3, r2
 800245e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002460:	787b      	ldrb	r3, [r7, #1]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002466:	887a      	ldrh	r2, [r7, #2]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800246c:	e003      	b.n	8002476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	041a      	lsls	r2, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	619a      	str	r2, [r3, #24]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e267      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d075      	beq.n	800258e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024a2:	4b88      	ldr	r3, [pc, #544]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d00c      	beq.n	80024c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ae:	4b85      	ldr	r3, [pc, #532]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d112      	bne.n	80024e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ba:	4b82      	ldr	r3, [pc, #520]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024c6:	d10b      	bne.n	80024e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c8:	4b7e      	ldr	r3, [pc, #504]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d05b      	beq.n	800258c <HAL_RCC_OscConfig+0x108>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d157      	bne.n	800258c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e242      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024e8:	d106      	bne.n	80024f8 <HAL_RCC_OscConfig+0x74>
 80024ea:	4b76      	ldr	r3, [pc, #472]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a75      	ldr	r2, [pc, #468]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e01d      	b.n	8002534 <HAL_RCC_OscConfig+0xb0>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x98>
 8002502:	4b70      	ldr	r3, [pc, #448]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a6f      	ldr	r2, [pc, #444]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4b6d      	ldr	r3, [pc, #436]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a6c      	ldr	r2, [pc, #432]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e00b      	b.n	8002534 <HAL_RCC_OscConfig+0xb0>
 800251c:	4b69      	ldr	r3, [pc, #420]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a68      	ldr	r2, [pc, #416]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b66      	ldr	r3, [pc, #408]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a65      	ldr	r2, [pc, #404]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 800252e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d013      	beq.n	8002564 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7ff fc18 	bl	8001d70 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002544:	f7ff fc14 	bl	8001d70 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	@ 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e207      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	4b5b      	ldr	r3, [pc, #364]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0xc0>
 8002562:	e014      	b.n	800258e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002564:	f7ff fc04 	bl	8001d70 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800256c:	f7ff fc00 	bl	8001d70 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	@ 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e1f3      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257e:	4b51      	ldr	r3, [pc, #324]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0xe8>
 800258a:	e000      	b.n	800258e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d063      	beq.n	8002662 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800259a:	4b4a      	ldr	r3, [pc, #296]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a6:	4b47      	ldr	r3, [pc, #284]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d11c      	bne.n	80025ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b2:	4b44      	ldr	r3, [pc, #272]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d116      	bne.n	80025ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025be:	4b41      	ldr	r3, [pc, #260]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d005      	beq.n	80025d6 <HAL_RCC_OscConfig+0x152>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e1c7      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d6:	4b3b      	ldr	r3, [pc, #236]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4937      	ldr	r1, [pc, #220]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ea:	e03a      	b.n	8002662 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d020      	beq.n	8002636 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f4:	4b34      	ldr	r3, [pc, #208]	@ (80026c8 <HAL_RCC_OscConfig+0x244>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fa:	f7ff fbb9 	bl	8001d70 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002602:	f7ff fbb5 	bl	8001d70 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e1a8      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002614:	4b2b      	ldr	r3, [pc, #172]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002620:	4b28      	ldr	r3, [pc, #160]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4925      	ldr	r1, [pc, #148]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002630:	4313      	orrs	r3, r2
 8002632:	600b      	str	r3, [r1, #0]
 8002634:	e015      	b.n	8002662 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002636:	4b24      	ldr	r3, [pc, #144]	@ (80026c8 <HAL_RCC_OscConfig+0x244>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7ff fb98 	bl	8001d70 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002644:	f7ff fb94 	bl	8001d70 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e187      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	4b1b      	ldr	r3, [pc, #108]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d036      	beq.n	80026dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d016      	beq.n	80026a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002676:	4b15      	ldr	r3, [pc, #84]	@ (80026cc <HAL_RCC_OscConfig+0x248>)
 8002678:	2201      	movs	r2, #1
 800267a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7ff fb78 	bl	8001d70 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002684:	f7ff fb74 	bl	8001d70 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e167      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002696:	4b0b      	ldr	r3, [pc, #44]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x200>
 80026a2:	e01b      	b.n	80026dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a4:	4b09      	ldr	r3, [pc, #36]	@ (80026cc <HAL_RCC_OscConfig+0x248>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026aa:	f7ff fb61 	bl	8001d70 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b0:	e00e      	b.n	80026d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b2:	f7ff fb5d 	bl	8001d70 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d907      	bls.n	80026d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e150      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
 80026c4:	40023800 	.word	0x40023800
 80026c8:	42470000 	.word	0x42470000
 80026cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d0:	4b88      	ldr	r3, [pc, #544]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 80026d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1ea      	bne.n	80026b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 8097 	beq.w	8002818 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ee:	4b81      	ldr	r3, [pc, #516]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10f      	bne.n	800271a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	4b7d      	ldr	r3, [pc, #500]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002702:	4a7c      	ldr	r2, [pc, #496]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002708:	6413      	str	r3, [r2, #64]	@ 0x40
 800270a:	4b7a      	ldr	r3, [pc, #488]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002716:	2301      	movs	r3, #1
 8002718:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271a:	4b77      	ldr	r3, [pc, #476]	@ (80028f8 <HAL_RCC_OscConfig+0x474>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d118      	bne.n	8002758 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002726:	4b74      	ldr	r3, [pc, #464]	@ (80028f8 <HAL_RCC_OscConfig+0x474>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a73      	ldr	r2, [pc, #460]	@ (80028f8 <HAL_RCC_OscConfig+0x474>)
 800272c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002732:	f7ff fb1d 	bl	8001d70 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273a:	f7ff fb19 	bl	8001d70 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e10c      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274c:	4b6a      	ldr	r3, [pc, #424]	@ (80028f8 <HAL_RCC_OscConfig+0x474>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x2ea>
 8002760:	4b64      	ldr	r3, [pc, #400]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002764:	4a63      	ldr	r2, [pc, #396]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6713      	str	r3, [r2, #112]	@ 0x70
 800276c:	e01c      	b.n	80027a8 <HAL_RCC_OscConfig+0x324>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b05      	cmp	r3, #5
 8002774:	d10c      	bne.n	8002790 <HAL_RCC_OscConfig+0x30c>
 8002776:	4b5f      	ldr	r3, [pc, #380]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277a:	4a5e      	ldr	r2, [pc, #376]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 800277c:	f043 0304 	orr.w	r3, r3, #4
 8002780:	6713      	str	r3, [r2, #112]	@ 0x70
 8002782:	4b5c      	ldr	r3, [pc, #368]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002786:	4a5b      	ldr	r2, [pc, #364]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6713      	str	r3, [r2, #112]	@ 0x70
 800278e:	e00b      	b.n	80027a8 <HAL_RCC_OscConfig+0x324>
 8002790:	4b58      	ldr	r3, [pc, #352]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002794:	4a57      	ldr	r2, [pc, #348]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	6713      	str	r3, [r2, #112]	@ 0x70
 800279c:	4b55      	ldr	r3, [pc, #340]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a0:	4a54      	ldr	r2, [pc, #336]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 80027a2:	f023 0304 	bic.w	r3, r3, #4
 80027a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d015      	beq.n	80027dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b0:	f7ff fade 	bl	8001d70 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b8:	f7ff fada 	bl	8001d70 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e0cb      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ce:	4b49      	ldr	r3, [pc, #292]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0ee      	beq.n	80027b8 <HAL_RCC_OscConfig+0x334>
 80027da:	e014      	b.n	8002806 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027dc:	f7ff fac8 	bl	8001d70 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e4:	f7ff fac4 	bl	8001d70 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e0b5      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fa:	4b3e      	ldr	r3, [pc, #248]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1ee      	bne.n	80027e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002806:	7dfb      	ldrb	r3, [r7, #23]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d105      	bne.n	8002818 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280c:	4b39      	ldr	r3, [pc, #228]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 800280e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002810:	4a38      	ldr	r2, [pc, #224]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002812:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002816:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80a1 	beq.w	8002964 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002822:	4b34      	ldr	r3, [pc, #208]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b08      	cmp	r3, #8
 800282c:	d05c      	beq.n	80028e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d141      	bne.n	80028ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002836:	4b31      	ldr	r3, [pc, #196]	@ (80028fc <HAL_RCC_OscConfig+0x478>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7ff fa98 	bl	8001d70 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002844:	f7ff fa94 	bl	8001d70 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e087      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	4b27      	ldr	r3, [pc, #156]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69da      	ldr	r2, [r3, #28]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002870:	019b      	lsls	r3, r3, #6
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002878:	085b      	lsrs	r3, r3, #1
 800287a:	3b01      	subs	r3, #1
 800287c:	041b      	lsls	r3, r3, #16
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	491b      	ldr	r1, [pc, #108]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800288c:	4b1b      	ldr	r3, [pc, #108]	@ (80028fc <HAL_RCC_OscConfig+0x478>)
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7ff fa6d 	bl	8001d70 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289a:	f7ff fa69 	bl	8001d70 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e05c      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ac:	4b11      	ldr	r3, [pc, #68]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x416>
 80028b8:	e054      	b.n	8002964 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ba:	4b10      	ldr	r3, [pc, #64]	@ (80028fc <HAL_RCC_OscConfig+0x478>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7ff fa56 	bl	8001d70 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c8:	f7ff fa52 	bl	8001d70 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e045      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028da:	4b06      	ldr	r3, [pc, #24]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x444>
 80028e6:	e03d      	b.n	8002964 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d107      	bne.n	8002900 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e038      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40007000 	.word	0x40007000
 80028fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002900:	4b1b      	ldr	r3, [pc, #108]	@ (8002970 <HAL_RCC_OscConfig+0x4ec>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d028      	beq.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d121      	bne.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002926:	429a      	cmp	r2, r3
 8002928:	d11a      	bne.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002930:	4013      	ands	r3, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002936:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002938:	4293      	cmp	r3, r2
 800293a:	d111      	bne.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002946:	085b      	lsrs	r3, r3, #1
 8002948:	3b01      	subs	r3, #1
 800294a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800294c:	429a      	cmp	r2, r3
 800294e:	d107      	bne.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800

08002974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0cc      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002988:	4b68      	ldr	r3, [pc, #416]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d90c      	bls.n	80029b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b65      	ldr	r3, [pc, #404]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299e:	4b63      	ldr	r3, [pc, #396]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0b8      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d020      	beq.n	80029fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c8:	4b59      	ldr	r3, [pc, #356]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a58      	ldr	r2, [pc, #352]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029e0:	4b53      	ldr	r3, [pc, #332]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4a52      	ldr	r2, [pc, #328]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ec:	4b50      	ldr	r3, [pc, #320]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	494d      	ldr	r1, [pc, #308]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d044      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d107      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	4b47      	ldr	r3, [pc, #284]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d119      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e07f      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d003      	beq.n	8002a32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a32:	4b3f      	ldr	r3, [pc, #252]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e06f      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a42:	4b3b      	ldr	r3, [pc, #236]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e067      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a52:	4b37      	ldr	r3, [pc, #220]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f023 0203 	bic.w	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4934      	ldr	r1, [pc, #208]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a64:	f7ff f984 	bl	8001d70 <HAL_GetTick>
 8002a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6a:	e00a      	b.n	8002a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6c:	f7ff f980 	bl	8001d70 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e04f      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a82:	4b2b      	ldr	r3, [pc, #172]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 020c 	and.w	r2, r3, #12
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d1eb      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a94:	4b25      	ldr	r3, [pc, #148]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d20c      	bcs.n	8002abc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa2:	4b22      	ldr	r3, [pc, #136]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aaa:	4b20      	ldr	r3, [pc, #128]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e032      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d008      	beq.n	8002ada <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac8:	4b19      	ldr	r3, [pc, #100]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4916      	ldr	r1, [pc, #88]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d009      	beq.n	8002afa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ae6:	4b12      	ldr	r3, [pc, #72]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	490e      	ldr	r1, [pc, #56]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002afa:	f000 f821 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8002afe:	4602      	mov	r2, r0
 8002b00:	4b0b      	ldr	r3, [pc, #44]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	490a      	ldr	r1, [pc, #40]	@ (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0c:	5ccb      	ldrb	r3, [r1, r3]
 8002b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b12:	4a09      	ldr	r2, [pc, #36]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b16:	4b09      	ldr	r3, [pc, #36]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff f8e4 	bl	8001ce8 <HAL_InitTick>

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023c00 	.word	0x40023c00
 8002b30:	40023800 	.word	0x40023800
 8002b34:	0800724c 	.word	0x0800724c
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	2000000c 	.word	0x2000000c

08002b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b44:	b094      	sub	sp, #80	@ 0x50
 8002b46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b58:	4b79      	ldr	r3, [pc, #484]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d00d      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0x40>
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	f200 80e1 	bhi.w	8002d2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <HAL_RCC_GetSysClockFreq+0x34>
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d003      	beq.n	8002b7a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b72:	e0db      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b74:	4b73      	ldr	r3, [pc, #460]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b78:	e0db      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b7a:	4b73      	ldr	r3, [pc, #460]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b7e:	e0d8      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b80:	4b6f      	ldr	r3, [pc, #444]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b88:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d063      	beq.n	8002c5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b96:	4b6a      	ldr	r3, [pc, #424]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	099b      	lsrs	r3, r3, #6
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ba0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ba8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002baa:	2300      	movs	r3, #0
 8002bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bb2:	4622      	mov	r2, r4
 8002bb4:	462b      	mov	r3, r5
 8002bb6:	f04f 0000 	mov.w	r0, #0
 8002bba:	f04f 0100 	mov.w	r1, #0
 8002bbe:	0159      	lsls	r1, r3, #5
 8002bc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bc4:	0150      	lsls	r0, r2, #5
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4621      	mov	r1, r4
 8002bcc:	1a51      	subs	r1, r2, r1
 8002bce:	6139      	str	r1, [r7, #16]
 8002bd0:	4629      	mov	r1, r5
 8002bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002be4:	4659      	mov	r1, fp
 8002be6:	018b      	lsls	r3, r1, #6
 8002be8:	4651      	mov	r1, sl
 8002bea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bee:	4651      	mov	r1, sl
 8002bf0:	018a      	lsls	r2, r1, #6
 8002bf2:	4651      	mov	r1, sl
 8002bf4:	ebb2 0801 	subs.w	r8, r2, r1
 8002bf8:	4659      	mov	r1, fp
 8002bfa:	eb63 0901 	sbc.w	r9, r3, r1
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c12:	4690      	mov	r8, r2
 8002c14:	4699      	mov	r9, r3
 8002c16:	4623      	mov	r3, r4
 8002c18:	eb18 0303 	adds.w	r3, r8, r3
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	462b      	mov	r3, r5
 8002c20:	eb49 0303 	adc.w	r3, r9, r3
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c32:	4629      	mov	r1, r5
 8002c34:	024b      	lsls	r3, r1, #9
 8002c36:	4621      	mov	r1, r4
 8002c38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c3c:	4621      	mov	r1, r4
 8002c3e:	024a      	lsls	r2, r1, #9
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c46:	2200      	movs	r2, #0
 8002c48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c50:	f7fd ffaa 	bl	8000ba8 <__aeabi_uldivmod>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4613      	mov	r3, r2
 8002c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c5c:	e058      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5e:	4b38      	ldr	r3, [pc, #224]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	099b      	lsrs	r3, r3, #6
 8002c64:	2200      	movs	r2, #0
 8002c66:	4618      	mov	r0, r3
 8002c68:	4611      	mov	r1, r2
 8002c6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c6e:	623b      	str	r3, [r7, #32]
 8002c70:	2300      	movs	r3, #0
 8002c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c78:	4642      	mov	r2, r8
 8002c7a:	464b      	mov	r3, r9
 8002c7c:	f04f 0000 	mov.w	r0, #0
 8002c80:	f04f 0100 	mov.w	r1, #0
 8002c84:	0159      	lsls	r1, r3, #5
 8002c86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c8a:	0150      	lsls	r0, r2, #5
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4641      	mov	r1, r8
 8002c92:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c96:	4649      	mov	r1, r9
 8002c98:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ca8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cb0:	ebb2 040a 	subs.w	r4, r2, sl
 8002cb4:	eb63 050b 	sbc.w	r5, r3, fp
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	00eb      	lsls	r3, r5, #3
 8002cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cc6:	00e2      	lsls	r2, r4, #3
 8002cc8:	4614      	mov	r4, r2
 8002cca:	461d      	mov	r5, r3
 8002ccc:	4643      	mov	r3, r8
 8002cce:	18e3      	adds	r3, r4, r3
 8002cd0:	603b      	str	r3, [r7, #0]
 8002cd2:	464b      	mov	r3, r9
 8002cd4:	eb45 0303 	adc.w	r3, r5, r3
 8002cd8:	607b      	str	r3, [r7, #4]
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ce6:	4629      	mov	r1, r5
 8002ce8:	028b      	lsls	r3, r1, #10
 8002cea:	4621      	mov	r1, r4
 8002cec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	028a      	lsls	r2, r1, #10
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
 8002cfe:	61fa      	str	r2, [r7, #28]
 8002d00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d04:	f7fd ff50 	bl	8000ba8 <__aeabi_uldivmod>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d10:	4b0b      	ldr	r3, [pc, #44]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	0c1b      	lsrs	r3, r3, #16
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d2a:	e002      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d2c:	4b05      	ldr	r3, [pc, #20]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3750      	adds	r7, #80	@ 0x50
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800
 8002d44:	00f42400 	.word	0x00f42400
 8002d48:	007a1200 	.word	0x007a1200

08002d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d50:	4b03      	ldr	r3, [pc, #12]	@ (8002d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000000 	.word	0x20000000

08002d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d68:	f7ff fff0 	bl	8002d4c <HAL_RCC_GetHCLKFreq>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	4b05      	ldr	r3, [pc, #20]	@ (8002d84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	0a9b      	lsrs	r3, r3, #10
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	4903      	ldr	r1, [pc, #12]	@ (8002d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d7a:	5ccb      	ldrb	r3, [r1, r3]
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40023800 	.word	0x40023800
 8002d88:	0800725c 	.word	0x0800725c

08002d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d90:	f7ff ffdc 	bl	8002d4c <HAL_RCC_GetHCLKFreq>
 8002d94:	4602      	mov	r2, r0
 8002d96:	4b05      	ldr	r3, [pc, #20]	@ (8002dac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	0b5b      	lsrs	r3, r3, #13
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	4903      	ldr	r1, [pc, #12]	@ (8002db0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002da2:	5ccb      	ldrb	r3, [r1, r3]
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40023800 	.word	0x40023800
 8002db0:	0800725c 	.word	0x0800725c

08002db4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e07b      	b.n	8002ebe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d108      	bne.n	8002de0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dd6:	d009      	beq.n	8002dec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	61da      	str	r2, [r3, #28]
 8002dde:	e005      	b.n	8002dec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fe fb56 	bl	80014b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e70:	ea42 0103 	orr.w	r1, r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e78:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	f003 0104 	and.w	r1, r3, #4
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	f003 0210 	and.w	r2, r3, #16
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69da      	ldr	r2, [r3, #28]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e041      	b.n	8002f5c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d106      	bne.n	8002ef2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7fe fb2b 	bl	8001548 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3304      	adds	r3, #4
 8002f02:	4619      	mov	r1, r3
 8002f04:	4610      	mov	r0, r2
 8002f06:	f000 f9b5 	bl	8003274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d001      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e04e      	b.n	800301a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a23      	ldr	r2, [pc, #140]	@ (8003028 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d022      	beq.n	8002fe4 <HAL_TIM_Base_Start_IT+0x80>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fa6:	d01d      	beq.n	8002fe4 <HAL_TIM_Base_Start_IT+0x80>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1f      	ldr	r2, [pc, #124]	@ (800302c <HAL_TIM_Base_Start_IT+0xc8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d018      	beq.n	8002fe4 <HAL_TIM_Base_Start_IT+0x80>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003030 <HAL_TIM_Base_Start_IT+0xcc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d013      	beq.n	8002fe4 <HAL_TIM_Base_Start_IT+0x80>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8003034 <HAL_TIM_Base_Start_IT+0xd0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00e      	beq.n	8002fe4 <HAL_TIM_Base_Start_IT+0x80>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a1b      	ldr	r2, [pc, #108]	@ (8003038 <HAL_TIM_Base_Start_IT+0xd4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d009      	beq.n	8002fe4 <HAL_TIM_Base_Start_IT+0x80>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a19      	ldr	r2, [pc, #100]	@ (800303c <HAL_TIM_Base_Start_IT+0xd8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d004      	beq.n	8002fe4 <HAL_TIM_Base_Start_IT+0x80>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a18      	ldr	r2, [pc, #96]	@ (8003040 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d111      	bne.n	8003008 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b06      	cmp	r3, #6
 8002ff4:	d010      	beq.n	8003018 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0201 	orr.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003006:	e007      	b.n	8003018 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40010000 	.word	0x40010000
 800302c:	40000400 	.word	0x40000400
 8003030:	40000800 	.word	0x40000800
 8003034:	40000c00 	.word	0x40000c00
 8003038:	40010400 	.word	0x40010400
 800303c:	40014000 	.word	0x40014000
 8003040:	40001800 	.word	0x40001800

08003044 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d020      	beq.n	80030a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d01b      	beq.n	80030a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f06f 0202 	mvn.w	r2, #2
 8003078:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f8d2 	bl	8003238 <HAL_TIM_IC_CaptureCallback>
 8003094:	e005      	b.n	80030a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f8c4 	bl	8003224 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f8d5 	bl	800324c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d020      	beq.n	80030f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d01b      	beq.n	80030f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f06f 0204 	mvn.w	r2, #4
 80030c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2202      	movs	r2, #2
 80030ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f8ac 	bl	8003238 <HAL_TIM_IC_CaptureCallback>
 80030e0:	e005      	b.n	80030ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f89e 	bl	8003224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f8af 	bl	800324c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d020      	beq.n	8003140 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b00      	cmp	r3, #0
 8003106:	d01b      	beq.n	8003140 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0208 	mvn.w	r2, #8
 8003110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2204      	movs	r2, #4
 8003116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f886 	bl	8003238 <HAL_TIM_IC_CaptureCallback>
 800312c:	e005      	b.n	800313a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f878 	bl	8003224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f889 	bl	800324c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	2b00      	cmp	r3, #0
 8003148:	d020      	beq.n	800318c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b00      	cmp	r3, #0
 8003152:	d01b      	beq.n	800318c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0210 	mvn.w	r2, #16
 800315c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2208      	movs	r2, #8
 8003162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f860 	bl	8003238 <HAL_TIM_IC_CaptureCallback>
 8003178:	e005      	b.n	8003186 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f852 	bl	8003224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f863 	bl	800324c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00c      	beq.n	80031b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d007      	beq.n	80031b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0201 	mvn.w	r2, #1
 80031a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7fe fd12 	bl	8001bd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00c      	beq.n	80031d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d007      	beq.n	80031d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80031cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f982 	bl	80034d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00c      	beq.n	80031f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d007      	beq.n	80031f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f834 	bl	8003260 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00c      	beq.n	800321c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f003 0320 	and.w	r3, r3, #32
 8003208:	2b00      	cmp	r3, #0
 800320a:	d007      	beq.n	800321c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0220 	mvn.w	r2, #32
 8003214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f954 	bl	80034c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a46      	ldr	r2, [pc, #280]	@ (80033a0 <TIM_Base_SetConfig+0x12c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d013      	beq.n	80032b4 <TIM_Base_SetConfig+0x40>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003292:	d00f      	beq.n	80032b4 <TIM_Base_SetConfig+0x40>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a43      	ldr	r2, [pc, #268]	@ (80033a4 <TIM_Base_SetConfig+0x130>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00b      	beq.n	80032b4 <TIM_Base_SetConfig+0x40>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a42      	ldr	r2, [pc, #264]	@ (80033a8 <TIM_Base_SetConfig+0x134>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d007      	beq.n	80032b4 <TIM_Base_SetConfig+0x40>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a41      	ldr	r2, [pc, #260]	@ (80033ac <TIM_Base_SetConfig+0x138>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d003      	beq.n	80032b4 <TIM_Base_SetConfig+0x40>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a40      	ldr	r2, [pc, #256]	@ (80033b0 <TIM_Base_SetConfig+0x13c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d108      	bne.n	80032c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a35      	ldr	r2, [pc, #212]	@ (80033a0 <TIM_Base_SetConfig+0x12c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d02b      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032d4:	d027      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a32      	ldr	r2, [pc, #200]	@ (80033a4 <TIM_Base_SetConfig+0x130>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d023      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a31      	ldr	r2, [pc, #196]	@ (80033a8 <TIM_Base_SetConfig+0x134>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01f      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a30      	ldr	r2, [pc, #192]	@ (80033ac <TIM_Base_SetConfig+0x138>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d01b      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a2f      	ldr	r2, [pc, #188]	@ (80033b0 <TIM_Base_SetConfig+0x13c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d017      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a2e      	ldr	r2, [pc, #184]	@ (80033b4 <TIM_Base_SetConfig+0x140>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d013      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a2d      	ldr	r2, [pc, #180]	@ (80033b8 <TIM_Base_SetConfig+0x144>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00f      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a2c      	ldr	r2, [pc, #176]	@ (80033bc <TIM_Base_SetConfig+0x148>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00b      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a2b      	ldr	r2, [pc, #172]	@ (80033c0 <TIM_Base_SetConfig+0x14c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d007      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a2a      	ldr	r2, [pc, #168]	@ (80033c4 <TIM_Base_SetConfig+0x150>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d003      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a29      	ldr	r2, [pc, #164]	@ (80033c8 <TIM_Base_SetConfig+0x154>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d108      	bne.n	8003338 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800332c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4313      	orrs	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a10      	ldr	r2, [pc, #64]	@ (80033a0 <TIM_Base_SetConfig+0x12c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d003      	beq.n	800336c <TIM_Base_SetConfig+0xf8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a12      	ldr	r2, [pc, #72]	@ (80033b0 <TIM_Base_SetConfig+0x13c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d103      	bne.n	8003374 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b01      	cmp	r3, #1
 8003384:	d105      	bne.n	8003392 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f023 0201 	bic.w	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	611a      	str	r2, [r3, #16]
  }
}
 8003392:	bf00      	nop
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40010000 	.word	0x40010000
 80033a4:	40000400 	.word	0x40000400
 80033a8:	40000800 	.word	0x40000800
 80033ac:	40000c00 	.word	0x40000c00
 80033b0:	40010400 	.word	0x40010400
 80033b4:	40014000 	.word	0x40014000
 80033b8:	40014400 	.word	0x40014400
 80033bc:	40014800 	.word	0x40014800
 80033c0:	40001800 	.word	0x40001800
 80033c4:	40001c00 	.word	0x40001c00
 80033c8:	40002000 	.word	0x40002000

080033cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e05a      	b.n	800349a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800340a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a21      	ldr	r2, [pc, #132]	@ (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d022      	beq.n	800346e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003430:	d01d      	beq.n	800346e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a1d      	ldr	r2, [pc, #116]	@ (80034ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d018      	beq.n	800346e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1b      	ldr	r2, [pc, #108]	@ (80034b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d013      	beq.n	800346e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a1a      	ldr	r2, [pc, #104]	@ (80034b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d00e      	beq.n	800346e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a18      	ldr	r2, [pc, #96]	@ (80034b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d009      	beq.n	800346e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a17      	ldr	r2, [pc, #92]	@ (80034bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d004      	beq.n	800346e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a15      	ldr	r2, [pc, #84]	@ (80034c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d10c      	bne.n	8003488 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003474:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	4313      	orrs	r3, r2
 800347e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40010000 	.word	0x40010000
 80034ac:	40000400 	.word	0x40000400
 80034b0:	40000800 	.word	0x40000800
 80034b4:	40000c00 	.word	0x40000c00
 80034b8:	40010400 	.word	0x40010400
 80034bc:	40014000 	.word	0x40014000
 80034c0:	40001800 	.word	0x40001800

080034c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e042      	b.n	8003584 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fe f840 	bl	8001598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2224      	movs	r2, #36	@ 0x24
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800352e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fdbd 	bl	80040b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003544:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003554:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003564:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	@ 0x28
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b20      	cmp	r3, #32
 80035aa:	d175      	bne.n	8003698 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_UART_Transmit+0x2c>
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e06e      	b.n	800369a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2221      	movs	r2, #33	@ 0x21
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ca:	f7fe fbd1 	bl	8001d70 <HAL_GetTick>
 80035ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	88fa      	ldrh	r2, [r7, #6]
 80035d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	88fa      	ldrh	r2, [r7, #6]
 80035da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035e4:	d108      	bne.n	80035f8 <HAL_UART_Transmit+0x6c>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d104      	bne.n	80035f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	61bb      	str	r3, [r7, #24]
 80035f6:	e003      	b.n	8003600 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003600:	e02e      	b.n	8003660 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2200      	movs	r2, #0
 800360a:	2180      	movs	r1, #128	@ 0x80
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 fb1f 	bl	8003c50 <UART_WaitOnFlagUntilTimeout>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e03a      	b.n	800369a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10b      	bne.n	8003642 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003638:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	3302      	adds	r3, #2
 800363e:	61bb      	str	r3, [r7, #24]
 8003640:	e007      	b.n	8003652 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	781a      	ldrb	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	3301      	adds	r3, #1
 8003650:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003656:	b29b      	uxth	r3, r3
 8003658:	3b01      	subs	r3, #1
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1cb      	bne.n	8003602 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2200      	movs	r2, #0
 8003672:	2140      	movs	r1, #64	@ 0x40
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 faeb 	bl	8003c50 <UART_WaitOnFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e006      	b.n	800369a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	e000      	b.n	800369a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003698:	2302      	movs	r3, #2
  }
}
 800369a:	4618      	mov	r0, r3
 800369c:	3720      	adds	r7, #32
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	4613      	mov	r3, r2
 80036ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d112      	bne.n	80036e2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <HAL_UART_Receive_IT+0x26>
 80036c2:	88fb      	ldrh	r3, [r7, #6]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e00b      	b.n	80036e4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	461a      	mov	r2, r3
 80036d6:	68b9      	ldr	r1, [r7, #8]
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 fb12 	bl	8003d02 <UART_Start_Receive_IT>
 80036de:	4603      	mov	r3, r0
 80036e0:	e000      	b.n	80036e4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80036e2:	2302      	movs	r3, #2
  }
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b0ba      	sub	sp, #232	@ 0xe8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003712:	2300      	movs	r3, #0
 8003714:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003718:	2300      	movs	r3, #0
 800371a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800371e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800372a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10f      	bne.n	8003752 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d009      	beq.n	8003752 <HAL_UART_IRQHandler+0x66>
 800373e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fbf2 	bl	8003f34 <UART_Receive_IT>
      return;
 8003750:	e25b      	b.n	8003c0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003752:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 80de 	beq.w	8003918 <HAL_UART_IRQHandler+0x22c>
 800375c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d106      	bne.n	8003776 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800376c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80d1 	beq.w	8003918 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00b      	beq.n	800379a <HAL_UART_IRQHandler+0xae>
 8003782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003792:	f043 0201 	orr.w	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800379a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00b      	beq.n	80037be <HAL_UART_IRQHandler+0xd2>
 80037a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b6:	f043 0202 	orr.w	r2, r3, #2
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00b      	beq.n	80037e2 <HAL_UART_IRQHandler+0xf6>
 80037ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d005      	beq.n	80037e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037da:	f043 0204 	orr.w	r2, r3, #4
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d011      	beq.n	8003812 <HAL_UART_IRQHandler+0x126>
 80037ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d105      	bne.n	8003806 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380a:	f043 0208 	orr.w	r2, r3, #8
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 81f2 	beq.w	8003c00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800381c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_UART_IRQHandler+0x14e>
 8003828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fb7d 	bl	8003f34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003844:	2b40      	cmp	r3, #64	@ 0x40
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d103      	bne.n	8003866 <HAL_UART_IRQHandler+0x17a>
 800385e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003862:	2b00      	cmp	r3, #0
 8003864:	d04f      	beq.n	8003906 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fa85 	bl	8003d76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003876:	2b40      	cmp	r3, #64	@ 0x40
 8003878:	d141      	bne.n	80038fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3314      	adds	r3, #20
 8003880:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003884:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003888:	e853 3f00 	ldrex	r3, [r3]
 800388c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003890:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003894:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003898:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3314      	adds	r3, #20
 80038a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80038aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038b6:	e841 2300 	strex	r3, r2, [r1]
 80038ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1d9      	bne.n	800387a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d013      	beq.n	80038f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d2:	4a7e      	ldr	r2, [pc, #504]	@ (8003acc <HAL_UART_IRQHandler+0x3e0>)
 80038d4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe fbf9 	bl	80020d2 <HAL_DMA_Abort_IT>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d016      	beq.n	8003914 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038f0:	4610      	mov	r0, r2
 80038f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f4:	e00e      	b.n	8003914 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f994 	bl	8003c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fc:	e00a      	b.n	8003914 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f990 	bl	8003c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003904:	e006      	b.n	8003914 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f98c 	bl	8003c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003912:	e175      	b.n	8003c00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003914:	bf00      	nop
    return;
 8003916:	e173      	b.n	8003c00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391c:	2b01      	cmp	r3, #1
 800391e:	f040 814f 	bne.w	8003bc0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 8148 	beq.w	8003bc0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8141 	beq.w	8003bc0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800393e:	2300      	movs	r3, #0
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800395e:	2b40      	cmp	r3, #64	@ 0x40
 8003960:	f040 80b6 	bne.w	8003ad0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003970:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 8145 	beq.w	8003c04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800397e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003982:	429a      	cmp	r2, r3
 8003984:	f080 813e 	bcs.w	8003c04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800398e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800399a:	f000 8088 	beq.w	8003aae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	330c      	adds	r3, #12
 80039a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	330c      	adds	r3, #12
 80039c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80039ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1d9      	bne.n	800399e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3314      	adds	r3, #20
 80039f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3314      	adds	r3, #20
 8003a0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a1a:	e841 2300 	strex	r3, r2, [r1]
 8003a1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1e1      	bne.n	80039ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3314      	adds	r3, #20
 8003a2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a30:	e853 3f00 	ldrex	r3, [r3]
 8003a34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3314      	adds	r3, #20
 8003a46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e3      	bne.n	8003a26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	330c      	adds	r3, #12
 8003a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a76:	e853 3f00 	ldrex	r3, [r3]
 8003a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a7e:	f023 0310 	bic.w	r3, r3, #16
 8003a82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	330c      	adds	r3, #12
 8003a8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a90:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a92:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a98:	e841 2300 	strex	r3, r2, [r1]
 8003a9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1e3      	bne.n	8003a6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fe faa2 	bl	8001ff2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f8b7 	bl	8003c38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003aca:	e09b      	b.n	8003c04 <HAL_UART_IRQHandler+0x518>
 8003acc:	08003e3d 	.word	0x08003e3d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 808e 	beq.w	8003c08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003aec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 8089 	beq.w	8003c08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	330c      	adds	r3, #12
 8003afc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	330c      	adds	r3, #12
 8003b16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e3      	bne.n	8003af6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3314      	adds	r3, #20
 8003b34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	f023 0301 	bic.w	r3, r3, #1
 8003b44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3314      	adds	r3, #20
 8003b4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b52:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e3      	bne.n	8003b2e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	330c      	adds	r3, #12
 8003b7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	e853 3f00 	ldrex	r3, [r3]
 8003b82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0310 	bic.w	r3, r3, #16
 8003b8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	330c      	adds	r3, #12
 8003b94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b98:	61fa      	str	r2, [r7, #28]
 8003b9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9c:	69b9      	ldr	r1, [r7, #24]
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	e841 2300 	strex	r3, r2, [r1]
 8003ba4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1e3      	bne.n	8003b74 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f83d 	bl	8003c38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bbe:	e023      	b.n	8003c08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d009      	beq.n	8003be0 <HAL_UART_IRQHandler+0x4f4>
 8003bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f943 	bl	8003e64 <UART_Transmit_IT>
    return;
 8003bde:	e014      	b.n	8003c0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00e      	beq.n	8003c0a <HAL_UART_IRQHandler+0x51e>
 8003bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f983 	bl	8003f04 <UART_EndTransmit_IT>
    return;
 8003bfe:	e004      	b.n	8003c0a <HAL_UART_IRQHandler+0x51e>
    return;
 8003c00:	bf00      	nop
 8003c02:	e002      	b.n	8003c0a <HAL_UART_IRQHandler+0x51e>
      return;
 8003c04:	bf00      	nop
 8003c06:	e000      	b.n	8003c0a <HAL_UART_IRQHandler+0x51e>
      return;
 8003c08:	bf00      	nop
  }
}
 8003c0a:	37e8      	adds	r7, #232	@ 0xe8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c60:	e03b      	b.n	8003cda <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c68:	d037      	beq.n	8003cda <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6a:	f7fe f881 	bl	8001d70 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	6a3a      	ldr	r2, [r7, #32]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d302      	bcc.n	8003c80 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e03a      	b.n	8003cfa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d023      	beq.n	8003cda <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b80      	cmp	r3, #128	@ 0x80
 8003c96:	d020      	beq.n	8003cda <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b40      	cmp	r3, #64	@ 0x40
 8003c9c:	d01d      	beq.n	8003cda <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d116      	bne.n	8003cda <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f857 	bl	8003d76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2208      	movs	r2, #8
 8003ccc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e00f      	b.n	8003cfa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	bf0c      	ite	eq
 8003cea:	2301      	moveq	r3, #1
 8003cec:	2300      	movne	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d0b4      	beq.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b085      	sub	sp, #20
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	88fa      	ldrh	r2, [r7, #6]
 8003d1a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	88fa      	ldrh	r2, [r7, #6]
 8003d20:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2222      	movs	r2, #34	@ 0x22
 8003d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d007      	beq.n	8003d48 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d46:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695a      	ldr	r2, [r3, #20]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0220 	orr.w	r2, r2, #32
 8003d66:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b095      	sub	sp, #84	@ 0x54
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	330c      	adds	r3, #12
 8003d84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d88:	e853 3f00 	ldrex	r3, [r3]
 8003d8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	330c      	adds	r3, #12
 8003d9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d9e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003da4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003da6:	e841 2300 	strex	r3, r2, [r1]
 8003daa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1e5      	bne.n	8003d7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3314      	adds	r3, #20
 8003db8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	e853 3f00 	ldrex	r3, [r3]
 8003dc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3314      	adds	r3, #20
 8003dd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1e5      	bne.n	8003db2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d119      	bne.n	8003e22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	330c      	adds	r3, #12
 8003df4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	e853 3f00 	ldrex	r3, [r3]
 8003dfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f023 0310 	bic.w	r3, r3, #16
 8003e04:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	330c      	adds	r3, #12
 8003e0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e0e:	61ba      	str	r2, [r7, #24]
 8003e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	6979      	ldr	r1, [r7, #20]
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e5      	bne.n	8003dee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e30:	bf00      	nop
 8003e32:	3754      	adds	r7, #84	@ 0x54
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f7ff fee4 	bl	8003c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e5c:	bf00      	nop
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b21      	cmp	r3, #33	@ 0x21
 8003e76:	d13e      	bne.n	8003ef6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e80:	d114      	bne.n	8003eac <UART_Transmit_IT+0x48>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d110      	bne.n	8003eac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e9e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	1c9a      	adds	r2, r3, #2
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	621a      	str	r2, [r3, #32]
 8003eaa:	e008      	b.n	8003ebe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	1c59      	adds	r1, r3, #1
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6211      	str	r1, [r2, #32]
 8003eb6:	781a      	ldrb	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	4619      	mov	r1, r3
 8003ecc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10f      	bne.n	8003ef2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ee0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ef0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	e000      	b.n	8003ef8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ef6:	2302      	movs	r3, #2
  }
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff fe73 	bl	8003c10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08c      	sub	sp, #48	@ 0x30
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b22      	cmp	r3, #34	@ 0x22
 8003f46:	f040 80ae 	bne.w	80040a6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f52:	d117      	bne.n	8003f84 <UART_Receive_IT+0x50>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d113      	bne.n	8003f84 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f64:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7c:	1c9a      	adds	r2, r3, #2
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f82:	e026      	b.n	8003fd2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f96:	d007      	beq.n	8003fa8 <UART_Receive_IT+0x74>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <UART_Receive_IT+0x82>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d106      	bne.n	8003fb6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb2:	701a      	strb	r2, [r3, #0]
 8003fb4:	e008      	b.n	8003fc8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	4619      	mov	r1, r3
 8003fe0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d15d      	bne.n	80040a2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0220 	bic.w	r2, r2, #32
 8003ff4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004004:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695a      	ldr	r2, [r3, #20]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0201 	bic.w	r2, r2, #1
 8004014:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004028:	2b01      	cmp	r3, #1
 800402a:	d135      	bne.n	8004098 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	330c      	adds	r3, #12
 8004038:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	e853 3f00 	ldrex	r3, [r3]
 8004040:	613b      	str	r3, [r7, #16]
   return(result);
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f023 0310 	bic.w	r3, r3, #16
 8004048:	627b      	str	r3, [r7, #36]	@ 0x24
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004052:	623a      	str	r2, [r7, #32]
 8004054:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004056:	69f9      	ldr	r1, [r7, #28]
 8004058:	6a3a      	ldr	r2, [r7, #32]
 800405a:	e841 2300 	strex	r3, r2, [r1]
 800405e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1e5      	bne.n	8004032 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0310 	and.w	r3, r3, #16
 8004070:	2b10      	cmp	r3, #16
 8004072:	d10a      	bne.n	800408a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800408e:	4619      	mov	r1, r3
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff fdd1 	bl	8003c38 <HAL_UARTEx_RxEventCallback>
 8004096:	e002      	b.n	800409e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7fd fd89 	bl	8001bb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	e002      	b.n	80040a8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	e000      	b.n	80040a8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80040a6:	2302      	movs	r3, #2
  }
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3730      	adds	r7, #48	@ 0x30
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040b4:	b0c0      	sub	sp, #256	@ 0x100
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040cc:	68d9      	ldr	r1, [r3, #12]
 80040ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	ea40 0301 	orr.w	r3, r0, r1
 80040d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004108:	f021 010c 	bic.w	r1, r1, #12
 800410c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004116:	430b      	orrs	r3, r1
 8004118:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800411a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412a:	6999      	ldr	r1, [r3, #24]
 800412c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	ea40 0301 	orr.w	r3, r0, r1
 8004136:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	4b8f      	ldr	r3, [pc, #572]	@ (800437c <UART_SetConfig+0x2cc>)
 8004140:	429a      	cmp	r2, r3
 8004142:	d005      	beq.n	8004150 <UART_SetConfig+0xa0>
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	4b8d      	ldr	r3, [pc, #564]	@ (8004380 <UART_SetConfig+0x2d0>)
 800414c:	429a      	cmp	r2, r3
 800414e:	d104      	bne.n	800415a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004150:	f7fe fe1c 	bl	8002d8c <HAL_RCC_GetPCLK2Freq>
 8004154:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004158:	e003      	b.n	8004162 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800415a:	f7fe fe03 	bl	8002d64 <HAL_RCC_GetPCLK1Freq>
 800415e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800416c:	f040 810c 	bne.w	8004388 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004174:	2200      	movs	r2, #0
 8004176:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800417a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800417e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004182:	4622      	mov	r2, r4
 8004184:	462b      	mov	r3, r5
 8004186:	1891      	adds	r1, r2, r2
 8004188:	65b9      	str	r1, [r7, #88]	@ 0x58
 800418a:	415b      	adcs	r3, r3
 800418c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800418e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004192:	4621      	mov	r1, r4
 8004194:	eb12 0801 	adds.w	r8, r2, r1
 8004198:	4629      	mov	r1, r5
 800419a:	eb43 0901 	adc.w	r9, r3, r1
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041b2:	4690      	mov	r8, r2
 80041b4:	4699      	mov	r9, r3
 80041b6:	4623      	mov	r3, r4
 80041b8:	eb18 0303 	adds.w	r3, r8, r3
 80041bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041c0:	462b      	mov	r3, r5
 80041c2:	eb49 0303 	adc.w	r3, r9, r3
 80041c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80041da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041de:	460b      	mov	r3, r1
 80041e0:	18db      	adds	r3, r3, r3
 80041e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80041e4:	4613      	mov	r3, r2
 80041e6:	eb42 0303 	adc.w	r3, r2, r3
 80041ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80041ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041f4:	f7fc fcd8 	bl	8000ba8 <__aeabi_uldivmod>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4b61      	ldr	r3, [pc, #388]	@ (8004384 <UART_SetConfig+0x2d4>)
 80041fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	011c      	lsls	r4, r3, #4
 8004206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800420a:	2200      	movs	r2, #0
 800420c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004210:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004214:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004218:	4642      	mov	r2, r8
 800421a:	464b      	mov	r3, r9
 800421c:	1891      	adds	r1, r2, r2
 800421e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004220:	415b      	adcs	r3, r3
 8004222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004224:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004228:	4641      	mov	r1, r8
 800422a:	eb12 0a01 	adds.w	sl, r2, r1
 800422e:	4649      	mov	r1, r9
 8004230:	eb43 0b01 	adc.w	fp, r3, r1
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004240:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004244:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004248:	4692      	mov	sl, r2
 800424a:	469b      	mov	fp, r3
 800424c:	4643      	mov	r3, r8
 800424e:	eb1a 0303 	adds.w	r3, sl, r3
 8004252:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004256:	464b      	mov	r3, r9
 8004258:	eb4b 0303 	adc.w	r3, fp, r3
 800425c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800426c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004270:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004274:	460b      	mov	r3, r1
 8004276:	18db      	adds	r3, r3, r3
 8004278:	643b      	str	r3, [r7, #64]	@ 0x40
 800427a:	4613      	mov	r3, r2
 800427c:	eb42 0303 	adc.w	r3, r2, r3
 8004280:	647b      	str	r3, [r7, #68]	@ 0x44
 8004282:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004286:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800428a:	f7fc fc8d 	bl	8000ba8 <__aeabi_uldivmod>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	4611      	mov	r1, r2
 8004294:	4b3b      	ldr	r3, [pc, #236]	@ (8004384 <UART_SetConfig+0x2d4>)
 8004296:	fba3 2301 	umull	r2, r3, r3, r1
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	2264      	movs	r2, #100	@ 0x64
 800429e:	fb02 f303 	mul.w	r3, r2, r3
 80042a2:	1acb      	subs	r3, r1, r3
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80042aa:	4b36      	ldr	r3, [pc, #216]	@ (8004384 <UART_SetConfig+0x2d4>)
 80042ac:	fba3 2302 	umull	r2, r3, r3, r2
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80042b8:	441c      	add	r4, r3
 80042ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042be:	2200      	movs	r2, #0
 80042c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80042c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80042cc:	4642      	mov	r2, r8
 80042ce:	464b      	mov	r3, r9
 80042d0:	1891      	adds	r1, r2, r2
 80042d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042d4:	415b      	adcs	r3, r3
 80042d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80042dc:	4641      	mov	r1, r8
 80042de:	1851      	adds	r1, r2, r1
 80042e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80042e2:	4649      	mov	r1, r9
 80042e4:	414b      	adcs	r3, r1
 80042e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80042f4:	4659      	mov	r1, fp
 80042f6:	00cb      	lsls	r3, r1, #3
 80042f8:	4651      	mov	r1, sl
 80042fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042fe:	4651      	mov	r1, sl
 8004300:	00ca      	lsls	r2, r1, #3
 8004302:	4610      	mov	r0, r2
 8004304:	4619      	mov	r1, r3
 8004306:	4603      	mov	r3, r0
 8004308:	4642      	mov	r2, r8
 800430a:	189b      	adds	r3, r3, r2
 800430c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004310:	464b      	mov	r3, r9
 8004312:	460a      	mov	r2, r1
 8004314:	eb42 0303 	adc.w	r3, r2, r3
 8004318:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004328:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800432c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004330:	460b      	mov	r3, r1
 8004332:	18db      	adds	r3, r3, r3
 8004334:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004336:	4613      	mov	r3, r2
 8004338:	eb42 0303 	adc.w	r3, r2, r3
 800433c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800433e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004342:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004346:	f7fc fc2f 	bl	8000ba8 <__aeabi_uldivmod>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4b0d      	ldr	r3, [pc, #52]	@ (8004384 <UART_SetConfig+0x2d4>)
 8004350:	fba3 1302 	umull	r1, r3, r3, r2
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	2164      	movs	r1, #100	@ 0x64
 8004358:	fb01 f303 	mul.w	r3, r1, r3
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	3332      	adds	r3, #50	@ 0x32
 8004362:	4a08      	ldr	r2, [pc, #32]	@ (8004384 <UART_SetConfig+0x2d4>)
 8004364:	fba2 2303 	umull	r2, r3, r2, r3
 8004368:	095b      	lsrs	r3, r3, #5
 800436a:	f003 0207 	and.w	r2, r3, #7
 800436e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4422      	add	r2, r4
 8004376:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004378:	e106      	b.n	8004588 <UART_SetConfig+0x4d8>
 800437a:	bf00      	nop
 800437c:	40011000 	.word	0x40011000
 8004380:	40011400 	.word	0x40011400
 8004384:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800438c:	2200      	movs	r2, #0
 800438e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004392:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004396:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800439a:	4642      	mov	r2, r8
 800439c:	464b      	mov	r3, r9
 800439e:	1891      	adds	r1, r2, r2
 80043a0:	6239      	str	r1, [r7, #32]
 80043a2:	415b      	adcs	r3, r3
 80043a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80043a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043aa:	4641      	mov	r1, r8
 80043ac:	1854      	adds	r4, r2, r1
 80043ae:	4649      	mov	r1, r9
 80043b0:	eb43 0501 	adc.w	r5, r3, r1
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	00eb      	lsls	r3, r5, #3
 80043be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043c2:	00e2      	lsls	r2, r4, #3
 80043c4:	4614      	mov	r4, r2
 80043c6:	461d      	mov	r5, r3
 80043c8:	4643      	mov	r3, r8
 80043ca:	18e3      	adds	r3, r4, r3
 80043cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043d0:	464b      	mov	r3, r9
 80043d2:	eb45 0303 	adc.w	r3, r5, r3
 80043d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80043da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043f6:	4629      	mov	r1, r5
 80043f8:	008b      	lsls	r3, r1, #2
 80043fa:	4621      	mov	r1, r4
 80043fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004400:	4621      	mov	r1, r4
 8004402:	008a      	lsls	r2, r1, #2
 8004404:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004408:	f7fc fbce 	bl	8000ba8 <__aeabi_uldivmod>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4b60      	ldr	r3, [pc, #384]	@ (8004594 <UART_SetConfig+0x4e4>)
 8004412:	fba3 2302 	umull	r2, r3, r3, r2
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	011c      	lsls	r4, r3, #4
 800441a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800441e:	2200      	movs	r2, #0
 8004420:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004424:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004428:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800442c:	4642      	mov	r2, r8
 800442e:	464b      	mov	r3, r9
 8004430:	1891      	adds	r1, r2, r2
 8004432:	61b9      	str	r1, [r7, #24]
 8004434:	415b      	adcs	r3, r3
 8004436:	61fb      	str	r3, [r7, #28]
 8004438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800443c:	4641      	mov	r1, r8
 800443e:	1851      	adds	r1, r2, r1
 8004440:	6139      	str	r1, [r7, #16]
 8004442:	4649      	mov	r1, r9
 8004444:	414b      	adcs	r3, r1
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004454:	4659      	mov	r1, fp
 8004456:	00cb      	lsls	r3, r1, #3
 8004458:	4651      	mov	r1, sl
 800445a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800445e:	4651      	mov	r1, sl
 8004460:	00ca      	lsls	r2, r1, #3
 8004462:	4610      	mov	r0, r2
 8004464:	4619      	mov	r1, r3
 8004466:	4603      	mov	r3, r0
 8004468:	4642      	mov	r2, r8
 800446a:	189b      	adds	r3, r3, r2
 800446c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004470:	464b      	mov	r3, r9
 8004472:	460a      	mov	r2, r1
 8004474:	eb42 0303 	adc.w	r3, r2, r3
 8004478:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800447c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004486:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004494:	4649      	mov	r1, r9
 8004496:	008b      	lsls	r3, r1, #2
 8004498:	4641      	mov	r1, r8
 800449a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800449e:	4641      	mov	r1, r8
 80044a0:	008a      	lsls	r2, r1, #2
 80044a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80044a6:	f7fc fb7f 	bl	8000ba8 <__aeabi_uldivmod>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	4611      	mov	r1, r2
 80044b0:	4b38      	ldr	r3, [pc, #224]	@ (8004594 <UART_SetConfig+0x4e4>)
 80044b2:	fba3 2301 	umull	r2, r3, r3, r1
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	2264      	movs	r2, #100	@ 0x64
 80044ba:	fb02 f303 	mul.w	r3, r2, r3
 80044be:	1acb      	subs	r3, r1, r3
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	3332      	adds	r3, #50	@ 0x32
 80044c4:	4a33      	ldr	r2, [pc, #204]	@ (8004594 <UART_SetConfig+0x4e4>)
 80044c6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044d0:	441c      	add	r4, r3
 80044d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044d6:	2200      	movs	r2, #0
 80044d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80044da:	677a      	str	r2, [r7, #116]	@ 0x74
 80044dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80044e0:	4642      	mov	r2, r8
 80044e2:	464b      	mov	r3, r9
 80044e4:	1891      	adds	r1, r2, r2
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	415b      	adcs	r3, r3
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044f0:	4641      	mov	r1, r8
 80044f2:	1851      	adds	r1, r2, r1
 80044f4:	6039      	str	r1, [r7, #0]
 80044f6:	4649      	mov	r1, r9
 80044f8:	414b      	adcs	r3, r1
 80044fa:	607b      	str	r3, [r7, #4]
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004508:	4659      	mov	r1, fp
 800450a:	00cb      	lsls	r3, r1, #3
 800450c:	4651      	mov	r1, sl
 800450e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004512:	4651      	mov	r1, sl
 8004514:	00ca      	lsls	r2, r1, #3
 8004516:	4610      	mov	r0, r2
 8004518:	4619      	mov	r1, r3
 800451a:	4603      	mov	r3, r0
 800451c:	4642      	mov	r2, r8
 800451e:	189b      	adds	r3, r3, r2
 8004520:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004522:	464b      	mov	r3, r9
 8004524:	460a      	mov	r2, r1
 8004526:	eb42 0303 	adc.w	r3, r2, r3
 800452a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	663b      	str	r3, [r7, #96]	@ 0x60
 8004536:	667a      	str	r2, [r7, #100]	@ 0x64
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004544:	4649      	mov	r1, r9
 8004546:	008b      	lsls	r3, r1, #2
 8004548:	4641      	mov	r1, r8
 800454a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800454e:	4641      	mov	r1, r8
 8004550:	008a      	lsls	r2, r1, #2
 8004552:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004556:	f7fc fb27 	bl	8000ba8 <__aeabi_uldivmod>
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	4b0d      	ldr	r3, [pc, #52]	@ (8004594 <UART_SetConfig+0x4e4>)
 8004560:	fba3 1302 	umull	r1, r3, r3, r2
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	2164      	movs	r1, #100	@ 0x64
 8004568:	fb01 f303 	mul.w	r3, r1, r3
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	3332      	adds	r3, #50	@ 0x32
 8004572:	4a08      	ldr	r2, [pc, #32]	@ (8004594 <UART_SetConfig+0x4e4>)
 8004574:	fba2 2303 	umull	r2, r3, r2, r3
 8004578:	095b      	lsrs	r3, r3, #5
 800457a:	f003 020f 	and.w	r2, r3, #15
 800457e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4422      	add	r2, r4
 8004586:	609a      	str	r2, [r3, #8]
}
 8004588:	bf00      	nop
 800458a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800458e:	46bd      	mov	sp, r7
 8004590:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004594:	51eb851f 	.word	0x51eb851f

08004598 <__cvt>:
 8004598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800459c:	ec57 6b10 	vmov	r6, r7, d0
 80045a0:	2f00      	cmp	r7, #0
 80045a2:	460c      	mov	r4, r1
 80045a4:	4619      	mov	r1, r3
 80045a6:	463b      	mov	r3, r7
 80045a8:	bfbb      	ittet	lt
 80045aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80045ae:	461f      	movlt	r7, r3
 80045b0:	2300      	movge	r3, #0
 80045b2:	232d      	movlt	r3, #45	@ 0x2d
 80045b4:	700b      	strb	r3, [r1, #0]
 80045b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80045bc:	4691      	mov	r9, r2
 80045be:	f023 0820 	bic.w	r8, r3, #32
 80045c2:	bfbc      	itt	lt
 80045c4:	4632      	movlt	r2, r6
 80045c6:	4616      	movlt	r6, r2
 80045c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80045cc:	d005      	beq.n	80045da <__cvt+0x42>
 80045ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80045d2:	d100      	bne.n	80045d6 <__cvt+0x3e>
 80045d4:	3401      	adds	r4, #1
 80045d6:	2102      	movs	r1, #2
 80045d8:	e000      	b.n	80045dc <__cvt+0x44>
 80045da:	2103      	movs	r1, #3
 80045dc:	ab03      	add	r3, sp, #12
 80045de:	9301      	str	r3, [sp, #4]
 80045e0:	ab02      	add	r3, sp, #8
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	ec47 6b10 	vmov	d0, r6, r7
 80045e8:	4653      	mov	r3, sl
 80045ea:	4622      	mov	r2, r4
 80045ec:	f000 fe5c 	bl	80052a8 <_dtoa_r>
 80045f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80045f4:	4605      	mov	r5, r0
 80045f6:	d119      	bne.n	800462c <__cvt+0x94>
 80045f8:	f019 0f01 	tst.w	r9, #1
 80045fc:	d00e      	beq.n	800461c <__cvt+0x84>
 80045fe:	eb00 0904 	add.w	r9, r0, r4
 8004602:	2200      	movs	r2, #0
 8004604:	2300      	movs	r3, #0
 8004606:	4630      	mov	r0, r6
 8004608:	4639      	mov	r1, r7
 800460a:	f7fc fa5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800460e:	b108      	cbz	r0, 8004614 <__cvt+0x7c>
 8004610:	f8cd 900c 	str.w	r9, [sp, #12]
 8004614:	2230      	movs	r2, #48	@ 0x30
 8004616:	9b03      	ldr	r3, [sp, #12]
 8004618:	454b      	cmp	r3, r9
 800461a:	d31e      	bcc.n	800465a <__cvt+0xc2>
 800461c:	9b03      	ldr	r3, [sp, #12]
 800461e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004620:	1b5b      	subs	r3, r3, r5
 8004622:	4628      	mov	r0, r5
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	b004      	add	sp, #16
 8004628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800462c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004630:	eb00 0904 	add.w	r9, r0, r4
 8004634:	d1e5      	bne.n	8004602 <__cvt+0x6a>
 8004636:	7803      	ldrb	r3, [r0, #0]
 8004638:	2b30      	cmp	r3, #48	@ 0x30
 800463a:	d10a      	bne.n	8004652 <__cvt+0xba>
 800463c:	2200      	movs	r2, #0
 800463e:	2300      	movs	r3, #0
 8004640:	4630      	mov	r0, r6
 8004642:	4639      	mov	r1, r7
 8004644:	f7fc fa40 	bl	8000ac8 <__aeabi_dcmpeq>
 8004648:	b918      	cbnz	r0, 8004652 <__cvt+0xba>
 800464a:	f1c4 0401 	rsb	r4, r4, #1
 800464e:	f8ca 4000 	str.w	r4, [sl]
 8004652:	f8da 3000 	ldr.w	r3, [sl]
 8004656:	4499      	add	r9, r3
 8004658:	e7d3      	b.n	8004602 <__cvt+0x6a>
 800465a:	1c59      	adds	r1, r3, #1
 800465c:	9103      	str	r1, [sp, #12]
 800465e:	701a      	strb	r2, [r3, #0]
 8004660:	e7d9      	b.n	8004616 <__cvt+0x7e>

08004662 <__exponent>:
 8004662:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004664:	2900      	cmp	r1, #0
 8004666:	bfba      	itte	lt
 8004668:	4249      	neglt	r1, r1
 800466a:	232d      	movlt	r3, #45	@ 0x2d
 800466c:	232b      	movge	r3, #43	@ 0x2b
 800466e:	2909      	cmp	r1, #9
 8004670:	7002      	strb	r2, [r0, #0]
 8004672:	7043      	strb	r3, [r0, #1]
 8004674:	dd29      	ble.n	80046ca <__exponent+0x68>
 8004676:	f10d 0307 	add.w	r3, sp, #7
 800467a:	461d      	mov	r5, r3
 800467c:	270a      	movs	r7, #10
 800467e:	461a      	mov	r2, r3
 8004680:	fbb1 f6f7 	udiv	r6, r1, r7
 8004684:	fb07 1416 	mls	r4, r7, r6, r1
 8004688:	3430      	adds	r4, #48	@ 0x30
 800468a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800468e:	460c      	mov	r4, r1
 8004690:	2c63      	cmp	r4, #99	@ 0x63
 8004692:	f103 33ff 	add.w	r3, r3, #4294967295
 8004696:	4631      	mov	r1, r6
 8004698:	dcf1      	bgt.n	800467e <__exponent+0x1c>
 800469a:	3130      	adds	r1, #48	@ 0x30
 800469c:	1e94      	subs	r4, r2, #2
 800469e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80046a2:	1c41      	adds	r1, r0, #1
 80046a4:	4623      	mov	r3, r4
 80046a6:	42ab      	cmp	r3, r5
 80046a8:	d30a      	bcc.n	80046c0 <__exponent+0x5e>
 80046aa:	f10d 0309 	add.w	r3, sp, #9
 80046ae:	1a9b      	subs	r3, r3, r2
 80046b0:	42ac      	cmp	r4, r5
 80046b2:	bf88      	it	hi
 80046b4:	2300      	movhi	r3, #0
 80046b6:	3302      	adds	r3, #2
 80046b8:	4403      	add	r3, r0
 80046ba:	1a18      	subs	r0, r3, r0
 80046bc:	b003      	add	sp, #12
 80046be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80046c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80046c8:	e7ed      	b.n	80046a6 <__exponent+0x44>
 80046ca:	2330      	movs	r3, #48	@ 0x30
 80046cc:	3130      	adds	r1, #48	@ 0x30
 80046ce:	7083      	strb	r3, [r0, #2]
 80046d0:	70c1      	strb	r1, [r0, #3]
 80046d2:	1d03      	adds	r3, r0, #4
 80046d4:	e7f1      	b.n	80046ba <__exponent+0x58>
	...

080046d8 <_printf_float>:
 80046d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046dc:	b08d      	sub	sp, #52	@ 0x34
 80046de:	460c      	mov	r4, r1
 80046e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80046e4:	4616      	mov	r6, r2
 80046e6:	461f      	mov	r7, r3
 80046e8:	4605      	mov	r5, r0
 80046ea:	f000 fcdb 	bl	80050a4 <_localeconv_r>
 80046ee:	6803      	ldr	r3, [r0, #0]
 80046f0:	9304      	str	r3, [sp, #16]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fb fdbc 	bl	8000270 <strlen>
 80046f8:	2300      	movs	r3, #0
 80046fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80046fc:	f8d8 3000 	ldr.w	r3, [r8]
 8004700:	9005      	str	r0, [sp, #20]
 8004702:	3307      	adds	r3, #7
 8004704:	f023 0307 	bic.w	r3, r3, #7
 8004708:	f103 0208 	add.w	r2, r3, #8
 800470c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004710:	f8d4 b000 	ldr.w	fp, [r4]
 8004714:	f8c8 2000 	str.w	r2, [r8]
 8004718:	e9d3 8900 	ldrd	r8, r9, [r3]
 800471c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004720:	9307      	str	r3, [sp, #28]
 8004722:	f8cd 8018 	str.w	r8, [sp, #24]
 8004726:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800472a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800472e:	4b9c      	ldr	r3, [pc, #624]	@ (80049a0 <_printf_float+0x2c8>)
 8004730:	f04f 32ff 	mov.w	r2, #4294967295
 8004734:	f7fc f9fa 	bl	8000b2c <__aeabi_dcmpun>
 8004738:	bb70      	cbnz	r0, 8004798 <_printf_float+0xc0>
 800473a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800473e:	4b98      	ldr	r3, [pc, #608]	@ (80049a0 <_printf_float+0x2c8>)
 8004740:	f04f 32ff 	mov.w	r2, #4294967295
 8004744:	f7fc f9d4 	bl	8000af0 <__aeabi_dcmple>
 8004748:	bb30      	cbnz	r0, 8004798 <_printf_float+0xc0>
 800474a:	2200      	movs	r2, #0
 800474c:	2300      	movs	r3, #0
 800474e:	4640      	mov	r0, r8
 8004750:	4649      	mov	r1, r9
 8004752:	f7fc f9c3 	bl	8000adc <__aeabi_dcmplt>
 8004756:	b110      	cbz	r0, 800475e <_printf_float+0x86>
 8004758:	232d      	movs	r3, #45	@ 0x2d
 800475a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800475e:	4a91      	ldr	r2, [pc, #580]	@ (80049a4 <_printf_float+0x2cc>)
 8004760:	4b91      	ldr	r3, [pc, #580]	@ (80049a8 <_printf_float+0x2d0>)
 8004762:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004766:	bf94      	ite	ls
 8004768:	4690      	movls	r8, r2
 800476a:	4698      	movhi	r8, r3
 800476c:	2303      	movs	r3, #3
 800476e:	6123      	str	r3, [r4, #16]
 8004770:	f02b 0304 	bic.w	r3, fp, #4
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	f04f 0900 	mov.w	r9, #0
 800477a:	9700      	str	r7, [sp, #0]
 800477c:	4633      	mov	r3, r6
 800477e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004780:	4621      	mov	r1, r4
 8004782:	4628      	mov	r0, r5
 8004784:	f000 f9d2 	bl	8004b2c <_printf_common>
 8004788:	3001      	adds	r0, #1
 800478a:	f040 808d 	bne.w	80048a8 <_printf_float+0x1d0>
 800478e:	f04f 30ff 	mov.w	r0, #4294967295
 8004792:	b00d      	add	sp, #52	@ 0x34
 8004794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004798:	4642      	mov	r2, r8
 800479a:	464b      	mov	r3, r9
 800479c:	4640      	mov	r0, r8
 800479e:	4649      	mov	r1, r9
 80047a0:	f7fc f9c4 	bl	8000b2c <__aeabi_dcmpun>
 80047a4:	b140      	cbz	r0, 80047b8 <_printf_float+0xe0>
 80047a6:	464b      	mov	r3, r9
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	bfbc      	itt	lt
 80047ac:	232d      	movlt	r3, #45	@ 0x2d
 80047ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80047b2:	4a7e      	ldr	r2, [pc, #504]	@ (80049ac <_printf_float+0x2d4>)
 80047b4:	4b7e      	ldr	r3, [pc, #504]	@ (80049b0 <_printf_float+0x2d8>)
 80047b6:	e7d4      	b.n	8004762 <_printf_float+0x8a>
 80047b8:	6863      	ldr	r3, [r4, #4]
 80047ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80047be:	9206      	str	r2, [sp, #24]
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	d13b      	bne.n	800483c <_printf_float+0x164>
 80047c4:	2306      	movs	r3, #6
 80047c6:	6063      	str	r3, [r4, #4]
 80047c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80047cc:	2300      	movs	r3, #0
 80047ce:	6022      	str	r2, [r4, #0]
 80047d0:	9303      	str	r3, [sp, #12]
 80047d2:	ab0a      	add	r3, sp, #40	@ 0x28
 80047d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80047d8:	ab09      	add	r3, sp, #36	@ 0x24
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	6861      	ldr	r1, [r4, #4]
 80047de:	ec49 8b10 	vmov	d0, r8, r9
 80047e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80047e6:	4628      	mov	r0, r5
 80047e8:	f7ff fed6 	bl	8004598 <__cvt>
 80047ec:	9b06      	ldr	r3, [sp, #24]
 80047ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80047f0:	2b47      	cmp	r3, #71	@ 0x47
 80047f2:	4680      	mov	r8, r0
 80047f4:	d129      	bne.n	800484a <_printf_float+0x172>
 80047f6:	1cc8      	adds	r0, r1, #3
 80047f8:	db02      	blt.n	8004800 <_printf_float+0x128>
 80047fa:	6863      	ldr	r3, [r4, #4]
 80047fc:	4299      	cmp	r1, r3
 80047fe:	dd41      	ble.n	8004884 <_printf_float+0x1ac>
 8004800:	f1aa 0a02 	sub.w	sl, sl, #2
 8004804:	fa5f fa8a 	uxtb.w	sl, sl
 8004808:	3901      	subs	r1, #1
 800480a:	4652      	mov	r2, sl
 800480c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004810:	9109      	str	r1, [sp, #36]	@ 0x24
 8004812:	f7ff ff26 	bl	8004662 <__exponent>
 8004816:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004818:	1813      	adds	r3, r2, r0
 800481a:	2a01      	cmp	r2, #1
 800481c:	4681      	mov	r9, r0
 800481e:	6123      	str	r3, [r4, #16]
 8004820:	dc02      	bgt.n	8004828 <_printf_float+0x150>
 8004822:	6822      	ldr	r2, [r4, #0]
 8004824:	07d2      	lsls	r2, r2, #31
 8004826:	d501      	bpl.n	800482c <_printf_float+0x154>
 8004828:	3301      	adds	r3, #1
 800482a:	6123      	str	r3, [r4, #16]
 800482c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0a2      	beq.n	800477a <_printf_float+0xa2>
 8004834:	232d      	movs	r3, #45	@ 0x2d
 8004836:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800483a:	e79e      	b.n	800477a <_printf_float+0xa2>
 800483c:	9a06      	ldr	r2, [sp, #24]
 800483e:	2a47      	cmp	r2, #71	@ 0x47
 8004840:	d1c2      	bne.n	80047c8 <_printf_float+0xf0>
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1c0      	bne.n	80047c8 <_printf_float+0xf0>
 8004846:	2301      	movs	r3, #1
 8004848:	e7bd      	b.n	80047c6 <_printf_float+0xee>
 800484a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800484e:	d9db      	bls.n	8004808 <_printf_float+0x130>
 8004850:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004854:	d118      	bne.n	8004888 <_printf_float+0x1b0>
 8004856:	2900      	cmp	r1, #0
 8004858:	6863      	ldr	r3, [r4, #4]
 800485a:	dd0b      	ble.n	8004874 <_printf_float+0x19c>
 800485c:	6121      	str	r1, [r4, #16]
 800485e:	b913      	cbnz	r3, 8004866 <_printf_float+0x18e>
 8004860:	6822      	ldr	r2, [r4, #0]
 8004862:	07d0      	lsls	r0, r2, #31
 8004864:	d502      	bpl.n	800486c <_printf_float+0x194>
 8004866:	3301      	adds	r3, #1
 8004868:	440b      	add	r3, r1
 800486a:	6123      	str	r3, [r4, #16]
 800486c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800486e:	f04f 0900 	mov.w	r9, #0
 8004872:	e7db      	b.n	800482c <_printf_float+0x154>
 8004874:	b913      	cbnz	r3, 800487c <_printf_float+0x1a4>
 8004876:	6822      	ldr	r2, [r4, #0]
 8004878:	07d2      	lsls	r2, r2, #31
 800487a:	d501      	bpl.n	8004880 <_printf_float+0x1a8>
 800487c:	3302      	adds	r3, #2
 800487e:	e7f4      	b.n	800486a <_printf_float+0x192>
 8004880:	2301      	movs	r3, #1
 8004882:	e7f2      	b.n	800486a <_printf_float+0x192>
 8004884:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004888:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800488a:	4299      	cmp	r1, r3
 800488c:	db05      	blt.n	800489a <_printf_float+0x1c2>
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	6121      	str	r1, [r4, #16]
 8004892:	07d8      	lsls	r0, r3, #31
 8004894:	d5ea      	bpl.n	800486c <_printf_float+0x194>
 8004896:	1c4b      	adds	r3, r1, #1
 8004898:	e7e7      	b.n	800486a <_printf_float+0x192>
 800489a:	2900      	cmp	r1, #0
 800489c:	bfd4      	ite	le
 800489e:	f1c1 0202 	rsble	r2, r1, #2
 80048a2:	2201      	movgt	r2, #1
 80048a4:	4413      	add	r3, r2
 80048a6:	e7e0      	b.n	800486a <_printf_float+0x192>
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	055a      	lsls	r2, r3, #21
 80048ac:	d407      	bmi.n	80048be <_printf_float+0x1e6>
 80048ae:	6923      	ldr	r3, [r4, #16]
 80048b0:	4642      	mov	r2, r8
 80048b2:	4631      	mov	r1, r6
 80048b4:	4628      	mov	r0, r5
 80048b6:	47b8      	blx	r7
 80048b8:	3001      	adds	r0, #1
 80048ba:	d12b      	bne.n	8004914 <_printf_float+0x23c>
 80048bc:	e767      	b.n	800478e <_printf_float+0xb6>
 80048be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80048c2:	f240 80dd 	bls.w	8004a80 <_printf_float+0x3a8>
 80048c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80048ca:	2200      	movs	r2, #0
 80048cc:	2300      	movs	r3, #0
 80048ce:	f7fc f8fb 	bl	8000ac8 <__aeabi_dcmpeq>
 80048d2:	2800      	cmp	r0, #0
 80048d4:	d033      	beq.n	800493e <_printf_float+0x266>
 80048d6:	4a37      	ldr	r2, [pc, #220]	@ (80049b4 <_printf_float+0x2dc>)
 80048d8:	2301      	movs	r3, #1
 80048da:	4631      	mov	r1, r6
 80048dc:	4628      	mov	r0, r5
 80048de:	47b8      	blx	r7
 80048e0:	3001      	adds	r0, #1
 80048e2:	f43f af54 	beq.w	800478e <_printf_float+0xb6>
 80048e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80048ea:	4543      	cmp	r3, r8
 80048ec:	db02      	blt.n	80048f4 <_printf_float+0x21c>
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	07d8      	lsls	r0, r3, #31
 80048f2:	d50f      	bpl.n	8004914 <_printf_float+0x23c>
 80048f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048f8:	4631      	mov	r1, r6
 80048fa:	4628      	mov	r0, r5
 80048fc:	47b8      	blx	r7
 80048fe:	3001      	adds	r0, #1
 8004900:	f43f af45 	beq.w	800478e <_printf_float+0xb6>
 8004904:	f04f 0900 	mov.w	r9, #0
 8004908:	f108 38ff 	add.w	r8, r8, #4294967295
 800490c:	f104 0a1a 	add.w	sl, r4, #26
 8004910:	45c8      	cmp	r8, r9
 8004912:	dc09      	bgt.n	8004928 <_printf_float+0x250>
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	079b      	lsls	r3, r3, #30
 8004918:	f100 8103 	bmi.w	8004b22 <_printf_float+0x44a>
 800491c:	68e0      	ldr	r0, [r4, #12]
 800491e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004920:	4298      	cmp	r0, r3
 8004922:	bfb8      	it	lt
 8004924:	4618      	movlt	r0, r3
 8004926:	e734      	b.n	8004792 <_printf_float+0xba>
 8004928:	2301      	movs	r3, #1
 800492a:	4652      	mov	r2, sl
 800492c:	4631      	mov	r1, r6
 800492e:	4628      	mov	r0, r5
 8004930:	47b8      	blx	r7
 8004932:	3001      	adds	r0, #1
 8004934:	f43f af2b 	beq.w	800478e <_printf_float+0xb6>
 8004938:	f109 0901 	add.w	r9, r9, #1
 800493c:	e7e8      	b.n	8004910 <_printf_float+0x238>
 800493e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004940:	2b00      	cmp	r3, #0
 8004942:	dc39      	bgt.n	80049b8 <_printf_float+0x2e0>
 8004944:	4a1b      	ldr	r2, [pc, #108]	@ (80049b4 <_printf_float+0x2dc>)
 8004946:	2301      	movs	r3, #1
 8004948:	4631      	mov	r1, r6
 800494a:	4628      	mov	r0, r5
 800494c:	47b8      	blx	r7
 800494e:	3001      	adds	r0, #1
 8004950:	f43f af1d 	beq.w	800478e <_printf_float+0xb6>
 8004954:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004958:	ea59 0303 	orrs.w	r3, r9, r3
 800495c:	d102      	bne.n	8004964 <_printf_float+0x28c>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	07d9      	lsls	r1, r3, #31
 8004962:	d5d7      	bpl.n	8004914 <_printf_float+0x23c>
 8004964:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004968:	4631      	mov	r1, r6
 800496a:	4628      	mov	r0, r5
 800496c:	47b8      	blx	r7
 800496e:	3001      	adds	r0, #1
 8004970:	f43f af0d 	beq.w	800478e <_printf_float+0xb6>
 8004974:	f04f 0a00 	mov.w	sl, #0
 8004978:	f104 0b1a 	add.w	fp, r4, #26
 800497c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800497e:	425b      	negs	r3, r3
 8004980:	4553      	cmp	r3, sl
 8004982:	dc01      	bgt.n	8004988 <_printf_float+0x2b0>
 8004984:	464b      	mov	r3, r9
 8004986:	e793      	b.n	80048b0 <_printf_float+0x1d8>
 8004988:	2301      	movs	r3, #1
 800498a:	465a      	mov	r2, fp
 800498c:	4631      	mov	r1, r6
 800498e:	4628      	mov	r0, r5
 8004990:	47b8      	blx	r7
 8004992:	3001      	adds	r0, #1
 8004994:	f43f aefb 	beq.w	800478e <_printf_float+0xb6>
 8004998:	f10a 0a01 	add.w	sl, sl, #1
 800499c:	e7ee      	b.n	800497c <_printf_float+0x2a4>
 800499e:	bf00      	nop
 80049a0:	7fefffff 	.word	0x7fefffff
 80049a4:	08007264 	.word	0x08007264
 80049a8:	08007268 	.word	0x08007268
 80049ac:	0800726c 	.word	0x0800726c
 80049b0:	08007270 	.word	0x08007270
 80049b4:	08007274 	.word	0x08007274
 80049b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80049ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80049be:	4553      	cmp	r3, sl
 80049c0:	bfa8      	it	ge
 80049c2:	4653      	movge	r3, sl
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	4699      	mov	r9, r3
 80049c8:	dc36      	bgt.n	8004a38 <_printf_float+0x360>
 80049ca:	f04f 0b00 	mov.w	fp, #0
 80049ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049d2:	f104 021a 	add.w	r2, r4, #26
 80049d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80049d8:	9306      	str	r3, [sp, #24]
 80049da:	eba3 0309 	sub.w	r3, r3, r9
 80049de:	455b      	cmp	r3, fp
 80049e0:	dc31      	bgt.n	8004a46 <_printf_float+0x36e>
 80049e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049e4:	459a      	cmp	sl, r3
 80049e6:	dc3a      	bgt.n	8004a5e <_printf_float+0x386>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	07da      	lsls	r2, r3, #31
 80049ec:	d437      	bmi.n	8004a5e <_printf_float+0x386>
 80049ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049f0:	ebaa 0903 	sub.w	r9, sl, r3
 80049f4:	9b06      	ldr	r3, [sp, #24]
 80049f6:	ebaa 0303 	sub.w	r3, sl, r3
 80049fa:	4599      	cmp	r9, r3
 80049fc:	bfa8      	it	ge
 80049fe:	4699      	movge	r9, r3
 8004a00:	f1b9 0f00 	cmp.w	r9, #0
 8004a04:	dc33      	bgt.n	8004a6e <_printf_float+0x396>
 8004a06:	f04f 0800 	mov.w	r8, #0
 8004a0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a0e:	f104 0b1a 	add.w	fp, r4, #26
 8004a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a14:	ebaa 0303 	sub.w	r3, sl, r3
 8004a18:	eba3 0309 	sub.w	r3, r3, r9
 8004a1c:	4543      	cmp	r3, r8
 8004a1e:	f77f af79 	ble.w	8004914 <_printf_float+0x23c>
 8004a22:	2301      	movs	r3, #1
 8004a24:	465a      	mov	r2, fp
 8004a26:	4631      	mov	r1, r6
 8004a28:	4628      	mov	r0, r5
 8004a2a:	47b8      	blx	r7
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	f43f aeae 	beq.w	800478e <_printf_float+0xb6>
 8004a32:	f108 0801 	add.w	r8, r8, #1
 8004a36:	e7ec      	b.n	8004a12 <_printf_float+0x33a>
 8004a38:	4642      	mov	r2, r8
 8004a3a:	4631      	mov	r1, r6
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	47b8      	blx	r7
 8004a40:	3001      	adds	r0, #1
 8004a42:	d1c2      	bne.n	80049ca <_printf_float+0x2f2>
 8004a44:	e6a3      	b.n	800478e <_printf_float+0xb6>
 8004a46:	2301      	movs	r3, #1
 8004a48:	4631      	mov	r1, r6
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	9206      	str	r2, [sp, #24]
 8004a4e:	47b8      	blx	r7
 8004a50:	3001      	adds	r0, #1
 8004a52:	f43f ae9c 	beq.w	800478e <_printf_float+0xb6>
 8004a56:	9a06      	ldr	r2, [sp, #24]
 8004a58:	f10b 0b01 	add.w	fp, fp, #1
 8004a5c:	e7bb      	b.n	80049d6 <_printf_float+0x2fe>
 8004a5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a62:	4631      	mov	r1, r6
 8004a64:	4628      	mov	r0, r5
 8004a66:	47b8      	blx	r7
 8004a68:	3001      	adds	r0, #1
 8004a6a:	d1c0      	bne.n	80049ee <_printf_float+0x316>
 8004a6c:	e68f      	b.n	800478e <_printf_float+0xb6>
 8004a6e:	9a06      	ldr	r2, [sp, #24]
 8004a70:	464b      	mov	r3, r9
 8004a72:	4442      	add	r2, r8
 8004a74:	4631      	mov	r1, r6
 8004a76:	4628      	mov	r0, r5
 8004a78:	47b8      	blx	r7
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	d1c3      	bne.n	8004a06 <_printf_float+0x32e>
 8004a7e:	e686      	b.n	800478e <_printf_float+0xb6>
 8004a80:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004a84:	f1ba 0f01 	cmp.w	sl, #1
 8004a88:	dc01      	bgt.n	8004a8e <_printf_float+0x3b6>
 8004a8a:	07db      	lsls	r3, r3, #31
 8004a8c:	d536      	bpl.n	8004afc <_printf_float+0x424>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	4642      	mov	r2, r8
 8004a92:	4631      	mov	r1, r6
 8004a94:	4628      	mov	r0, r5
 8004a96:	47b8      	blx	r7
 8004a98:	3001      	adds	r0, #1
 8004a9a:	f43f ae78 	beq.w	800478e <_printf_float+0xb6>
 8004a9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004aa2:	4631      	mov	r1, r6
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	47b8      	blx	r7
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	f43f ae70 	beq.w	800478e <_printf_float+0xb6>
 8004aae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004aba:	f7fc f805 	bl	8000ac8 <__aeabi_dcmpeq>
 8004abe:	b9c0      	cbnz	r0, 8004af2 <_printf_float+0x41a>
 8004ac0:	4653      	mov	r3, sl
 8004ac2:	f108 0201 	add.w	r2, r8, #1
 8004ac6:	4631      	mov	r1, r6
 8004ac8:	4628      	mov	r0, r5
 8004aca:	47b8      	blx	r7
 8004acc:	3001      	adds	r0, #1
 8004ace:	d10c      	bne.n	8004aea <_printf_float+0x412>
 8004ad0:	e65d      	b.n	800478e <_printf_float+0xb6>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	465a      	mov	r2, fp
 8004ad6:	4631      	mov	r1, r6
 8004ad8:	4628      	mov	r0, r5
 8004ada:	47b8      	blx	r7
 8004adc:	3001      	adds	r0, #1
 8004ade:	f43f ae56 	beq.w	800478e <_printf_float+0xb6>
 8004ae2:	f108 0801 	add.w	r8, r8, #1
 8004ae6:	45d0      	cmp	r8, sl
 8004ae8:	dbf3      	blt.n	8004ad2 <_printf_float+0x3fa>
 8004aea:	464b      	mov	r3, r9
 8004aec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004af0:	e6df      	b.n	80048b2 <_printf_float+0x1da>
 8004af2:	f04f 0800 	mov.w	r8, #0
 8004af6:	f104 0b1a 	add.w	fp, r4, #26
 8004afa:	e7f4      	b.n	8004ae6 <_printf_float+0x40e>
 8004afc:	2301      	movs	r3, #1
 8004afe:	4642      	mov	r2, r8
 8004b00:	e7e1      	b.n	8004ac6 <_printf_float+0x3ee>
 8004b02:	2301      	movs	r3, #1
 8004b04:	464a      	mov	r2, r9
 8004b06:	4631      	mov	r1, r6
 8004b08:	4628      	mov	r0, r5
 8004b0a:	47b8      	blx	r7
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	f43f ae3e 	beq.w	800478e <_printf_float+0xb6>
 8004b12:	f108 0801 	add.w	r8, r8, #1
 8004b16:	68e3      	ldr	r3, [r4, #12]
 8004b18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004b1a:	1a5b      	subs	r3, r3, r1
 8004b1c:	4543      	cmp	r3, r8
 8004b1e:	dcf0      	bgt.n	8004b02 <_printf_float+0x42a>
 8004b20:	e6fc      	b.n	800491c <_printf_float+0x244>
 8004b22:	f04f 0800 	mov.w	r8, #0
 8004b26:	f104 0919 	add.w	r9, r4, #25
 8004b2a:	e7f4      	b.n	8004b16 <_printf_float+0x43e>

08004b2c <_printf_common>:
 8004b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b30:	4616      	mov	r6, r2
 8004b32:	4698      	mov	r8, r3
 8004b34:	688a      	ldr	r2, [r1, #8]
 8004b36:	690b      	ldr	r3, [r1, #16]
 8004b38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	bfb8      	it	lt
 8004b40:	4613      	movlt	r3, r2
 8004b42:	6033      	str	r3, [r6, #0]
 8004b44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b48:	4607      	mov	r7, r0
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	b10a      	cbz	r2, 8004b52 <_printf_common+0x26>
 8004b4e:	3301      	adds	r3, #1
 8004b50:	6033      	str	r3, [r6, #0]
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	0699      	lsls	r1, r3, #26
 8004b56:	bf42      	ittt	mi
 8004b58:	6833      	ldrmi	r3, [r6, #0]
 8004b5a:	3302      	addmi	r3, #2
 8004b5c:	6033      	strmi	r3, [r6, #0]
 8004b5e:	6825      	ldr	r5, [r4, #0]
 8004b60:	f015 0506 	ands.w	r5, r5, #6
 8004b64:	d106      	bne.n	8004b74 <_printf_common+0x48>
 8004b66:	f104 0a19 	add.w	sl, r4, #25
 8004b6a:	68e3      	ldr	r3, [r4, #12]
 8004b6c:	6832      	ldr	r2, [r6, #0]
 8004b6e:	1a9b      	subs	r3, r3, r2
 8004b70:	42ab      	cmp	r3, r5
 8004b72:	dc26      	bgt.n	8004bc2 <_printf_common+0x96>
 8004b74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b78:	6822      	ldr	r2, [r4, #0]
 8004b7a:	3b00      	subs	r3, #0
 8004b7c:	bf18      	it	ne
 8004b7e:	2301      	movne	r3, #1
 8004b80:	0692      	lsls	r2, r2, #26
 8004b82:	d42b      	bmi.n	8004bdc <_printf_common+0xb0>
 8004b84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b88:	4641      	mov	r1, r8
 8004b8a:	4638      	mov	r0, r7
 8004b8c:	47c8      	blx	r9
 8004b8e:	3001      	adds	r0, #1
 8004b90:	d01e      	beq.n	8004bd0 <_printf_common+0xa4>
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	6922      	ldr	r2, [r4, #16]
 8004b96:	f003 0306 	and.w	r3, r3, #6
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	bf02      	ittt	eq
 8004b9e:	68e5      	ldreq	r5, [r4, #12]
 8004ba0:	6833      	ldreq	r3, [r6, #0]
 8004ba2:	1aed      	subeq	r5, r5, r3
 8004ba4:	68a3      	ldr	r3, [r4, #8]
 8004ba6:	bf0c      	ite	eq
 8004ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bac:	2500      	movne	r5, #0
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	bfc4      	itt	gt
 8004bb2:	1a9b      	subgt	r3, r3, r2
 8004bb4:	18ed      	addgt	r5, r5, r3
 8004bb6:	2600      	movs	r6, #0
 8004bb8:	341a      	adds	r4, #26
 8004bba:	42b5      	cmp	r5, r6
 8004bbc:	d11a      	bne.n	8004bf4 <_printf_common+0xc8>
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	e008      	b.n	8004bd4 <_printf_common+0xa8>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	4652      	mov	r2, sl
 8004bc6:	4641      	mov	r1, r8
 8004bc8:	4638      	mov	r0, r7
 8004bca:	47c8      	blx	r9
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d103      	bne.n	8004bd8 <_printf_common+0xac>
 8004bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bd8:	3501      	adds	r5, #1
 8004bda:	e7c6      	b.n	8004b6a <_printf_common+0x3e>
 8004bdc:	18e1      	adds	r1, r4, r3
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	2030      	movs	r0, #48	@ 0x30
 8004be2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004be6:	4422      	add	r2, r4
 8004be8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004bec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004bf0:	3302      	adds	r3, #2
 8004bf2:	e7c7      	b.n	8004b84 <_printf_common+0x58>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	4641      	mov	r1, r8
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	47c8      	blx	r9
 8004bfe:	3001      	adds	r0, #1
 8004c00:	d0e6      	beq.n	8004bd0 <_printf_common+0xa4>
 8004c02:	3601      	adds	r6, #1
 8004c04:	e7d9      	b.n	8004bba <_printf_common+0x8e>
	...

08004c08 <_printf_i>:
 8004c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c0c:	7e0f      	ldrb	r7, [r1, #24]
 8004c0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c10:	2f78      	cmp	r7, #120	@ 0x78
 8004c12:	4691      	mov	r9, r2
 8004c14:	4680      	mov	r8, r0
 8004c16:	460c      	mov	r4, r1
 8004c18:	469a      	mov	sl, r3
 8004c1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c1e:	d807      	bhi.n	8004c30 <_printf_i+0x28>
 8004c20:	2f62      	cmp	r7, #98	@ 0x62
 8004c22:	d80a      	bhi.n	8004c3a <_printf_i+0x32>
 8004c24:	2f00      	cmp	r7, #0
 8004c26:	f000 80d2 	beq.w	8004dce <_printf_i+0x1c6>
 8004c2a:	2f58      	cmp	r7, #88	@ 0x58
 8004c2c:	f000 80b9 	beq.w	8004da2 <_printf_i+0x19a>
 8004c30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c38:	e03a      	b.n	8004cb0 <_printf_i+0xa8>
 8004c3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c3e:	2b15      	cmp	r3, #21
 8004c40:	d8f6      	bhi.n	8004c30 <_printf_i+0x28>
 8004c42:	a101      	add	r1, pc, #4	@ (adr r1, 8004c48 <_printf_i+0x40>)
 8004c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c48:	08004ca1 	.word	0x08004ca1
 8004c4c:	08004cb5 	.word	0x08004cb5
 8004c50:	08004c31 	.word	0x08004c31
 8004c54:	08004c31 	.word	0x08004c31
 8004c58:	08004c31 	.word	0x08004c31
 8004c5c:	08004c31 	.word	0x08004c31
 8004c60:	08004cb5 	.word	0x08004cb5
 8004c64:	08004c31 	.word	0x08004c31
 8004c68:	08004c31 	.word	0x08004c31
 8004c6c:	08004c31 	.word	0x08004c31
 8004c70:	08004c31 	.word	0x08004c31
 8004c74:	08004db5 	.word	0x08004db5
 8004c78:	08004cdf 	.word	0x08004cdf
 8004c7c:	08004d6f 	.word	0x08004d6f
 8004c80:	08004c31 	.word	0x08004c31
 8004c84:	08004c31 	.word	0x08004c31
 8004c88:	08004dd7 	.word	0x08004dd7
 8004c8c:	08004c31 	.word	0x08004c31
 8004c90:	08004cdf 	.word	0x08004cdf
 8004c94:	08004c31 	.word	0x08004c31
 8004c98:	08004c31 	.word	0x08004c31
 8004c9c:	08004d77 	.word	0x08004d77
 8004ca0:	6833      	ldr	r3, [r6, #0]
 8004ca2:	1d1a      	adds	r2, r3, #4
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6032      	str	r2, [r6, #0]
 8004ca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e09d      	b.n	8004df0 <_printf_i+0x1e8>
 8004cb4:	6833      	ldr	r3, [r6, #0]
 8004cb6:	6820      	ldr	r0, [r4, #0]
 8004cb8:	1d19      	adds	r1, r3, #4
 8004cba:	6031      	str	r1, [r6, #0]
 8004cbc:	0606      	lsls	r6, r0, #24
 8004cbe:	d501      	bpl.n	8004cc4 <_printf_i+0xbc>
 8004cc0:	681d      	ldr	r5, [r3, #0]
 8004cc2:	e003      	b.n	8004ccc <_printf_i+0xc4>
 8004cc4:	0645      	lsls	r5, r0, #25
 8004cc6:	d5fb      	bpl.n	8004cc0 <_printf_i+0xb8>
 8004cc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ccc:	2d00      	cmp	r5, #0
 8004cce:	da03      	bge.n	8004cd8 <_printf_i+0xd0>
 8004cd0:	232d      	movs	r3, #45	@ 0x2d
 8004cd2:	426d      	negs	r5, r5
 8004cd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cd8:	4859      	ldr	r0, [pc, #356]	@ (8004e40 <_printf_i+0x238>)
 8004cda:	230a      	movs	r3, #10
 8004cdc:	e011      	b.n	8004d02 <_printf_i+0xfa>
 8004cde:	6821      	ldr	r1, [r4, #0]
 8004ce0:	6833      	ldr	r3, [r6, #0]
 8004ce2:	0608      	lsls	r0, r1, #24
 8004ce4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ce8:	d402      	bmi.n	8004cf0 <_printf_i+0xe8>
 8004cea:	0649      	lsls	r1, r1, #25
 8004cec:	bf48      	it	mi
 8004cee:	b2ad      	uxthmi	r5, r5
 8004cf0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004cf2:	4853      	ldr	r0, [pc, #332]	@ (8004e40 <_printf_i+0x238>)
 8004cf4:	6033      	str	r3, [r6, #0]
 8004cf6:	bf14      	ite	ne
 8004cf8:	230a      	movne	r3, #10
 8004cfa:	2308      	moveq	r3, #8
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d02:	6866      	ldr	r6, [r4, #4]
 8004d04:	60a6      	str	r6, [r4, #8]
 8004d06:	2e00      	cmp	r6, #0
 8004d08:	bfa2      	ittt	ge
 8004d0a:	6821      	ldrge	r1, [r4, #0]
 8004d0c:	f021 0104 	bicge.w	r1, r1, #4
 8004d10:	6021      	strge	r1, [r4, #0]
 8004d12:	b90d      	cbnz	r5, 8004d18 <_printf_i+0x110>
 8004d14:	2e00      	cmp	r6, #0
 8004d16:	d04b      	beq.n	8004db0 <_printf_i+0x1a8>
 8004d18:	4616      	mov	r6, r2
 8004d1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d1e:	fb03 5711 	mls	r7, r3, r1, r5
 8004d22:	5dc7      	ldrb	r7, [r0, r7]
 8004d24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d28:	462f      	mov	r7, r5
 8004d2a:	42bb      	cmp	r3, r7
 8004d2c:	460d      	mov	r5, r1
 8004d2e:	d9f4      	bls.n	8004d1a <_printf_i+0x112>
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d10b      	bne.n	8004d4c <_printf_i+0x144>
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	07df      	lsls	r7, r3, #31
 8004d38:	d508      	bpl.n	8004d4c <_printf_i+0x144>
 8004d3a:	6923      	ldr	r3, [r4, #16]
 8004d3c:	6861      	ldr	r1, [r4, #4]
 8004d3e:	4299      	cmp	r1, r3
 8004d40:	bfde      	ittt	le
 8004d42:	2330      	movle	r3, #48	@ 0x30
 8004d44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d4c:	1b92      	subs	r2, r2, r6
 8004d4e:	6122      	str	r2, [r4, #16]
 8004d50:	f8cd a000 	str.w	sl, [sp]
 8004d54:	464b      	mov	r3, r9
 8004d56:	aa03      	add	r2, sp, #12
 8004d58:	4621      	mov	r1, r4
 8004d5a:	4640      	mov	r0, r8
 8004d5c:	f7ff fee6 	bl	8004b2c <_printf_common>
 8004d60:	3001      	adds	r0, #1
 8004d62:	d14a      	bne.n	8004dfa <_printf_i+0x1f2>
 8004d64:	f04f 30ff 	mov.w	r0, #4294967295
 8004d68:	b004      	add	sp, #16
 8004d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	f043 0320 	orr.w	r3, r3, #32
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	4833      	ldr	r0, [pc, #204]	@ (8004e44 <_printf_i+0x23c>)
 8004d78:	2778      	movs	r7, #120	@ 0x78
 8004d7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	6831      	ldr	r1, [r6, #0]
 8004d82:	061f      	lsls	r7, r3, #24
 8004d84:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d88:	d402      	bmi.n	8004d90 <_printf_i+0x188>
 8004d8a:	065f      	lsls	r7, r3, #25
 8004d8c:	bf48      	it	mi
 8004d8e:	b2ad      	uxthmi	r5, r5
 8004d90:	6031      	str	r1, [r6, #0]
 8004d92:	07d9      	lsls	r1, r3, #31
 8004d94:	bf44      	itt	mi
 8004d96:	f043 0320 	orrmi.w	r3, r3, #32
 8004d9a:	6023      	strmi	r3, [r4, #0]
 8004d9c:	b11d      	cbz	r5, 8004da6 <_printf_i+0x19e>
 8004d9e:	2310      	movs	r3, #16
 8004da0:	e7ac      	b.n	8004cfc <_printf_i+0xf4>
 8004da2:	4827      	ldr	r0, [pc, #156]	@ (8004e40 <_printf_i+0x238>)
 8004da4:	e7e9      	b.n	8004d7a <_printf_i+0x172>
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	f023 0320 	bic.w	r3, r3, #32
 8004dac:	6023      	str	r3, [r4, #0]
 8004dae:	e7f6      	b.n	8004d9e <_printf_i+0x196>
 8004db0:	4616      	mov	r6, r2
 8004db2:	e7bd      	b.n	8004d30 <_printf_i+0x128>
 8004db4:	6833      	ldr	r3, [r6, #0]
 8004db6:	6825      	ldr	r5, [r4, #0]
 8004db8:	6961      	ldr	r1, [r4, #20]
 8004dba:	1d18      	adds	r0, r3, #4
 8004dbc:	6030      	str	r0, [r6, #0]
 8004dbe:	062e      	lsls	r6, r5, #24
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	d501      	bpl.n	8004dc8 <_printf_i+0x1c0>
 8004dc4:	6019      	str	r1, [r3, #0]
 8004dc6:	e002      	b.n	8004dce <_printf_i+0x1c6>
 8004dc8:	0668      	lsls	r0, r5, #25
 8004dca:	d5fb      	bpl.n	8004dc4 <_printf_i+0x1bc>
 8004dcc:	8019      	strh	r1, [r3, #0]
 8004dce:	2300      	movs	r3, #0
 8004dd0:	6123      	str	r3, [r4, #16]
 8004dd2:	4616      	mov	r6, r2
 8004dd4:	e7bc      	b.n	8004d50 <_printf_i+0x148>
 8004dd6:	6833      	ldr	r3, [r6, #0]
 8004dd8:	1d1a      	adds	r2, r3, #4
 8004dda:	6032      	str	r2, [r6, #0]
 8004ddc:	681e      	ldr	r6, [r3, #0]
 8004dde:	6862      	ldr	r2, [r4, #4]
 8004de0:	2100      	movs	r1, #0
 8004de2:	4630      	mov	r0, r6
 8004de4:	f7fb f9f4 	bl	80001d0 <memchr>
 8004de8:	b108      	cbz	r0, 8004dee <_printf_i+0x1e6>
 8004dea:	1b80      	subs	r0, r0, r6
 8004dec:	6060      	str	r0, [r4, #4]
 8004dee:	6863      	ldr	r3, [r4, #4]
 8004df0:	6123      	str	r3, [r4, #16]
 8004df2:	2300      	movs	r3, #0
 8004df4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004df8:	e7aa      	b.n	8004d50 <_printf_i+0x148>
 8004dfa:	6923      	ldr	r3, [r4, #16]
 8004dfc:	4632      	mov	r2, r6
 8004dfe:	4649      	mov	r1, r9
 8004e00:	4640      	mov	r0, r8
 8004e02:	47d0      	blx	sl
 8004e04:	3001      	adds	r0, #1
 8004e06:	d0ad      	beq.n	8004d64 <_printf_i+0x15c>
 8004e08:	6823      	ldr	r3, [r4, #0]
 8004e0a:	079b      	lsls	r3, r3, #30
 8004e0c:	d413      	bmi.n	8004e36 <_printf_i+0x22e>
 8004e0e:	68e0      	ldr	r0, [r4, #12]
 8004e10:	9b03      	ldr	r3, [sp, #12]
 8004e12:	4298      	cmp	r0, r3
 8004e14:	bfb8      	it	lt
 8004e16:	4618      	movlt	r0, r3
 8004e18:	e7a6      	b.n	8004d68 <_printf_i+0x160>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	4632      	mov	r2, r6
 8004e1e:	4649      	mov	r1, r9
 8004e20:	4640      	mov	r0, r8
 8004e22:	47d0      	blx	sl
 8004e24:	3001      	adds	r0, #1
 8004e26:	d09d      	beq.n	8004d64 <_printf_i+0x15c>
 8004e28:	3501      	adds	r5, #1
 8004e2a:	68e3      	ldr	r3, [r4, #12]
 8004e2c:	9903      	ldr	r1, [sp, #12]
 8004e2e:	1a5b      	subs	r3, r3, r1
 8004e30:	42ab      	cmp	r3, r5
 8004e32:	dcf2      	bgt.n	8004e1a <_printf_i+0x212>
 8004e34:	e7eb      	b.n	8004e0e <_printf_i+0x206>
 8004e36:	2500      	movs	r5, #0
 8004e38:	f104 0619 	add.w	r6, r4, #25
 8004e3c:	e7f5      	b.n	8004e2a <_printf_i+0x222>
 8004e3e:	bf00      	nop
 8004e40:	08007276 	.word	0x08007276
 8004e44:	08007287 	.word	0x08007287

08004e48 <std>:
 8004e48:	2300      	movs	r3, #0
 8004e4a:	b510      	push	{r4, lr}
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	e9c0 3300 	strd	r3, r3, [r0]
 8004e52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e56:	6083      	str	r3, [r0, #8]
 8004e58:	8181      	strh	r1, [r0, #12]
 8004e5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e5c:	81c2      	strh	r2, [r0, #14]
 8004e5e:	6183      	str	r3, [r0, #24]
 8004e60:	4619      	mov	r1, r3
 8004e62:	2208      	movs	r2, #8
 8004e64:	305c      	adds	r0, #92	@ 0x5c
 8004e66:	f000 f914 	bl	8005092 <memset>
 8004e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea0 <std+0x58>)
 8004e6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea4 <std+0x5c>)
 8004e70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea8 <std+0x60>)
 8004e74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e76:	4b0d      	ldr	r3, [pc, #52]	@ (8004eac <std+0x64>)
 8004e78:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb0 <std+0x68>)
 8004e7c:	6224      	str	r4, [r4, #32]
 8004e7e:	429c      	cmp	r4, r3
 8004e80:	d006      	beq.n	8004e90 <std+0x48>
 8004e82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e86:	4294      	cmp	r4, r2
 8004e88:	d002      	beq.n	8004e90 <std+0x48>
 8004e8a:	33d0      	adds	r3, #208	@ 0xd0
 8004e8c:	429c      	cmp	r4, r3
 8004e8e:	d105      	bne.n	8004e9c <std+0x54>
 8004e90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e98:	f000 b978 	b.w	800518c <__retarget_lock_init_recursive>
 8004e9c:	bd10      	pop	{r4, pc}
 8004e9e:	bf00      	nop
 8004ea0:	0800500d 	.word	0x0800500d
 8004ea4:	0800502f 	.word	0x0800502f
 8004ea8:	08005067 	.word	0x08005067
 8004eac:	0800508b 	.word	0x0800508b
 8004eb0:	2000030c 	.word	0x2000030c

08004eb4 <stdio_exit_handler>:
 8004eb4:	4a02      	ldr	r2, [pc, #8]	@ (8004ec0 <stdio_exit_handler+0xc>)
 8004eb6:	4903      	ldr	r1, [pc, #12]	@ (8004ec4 <stdio_exit_handler+0x10>)
 8004eb8:	4803      	ldr	r0, [pc, #12]	@ (8004ec8 <stdio_exit_handler+0x14>)
 8004eba:	f000 b869 	b.w	8004f90 <_fwalk_sglue>
 8004ebe:	bf00      	nop
 8004ec0:	20000014 	.word	0x20000014
 8004ec4:	08006aed 	.word	0x08006aed
 8004ec8:	20000024 	.word	0x20000024

08004ecc <cleanup_stdio>:
 8004ecc:	6841      	ldr	r1, [r0, #4]
 8004ece:	4b0c      	ldr	r3, [pc, #48]	@ (8004f00 <cleanup_stdio+0x34>)
 8004ed0:	4299      	cmp	r1, r3
 8004ed2:	b510      	push	{r4, lr}
 8004ed4:	4604      	mov	r4, r0
 8004ed6:	d001      	beq.n	8004edc <cleanup_stdio+0x10>
 8004ed8:	f001 fe08 	bl	8006aec <_fflush_r>
 8004edc:	68a1      	ldr	r1, [r4, #8]
 8004ede:	4b09      	ldr	r3, [pc, #36]	@ (8004f04 <cleanup_stdio+0x38>)
 8004ee0:	4299      	cmp	r1, r3
 8004ee2:	d002      	beq.n	8004eea <cleanup_stdio+0x1e>
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f001 fe01 	bl	8006aec <_fflush_r>
 8004eea:	68e1      	ldr	r1, [r4, #12]
 8004eec:	4b06      	ldr	r3, [pc, #24]	@ (8004f08 <cleanup_stdio+0x3c>)
 8004eee:	4299      	cmp	r1, r3
 8004ef0:	d004      	beq.n	8004efc <cleanup_stdio+0x30>
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ef8:	f001 bdf8 	b.w	8006aec <_fflush_r>
 8004efc:	bd10      	pop	{r4, pc}
 8004efe:	bf00      	nop
 8004f00:	2000030c 	.word	0x2000030c
 8004f04:	20000374 	.word	0x20000374
 8004f08:	200003dc 	.word	0x200003dc

08004f0c <global_stdio_init.part.0>:
 8004f0c:	b510      	push	{r4, lr}
 8004f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f3c <global_stdio_init.part.0+0x30>)
 8004f10:	4c0b      	ldr	r4, [pc, #44]	@ (8004f40 <global_stdio_init.part.0+0x34>)
 8004f12:	4a0c      	ldr	r2, [pc, #48]	@ (8004f44 <global_stdio_init.part.0+0x38>)
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	4620      	mov	r0, r4
 8004f18:	2200      	movs	r2, #0
 8004f1a:	2104      	movs	r1, #4
 8004f1c:	f7ff ff94 	bl	8004e48 <std>
 8004f20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f24:	2201      	movs	r2, #1
 8004f26:	2109      	movs	r1, #9
 8004f28:	f7ff ff8e 	bl	8004e48 <std>
 8004f2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f30:	2202      	movs	r2, #2
 8004f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f36:	2112      	movs	r1, #18
 8004f38:	f7ff bf86 	b.w	8004e48 <std>
 8004f3c:	20000444 	.word	0x20000444
 8004f40:	2000030c 	.word	0x2000030c
 8004f44:	08004eb5 	.word	0x08004eb5

08004f48 <__sfp_lock_acquire>:
 8004f48:	4801      	ldr	r0, [pc, #4]	@ (8004f50 <__sfp_lock_acquire+0x8>)
 8004f4a:	f000 b920 	b.w	800518e <__retarget_lock_acquire_recursive>
 8004f4e:	bf00      	nop
 8004f50:	2000044d 	.word	0x2000044d

08004f54 <__sfp_lock_release>:
 8004f54:	4801      	ldr	r0, [pc, #4]	@ (8004f5c <__sfp_lock_release+0x8>)
 8004f56:	f000 b91b 	b.w	8005190 <__retarget_lock_release_recursive>
 8004f5a:	bf00      	nop
 8004f5c:	2000044d 	.word	0x2000044d

08004f60 <__sinit>:
 8004f60:	b510      	push	{r4, lr}
 8004f62:	4604      	mov	r4, r0
 8004f64:	f7ff fff0 	bl	8004f48 <__sfp_lock_acquire>
 8004f68:	6a23      	ldr	r3, [r4, #32]
 8004f6a:	b11b      	cbz	r3, 8004f74 <__sinit+0x14>
 8004f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f70:	f7ff bff0 	b.w	8004f54 <__sfp_lock_release>
 8004f74:	4b04      	ldr	r3, [pc, #16]	@ (8004f88 <__sinit+0x28>)
 8004f76:	6223      	str	r3, [r4, #32]
 8004f78:	4b04      	ldr	r3, [pc, #16]	@ (8004f8c <__sinit+0x2c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1f5      	bne.n	8004f6c <__sinit+0xc>
 8004f80:	f7ff ffc4 	bl	8004f0c <global_stdio_init.part.0>
 8004f84:	e7f2      	b.n	8004f6c <__sinit+0xc>
 8004f86:	bf00      	nop
 8004f88:	08004ecd 	.word	0x08004ecd
 8004f8c:	20000444 	.word	0x20000444

08004f90 <_fwalk_sglue>:
 8004f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f94:	4607      	mov	r7, r0
 8004f96:	4688      	mov	r8, r1
 8004f98:	4614      	mov	r4, r2
 8004f9a:	2600      	movs	r6, #0
 8004f9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fa0:	f1b9 0901 	subs.w	r9, r9, #1
 8004fa4:	d505      	bpl.n	8004fb2 <_fwalk_sglue+0x22>
 8004fa6:	6824      	ldr	r4, [r4, #0]
 8004fa8:	2c00      	cmp	r4, #0
 8004faa:	d1f7      	bne.n	8004f9c <_fwalk_sglue+0xc>
 8004fac:	4630      	mov	r0, r6
 8004fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fb2:	89ab      	ldrh	r3, [r5, #12]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d907      	bls.n	8004fc8 <_fwalk_sglue+0x38>
 8004fb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	d003      	beq.n	8004fc8 <_fwalk_sglue+0x38>
 8004fc0:	4629      	mov	r1, r5
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	47c0      	blx	r8
 8004fc6:	4306      	orrs	r6, r0
 8004fc8:	3568      	adds	r5, #104	@ 0x68
 8004fca:	e7e9      	b.n	8004fa0 <_fwalk_sglue+0x10>

08004fcc <siprintf>:
 8004fcc:	b40e      	push	{r1, r2, r3}
 8004fce:	b500      	push	{lr}
 8004fd0:	b09c      	sub	sp, #112	@ 0x70
 8004fd2:	ab1d      	add	r3, sp, #116	@ 0x74
 8004fd4:	9002      	str	r0, [sp, #8]
 8004fd6:	9006      	str	r0, [sp, #24]
 8004fd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004fdc:	4809      	ldr	r0, [pc, #36]	@ (8005004 <siprintf+0x38>)
 8004fde:	9107      	str	r1, [sp, #28]
 8004fe0:	9104      	str	r1, [sp, #16]
 8004fe2:	4909      	ldr	r1, [pc, #36]	@ (8005008 <siprintf+0x3c>)
 8004fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fe8:	9105      	str	r1, [sp, #20]
 8004fea:	6800      	ldr	r0, [r0, #0]
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	a902      	add	r1, sp, #8
 8004ff0:	f001 fbfc 	bl	80067ec <_svfiprintf_r>
 8004ff4:	9b02      	ldr	r3, [sp, #8]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	701a      	strb	r2, [r3, #0]
 8004ffa:	b01c      	add	sp, #112	@ 0x70
 8004ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005000:	b003      	add	sp, #12
 8005002:	4770      	bx	lr
 8005004:	20000020 	.word	0x20000020
 8005008:	ffff0208 	.word	0xffff0208

0800500c <__sread>:
 800500c:	b510      	push	{r4, lr}
 800500e:	460c      	mov	r4, r1
 8005010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005014:	f000 f86c 	bl	80050f0 <_read_r>
 8005018:	2800      	cmp	r0, #0
 800501a:	bfab      	itete	ge
 800501c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800501e:	89a3      	ldrhlt	r3, [r4, #12]
 8005020:	181b      	addge	r3, r3, r0
 8005022:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005026:	bfac      	ite	ge
 8005028:	6563      	strge	r3, [r4, #84]	@ 0x54
 800502a:	81a3      	strhlt	r3, [r4, #12]
 800502c:	bd10      	pop	{r4, pc}

0800502e <__swrite>:
 800502e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005032:	461f      	mov	r7, r3
 8005034:	898b      	ldrh	r3, [r1, #12]
 8005036:	05db      	lsls	r3, r3, #23
 8005038:	4605      	mov	r5, r0
 800503a:	460c      	mov	r4, r1
 800503c:	4616      	mov	r6, r2
 800503e:	d505      	bpl.n	800504c <__swrite+0x1e>
 8005040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005044:	2302      	movs	r3, #2
 8005046:	2200      	movs	r2, #0
 8005048:	f000 f840 	bl	80050cc <_lseek_r>
 800504c:	89a3      	ldrh	r3, [r4, #12]
 800504e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005052:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005056:	81a3      	strh	r3, [r4, #12]
 8005058:	4632      	mov	r2, r6
 800505a:	463b      	mov	r3, r7
 800505c:	4628      	mov	r0, r5
 800505e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005062:	f000 b857 	b.w	8005114 <_write_r>

08005066 <__sseek>:
 8005066:	b510      	push	{r4, lr}
 8005068:	460c      	mov	r4, r1
 800506a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800506e:	f000 f82d 	bl	80050cc <_lseek_r>
 8005072:	1c43      	adds	r3, r0, #1
 8005074:	89a3      	ldrh	r3, [r4, #12]
 8005076:	bf15      	itete	ne
 8005078:	6560      	strne	r0, [r4, #84]	@ 0x54
 800507a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800507e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005082:	81a3      	strheq	r3, [r4, #12]
 8005084:	bf18      	it	ne
 8005086:	81a3      	strhne	r3, [r4, #12]
 8005088:	bd10      	pop	{r4, pc}

0800508a <__sclose>:
 800508a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800508e:	f000 b80d 	b.w	80050ac <_close_r>

08005092 <memset>:
 8005092:	4402      	add	r2, r0
 8005094:	4603      	mov	r3, r0
 8005096:	4293      	cmp	r3, r2
 8005098:	d100      	bne.n	800509c <memset+0xa>
 800509a:	4770      	bx	lr
 800509c:	f803 1b01 	strb.w	r1, [r3], #1
 80050a0:	e7f9      	b.n	8005096 <memset+0x4>
	...

080050a4 <_localeconv_r>:
 80050a4:	4800      	ldr	r0, [pc, #0]	@ (80050a8 <_localeconv_r+0x4>)
 80050a6:	4770      	bx	lr
 80050a8:	20000160 	.word	0x20000160

080050ac <_close_r>:
 80050ac:	b538      	push	{r3, r4, r5, lr}
 80050ae:	4d06      	ldr	r5, [pc, #24]	@ (80050c8 <_close_r+0x1c>)
 80050b0:	2300      	movs	r3, #0
 80050b2:	4604      	mov	r4, r0
 80050b4:	4608      	mov	r0, r1
 80050b6:	602b      	str	r3, [r5, #0]
 80050b8:	f7fc fb5e 	bl	8001778 <_close>
 80050bc:	1c43      	adds	r3, r0, #1
 80050be:	d102      	bne.n	80050c6 <_close_r+0x1a>
 80050c0:	682b      	ldr	r3, [r5, #0]
 80050c2:	b103      	cbz	r3, 80050c6 <_close_r+0x1a>
 80050c4:	6023      	str	r3, [r4, #0]
 80050c6:	bd38      	pop	{r3, r4, r5, pc}
 80050c8:	20000448 	.word	0x20000448

080050cc <_lseek_r>:
 80050cc:	b538      	push	{r3, r4, r5, lr}
 80050ce:	4d07      	ldr	r5, [pc, #28]	@ (80050ec <_lseek_r+0x20>)
 80050d0:	4604      	mov	r4, r0
 80050d2:	4608      	mov	r0, r1
 80050d4:	4611      	mov	r1, r2
 80050d6:	2200      	movs	r2, #0
 80050d8:	602a      	str	r2, [r5, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	f7fc fb73 	bl	80017c6 <_lseek>
 80050e0:	1c43      	adds	r3, r0, #1
 80050e2:	d102      	bne.n	80050ea <_lseek_r+0x1e>
 80050e4:	682b      	ldr	r3, [r5, #0]
 80050e6:	b103      	cbz	r3, 80050ea <_lseek_r+0x1e>
 80050e8:	6023      	str	r3, [r4, #0]
 80050ea:	bd38      	pop	{r3, r4, r5, pc}
 80050ec:	20000448 	.word	0x20000448

080050f0 <_read_r>:
 80050f0:	b538      	push	{r3, r4, r5, lr}
 80050f2:	4d07      	ldr	r5, [pc, #28]	@ (8005110 <_read_r+0x20>)
 80050f4:	4604      	mov	r4, r0
 80050f6:	4608      	mov	r0, r1
 80050f8:	4611      	mov	r1, r2
 80050fa:	2200      	movs	r2, #0
 80050fc:	602a      	str	r2, [r5, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	f7fc fb01 	bl	8001706 <_read>
 8005104:	1c43      	adds	r3, r0, #1
 8005106:	d102      	bne.n	800510e <_read_r+0x1e>
 8005108:	682b      	ldr	r3, [r5, #0]
 800510a:	b103      	cbz	r3, 800510e <_read_r+0x1e>
 800510c:	6023      	str	r3, [r4, #0]
 800510e:	bd38      	pop	{r3, r4, r5, pc}
 8005110:	20000448 	.word	0x20000448

08005114 <_write_r>:
 8005114:	b538      	push	{r3, r4, r5, lr}
 8005116:	4d07      	ldr	r5, [pc, #28]	@ (8005134 <_write_r+0x20>)
 8005118:	4604      	mov	r4, r0
 800511a:	4608      	mov	r0, r1
 800511c:	4611      	mov	r1, r2
 800511e:	2200      	movs	r2, #0
 8005120:	602a      	str	r2, [r5, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	f7fc fb0c 	bl	8001740 <_write>
 8005128:	1c43      	adds	r3, r0, #1
 800512a:	d102      	bne.n	8005132 <_write_r+0x1e>
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	b103      	cbz	r3, 8005132 <_write_r+0x1e>
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	bd38      	pop	{r3, r4, r5, pc}
 8005134:	20000448 	.word	0x20000448

08005138 <__errno>:
 8005138:	4b01      	ldr	r3, [pc, #4]	@ (8005140 <__errno+0x8>)
 800513a:	6818      	ldr	r0, [r3, #0]
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	20000020 	.word	0x20000020

08005144 <__libc_init_array>:
 8005144:	b570      	push	{r4, r5, r6, lr}
 8005146:	4d0d      	ldr	r5, [pc, #52]	@ (800517c <__libc_init_array+0x38>)
 8005148:	4c0d      	ldr	r4, [pc, #52]	@ (8005180 <__libc_init_array+0x3c>)
 800514a:	1b64      	subs	r4, r4, r5
 800514c:	10a4      	asrs	r4, r4, #2
 800514e:	2600      	movs	r6, #0
 8005150:	42a6      	cmp	r6, r4
 8005152:	d109      	bne.n	8005168 <__libc_init_array+0x24>
 8005154:	4d0b      	ldr	r5, [pc, #44]	@ (8005184 <__libc_init_array+0x40>)
 8005156:	4c0c      	ldr	r4, [pc, #48]	@ (8005188 <__libc_init_array+0x44>)
 8005158:	f002 f866 	bl	8007228 <_init>
 800515c:	1b64      	subs	r4, r4, r5
 800515e:	10a4      	asrs	r4, r4, #2
 8005160:	2600      	movs	r6, #0
 8005162:	42a6      	cmp	r6, r4
 8005164:	d105      	bne.n	8005172 <__libc_init_array+0x2e>
 8005166:	bd70      	pop	{r4, r5, r6, pc}
 8005168:	f855 3b04 	ldr.w	r3, [r5], #4
 800516c:	4798      	blx	r3
 800516e:	3601      	adds	r6, #1
 8005170:	e7ee      	b.n	8005150 <__libc_init_array+0xc>
 8005172:	f855 3b04 	ldr.w	r3, [r5], #4
 8005176:	4798      	blx	r3
 8005178:	3601      	adds	r6, #1
 800517a:	e7f2      	b.n	8005162 <__libc_init_array+0x1e>
 800517c:	080075e0 	.word	0x080075e0
 8005180:	080075e0 	.word	0x080075e0
 8005184:	080075e0 	.word	0x080075e0
 8005188:	080075e4 	.word	0x080075e4

0800518c <__retarget_lock_init_recursive>:
 800518c:	4770      	bx	lr

0800518e <__retarget_lock_acquire_recursive>:
 800518e:	4770      	bx	lr

08005190 <__retarget_lock_release_recursive>:
 8005190:	4770      	bx	lr

08005192 <quorem>:
 8005192:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005196:	6903      	ldr	r3, [r0, #16]
 8005198:	690c      	ldr	r4, [r1, #16]
 800519a:	42a3      	cmp	r3, r4
 800519c:	4607      	mov	r7, r0
 800519e:	db7e      	blt.n	800529e <quorem+0x10c>
 80051a0:	3c01      	subs	r4, #1
 80051a2:	f101 0814 	add.w	r8, r1, #20
 80051a6:	00a3      	lsls	r3, r4, #2
 80051a8:	f100 0514 	add.w	r5, r0, #20
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051b2:	9301      	str	r3, [sp, #4]
 80051b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051bc:	3301      	adds	r3, #1
 80051be:	429a      	cmp	r2, r3
 80051c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80051c8:	d32e      	bcc.n	8005228 <quorem+0x96>
 80051ca:	f04f 0a00 	mov.w	sl, #0
 80051ce:	46c4      	mov	ip, r8
 80051d0:	46ae      	mov	lr, r5
 80051d2:	46d3      	mov	fp, sl
 80051d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80051d8:	b298      	uxth	r0, r3
 80051da:	fb06 a000 	mla	r0, r6, r0, sl
 80051de:	0c02      	lsrs	r2, r0, #16
 80051e0:	0c1b      	lsrs	r3, r3, #16
 80051e2:	fb06 2303 	mla	r3, r6, r3, r2
 80051e6:	f8de 2000 	ldr.w	r2, [lr]
 80051ea:	b280      	uxth	r0, r0
 80051ec:	b292      	uxth	r2, r2
 80051ee:	1a12      	subs	r2, r2, r0
 80051f0:	445a      	add	r2, fp
 80051f2:	f8de 0000 	ldr.w	r0, [lr]
 80051f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005200:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005204:	b292      	uxth	r2, r2
 8005206:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800520a:	45e1      	cmp	r9, ip
 800520c:	f84e 2b04 	str.w	r2, [lr], #4
 8005210:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005214:	d2de      	bcs.n	80051d4 <quorem+0x42>
 8005216:	9b00      	ldr	r3, [sp, #0]
 8005218:	58eb      	ldr	r3, [r5, r3]
 800521a:	b92b      	cbnz	r3, 8005228 <quorem+0x96>
 800521c:	9b01      	ldr	r3, [sp, #4]
 800521e:	3b04      	subs	r3, #4
 8005220:	429d      	cmp	r5, r3
 8005222:	461a      	mov	r2, r3
 8005224:	d32f      	bcc.n	8005286 <quorem+0xf4>
 8005226:	613c      	str	r4, [r7, #16]
 8005228:	4638      	mov	r0, r7
 800522a:	f001 f97b 	bl	8006524 <__mcmp>
 800522e:	2800      	cmp	r0, #0
 8005230:	db25      	blt.n	800527e <quorem+0xec>
 8005232:	4629      	mov	r1, r5
 8005234:	2000      	movs	r0, #0
 8005236:	f858 2b04 	ldr.w	r2, [r8], #4
 800523a:	f8d1 c000 	ldr.w	ip, [r1]
 800523e:	fa1f fe82 	uxth.w	lr, r2
 8005242:	fa1f f38c 	uxth.w	r3, ip
 8005246:	eba3 030e 	sub.w	r3, r3, lr
 800524a:	4403      	add	r3, r0
 800524c:	0c12      	lsrs	r2, r2, #16
 800524e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005252:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005256:	b29b      	uxth	r3, r3
 8005258:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800525c:	45c1      	cmp	r9, r8
 800525e:	f841 3b04 	str.w	r3, [r1], #4
 8005262:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005266:	d2e6      	bcs.n	8005236 <quorem+0xa4>
 8005268:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800526c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005270:	b922      	cbnz	r2, 800527c <quorem+0xea>
 8005272:	3b04      	subs	r3, #4
 8005274:	429d      	cmp	r5, r3
 8005276:	461a      	mov	r2, r3
 8005278:	d30b      	bcc.n	8005292 <quorem+0x100>
 800527a:	613c      	str	r4, [r7, #16]
 800527c:	3601      	adds	r6, #1
 800527e:	4630      	mov	r0, r6
 8005280:	b003      	add	sp, #12
 8005282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005286:	6812      	ldr	r2, [r2, #0]
 8005288:	3b04      	subs	r3, #4
 800528a:	2a00      	cmp	r2, #0
 800528c:	d1cb      	bne.n	8005226 <quorem+0x94>
 800528e:	3c01      	subs	r4, #1
 8005290:	e7c6      	b.n	8005220 <quorem+0x8e>
 8005292:	6812      	ldr	r2, [r2, #0]
 8005294:	3b04      	subs	r3, #4
 8005296:	2a00      	cmp	r2, #0
 8005298:	d1ef      	bne.n	800527a <quorem+0xe8>
 800529a:	3c01      	subs	r4, #1
 800529c:	e7ea      	b.n	8005274 <quorem+0xe2>
 800529e:	2000      	movs	r0, #0
 80052a0:	e7ee      	b.n	8005280 <quorem+0xee>
 80052a2:	0000      	movs	r0, r0
 80052a4:	0000      	movs	r0, r0
	...

080052a8 <_dtoa_r>:
 80052a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ac:	69c7      	ldr	r7, [r0, #28]
 80052ae:	b099      	sub	sp, #100	@ 0x64
 80052b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80052b4:	ec55 4b10 	vmov	r4, r5, d0
 80052b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80052ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80052bc:	4683      	mov	fp, r0
 80052be:	920e      	str	r2, [sp, #56]	@ 0x38
 80052c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80052c2:	b97f      	cbnz	r7, 80052e4 <_dtoa_r+0x3c>
 80052c4:	2010      	movs	r0, #16
 80052c6:	f000 fdfd 	bl	8005ec4 <malloc>
 80052ca:	4602      	mov	r2, r0
 80052cc:	f8cb 001c 	str.w	r0, [fp, #28]
 80052d0:	b920      	cbnz	r0, 80052dc <_dtoa_r+0x34>
 80052d2:	4ba7      	ldr	r3, [pc, #668]	@ (8005570 <_dtoa_r+0x2c8>)
 80052d4:	21ef      	movs	r1, #239	@ 0xef
 80052d6:	48a7      	ldr	r0, [pc, #668]	@ (8005574 <_dtoa_r+0x2cc>)
 80052d8:	f001 fc68 	bl	8006bac <__assert_func>
 80052dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80052e0:	6007      	str	r7, [r0, #0]
 80052e2:	60c7      	str	r7, [r0, #12]
 80052e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80052e8:	6819      	ldr	r1, [r3, #0]
 80052ea:	b159      	cbz	r1, 8005304 <_dtoa_r+0x5c>
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	604a      	str	r2, [r1, #4]
 80052f0:	2301      	movs	r3, #1
 80052f2:	4093      	lsls	r3, r2
 80052f4:	608b      	str	r3, [r1, #8]
 80052f6:	4658      	mov	r0, fp
 80052f8:	f000 feda 	bl	80060b0 <_Bfree>
 80052fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	1e2b      	subs	r3, r5, #0
 8005306:	bfb9      	ittee	lt
 8005308:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800530c:	9303      	strlt	r3, [sp, #12]
 800530e:	2300      	movge	r3, #0
 8005310:	6033      	strge	r3, [r6, #0]
 8005312:	9f03      	ldr	r7, [sp, #12]
 8005314:	4b98      	ldr	r3, [pc, #608]	@ (8005578 <_dtoa_r+0x2d0>)
 8005316:	bfbc      	itt	lt
 8005318:	2201      	movlt	r2, #1
 800531a:	6032      	strlt	r2, [r6, #0]
 800531c:	43bb      	bics	r3, r7
 800531e:	d112      	bne.n	8005346 <_dtoa_r+0x9e>
 8005320:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005322:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800532c:	4323      	orrs	r3, r4
 800532e:	f000 854d 	beq.w	8005dcc <_dtoa_r+0xb24>
 8005332:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005334:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800558c <_dtoa_r+0x2e4>
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 854f 	beq.w	8005ddc <_dtoa_r+0xb34>
 800533e:	f10a 0303 	add.w	r3, sl, #3
 8005342:	f000 bd49 	b.w	8005dd8 <_dtoa_r+0xb30>
 8005346:	ed9d 7b02 	vldr	d7, [sp, #8]
 800534a:	2200      	movs	r2, #0
 800534c:	ec51 0b17 	vmov	r0, r1, d7
 8005350:	2300      	movs	r3, #0
 8005352:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005356:	f7fb fbb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800535a:	4680      	mov	r8, r0
 800535c:	b158      	cbz	r0, 8005376 <_dtoa_r+0xce>
 800535e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005360:	2301      	movs	r3, #1
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005366:	b113      	cbz	r3, 800536e <_dtoa_r+0xc6>
 8005368:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800536a:	4b84      	ldr	r3, [pc, #528]	@ (800557c <_dtoa_r+0x2d4>)
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005590 <_dtoa_r+0x2e8>
 8005372:	f000 bd33 	b.w	8005ddc <_dtoa_r+0xb34>
 8005376:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800537a:	aa16      	add	r2, sp, #88	@ 0x58
 800537c:	a917      	add	r1, sp, #92	@ 0x5c
 800537e:	4658      	mov	r0, fp
 8005380:	f001 f980 	bl	8006684 <__d2b>
 8005384:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005388:	4681      	mov	r9, r0
 800538a:	2e00      	cmp	r6, #0
 800538c:	d077      	beq.n	800547e <_dtoa_r+0x1d6>
 800538e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005390:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800539c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80053a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80053a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80053a8:	4619      	mov	r1, r3
 80053aa:	2200      	movs	r2, #0
 80053ac:	4b74      	ldr	r3, [pc, #464]	@ (8005580 <_dtoa_r+0x2d8>)
 80053ae:	f7fa ff6b 	bl	8000288 <__aeabi_dsub>
 80053b2:	a369      	add	r3, pc, #420	@ (adr r3, 8005558 <_dtoa_r+0x2b0>)
 80053b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b8:	f7fb f91e 	bl	80005f8 <__aeabi_dmul>
 80053bc:	a368      	add	r3, pc, #416	@ (adr r3, 8005560 <_dtoa_r+0x2b8>)
 80053be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c2:	f7fa ff63 	bl	800028c <__adddf3>
 80053c6:	4604      	mov	r4, r0
 80053c8:	4630      	mov	r0, r6
 80053ca:	460d      	mov	r5, r1
 80053cc:	f7fb f8aa 	bl	8000524 <__aeabi_i2d>
 80053d0:	a365      	add	r3, pc, #404	@ (adr r3, 8005568 <_dtoa_r+0x2c0>)
 80053d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d6:	f7fb f90f 	bl	80005f8 <__aeabi_dmul>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4620      	mov	r0, r4
 80053e0:	4629      	mov	r1, r5
 80053e2:	f7fa ff53 	bl	800028c <__adddf3>
 80053e6:	4604      	mov	r4, r0
 80053e8:	460d      	mov	r5, r1
 80053ea:	f7fb fbb5 	bl	8000b58 <__aeabi_d2iz>
 80053ee:	2200      	movs	r2, #0
 80053f0:	4607      	mov	r7, r0
 80053f2:	2300      	movs	r3, #0
 80053f4:	4620      	mov	r0, r4
 80053f6:	4629      	mov	r1, r5
 80053f8:	f7fb fb70 	bl	8000adc <__aeabi_dcmplt>
 80053fc:	b140      	cbz	r0, 8005410 <_dtoa_r+0x168>
 80053fe:	4638      	mov	r0, r7
 8005400:	f7fb f890 	bl	8000524 <__aeabi_i2d>
 8005404:	4622      	mov	r2, r4
 8005406:	462b      	mov	r3, r5
 8005408:	f7fb fb5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800540c:	b900      	cbnz	r0, 8005410 <_dtoa_r+0x168>
 800540e:	3f01      	subs	r7, #1
 8005410:	2f16      	cmp	r7, #22
 8005412:	d851      	bhi.n	80054b8 <_dtoa_r+0x210>
 8005414:	4b5b      	ldr	r3, [pc, #364]	@ (8005584 <_dtoa_r+0x2dc>)
 8005416:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005422:	f7fb fb5b 	bl	8000adc <__aeabi_dcmplt>
 8005426:	2800      	cmp	r0, #0
 8005428:	d048      	beq.n	80054bc <_dtoa_r+0x214>
 800542a:	3f01      	subs	r7, #1
 800542c:	2300      	movs	r3, #0
 800542e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005430:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005432:	1b9b      	subs	r3, r3, r6
 8005434:	1e5a      	subs	r2, r3, #1
 8005436:	bf44      	itt	mi
 8005438:	f1c3 0801 	rsbmi	r8, r3, #1
 800543c:	2300      	movmi	r3, #0
 800543e:	9208      	str	r2, [sp, #32]
 8005440:	bf54      	ite	pl
 8005442:	f04f 0800 	movpl.w	r8, #0
 8005446:	9308      	strmi	r3, [sp, #32]
 8005448:	2f00      	cmp	r7, #0
 800544a:	db39      	blt.n	80054c0 <_dtoa_r+0x218>
 800544c:	9b08      	ldr	r3, [sp, #32]
 800544e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005450:	443b      	add	r3, r7
 8005452:	9308      	str	r3, [sp, #32]
 8005454:	2300      	movs	r3, #0
 8005456:	930a      	str	r3, [sp, #40]	@ 0x28
 8005458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800545a:	2b09      	cmp	r3, #9
 800545c:	d864      	bhi.n	8005528 <_dtoa_r+0x280>
 800545e:	2b05      	cmp	r3, #5
 8005460:	bfc4      	itt	gt
 8005462:	3b04      	subgt	r3, #4
 8005464:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005468:	f1a3 0302 	sub.w	r3, r3, #2
 800546c:	bfcc      	ite	gt
 800546e:	2400      	movgt	r4, #0
 8005470:	2401      	movle	r4, #1
 8005472:	2b03      	cmp	r3, #3
 8005474:	d863      	bhi.n	800553e <_dtoa_r+0x296>
 8005476:	e8df f003 	tbb	[pc, r3]
 800547a:	372a      	.short	0x372a
 800547c:	5535      	.short	0x5535
 800547e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005482:	441e      	add	r6, r3
 8005484:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005488:	2b20      	cmp	r3, #32
 800548a:	bfc1      	itttt	gt
 800548c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005490:	409f      	lslgt	r7, r3
 8005492:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005496:	fa24 f303 	lsrgt.w	r3, r4, r3
 800549a:	bfd6      	itet	le
 800549c:	f1c3 0320 	rsble	r3, r3, #32
 80054a0:	ea47 0003 	orrgt.w	r0, r7, r3
 80054a4:	fa04 f003 	lslle.w	r0, r4, r3
 80054a8:	f7fb f82c 	bl	8000504 <__aeabi_ui2d>
 80054ac:	2201      	movs	r2, #1
 80054ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80054b2:	3e01      	subs	r6, #1
 80054b4:	9214      	str	r2, [sp, #80]	@ 0x50
 80054b6:	e777      	b.n	80053a8 <_dtoa_r+0x100>
 80054b8:	2301      	movs	r3, #1
 80054ba:	e7b8      	b.n	800542e <_dtoa_r+0x186>
 80054bc:	9012      	str	r0, [sp, #72]	@ 0x48
 80054be:	e7b7      	b.n	8005430 <_dtoa_r+0x188>
 80054c0:	427b      	negs	r3, r7
 80054c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80054c4:	2300      	movs	r3, #0
 80054c6:	eba8 0807 	sub.w	r8, r8, r7
 80054ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80054cc:	e7c4      	b.n	8005458 <_dtoa_r+0x1b0>
 80054ce:	2300      	movs	r3, #0
 80054d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	dc35      	bgt.n	8005544 <_dtoa_r+0x29c>
 80054d8:	2301      	movs	r3, #1
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	9307      	str	r3, [sp, #28]
 80054de:	461a      	mov	r2, r3
 80054e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80054e2:	e00b      	b.n	80054fc <_dtoa_r+0x254>
 80054e4:	2301      	movs	r3, #1
 80054e6:	e7f3      	b.n	80054d0 <_dtoa_r+0x228>
 80054e8:	2300      	movs	r3, #0
 80054ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054ee:	18fb      	adds	r3, r7, r3
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	3301      	adds	r3, #1
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	9307      	str	r3, [sp, #28]
 80054f8:	bfb8      	it	lt
 80054fa:	2301      	movlt	r3, #1
 80054fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005500:	2100      	movs	r1, #0
 8005502:	2204      	movs	r2, #4
 8005504:	f102 0514 	add.w	r5, r2, #20
 8005508:	429d      	cmp	r5, r3
 800550a:	d91f      	bls.n	800554c <_dtoa_r+0x2a4>
 800550c:	6041      	str	r1, [r0, #4]
 800550e:	4658      	mov	r0, fp
 8005510:	f000 fd8e 	bl	8006030 <_Balloc>
 8005514:	4682      	mov	sl, r0
 8005516:	2800      	cmp	r0, #0
 8005518:	d13c      	bne.n	8005594 <_dtoa_r+0x2ec>
 800551a:	4b1b      	ldr	r3, [pc, #108]	@ (8005588 <_dtoa_r+0x2e0>)
 800551c:	4602      	mov	r2, r0
 800551e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005522:	e6d8      	b.n	80052d6 <_dtoa_r+0x2e>
 8005524:	2301      	movs	r3, #1
 8005526:	e7e0      	b.n	80054ea <_dtoa_r+0x242>
 8005528:	2401      	movs	r4, #1
 800552a:	2300      	movs	r3, #0
 800552c:	9309      	str	r3, [sp, #36]	@ 0x24
 800552e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005530:	f04f 33ff 	mov.w	r3, #4294967295
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	9307      	str	r3, [sp, #28]
 8005538:	2200      	movs	r2, #0
 800553a:	2312      	movs	r3, #18
 800553c:	e7d0      	b.n	80054e0 <_dtoa_r+0x238>
 800553e:	2301      	movs	r3, #1
 8005540:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005542:	e7f5      	b.n	8005530 <_dtoa_r+0x288>
 8005544:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	9307      	str	r3, [sp, #28]
 800554a:	e7d7      	b.n	80054fc <_dtoa_r+0x254>
 800554c:	3101      	adds	r1, #1
 800554e:	0052      	lsls	r2, r2, #1
 8005550:	e7d8      	b.n	8005504 <_dtoa_r+0x25c>
 8005552:	bf00      	nop
 8005554:	f3af 8000 	nop.w
 8005558:	636f4361 	.word	0x636f4361
 800555c:	3fd287a7 	.word	0x3fd287a7
 8005560:	8b60c8b3 	.word	0x8b60c8b3
 8005564:	3fc68a28 	.word	0x3fc68a28
 8005568:	509f79fb 	.word	0x509f79fb
 800556c:	3fd34413 	.word	0x3fd34413
 8005570:	080072a5 	.word	0x080072a5
 8005574:	080072bc 	.word	0x080072bc
 8005578:	7ff00000 	.word	0x7ff00000
 800557c:	08007275 	.word	0x08007275
 8005580:	3ff80000 	.word	0x3ff80000
 8005584:	080073b8 	.word	0x080073b8
 8005588:	08007314 	.word	0x08007314
 800558c:	080072a1 	.word	0x080072a1
 8005590:	08007274 	.word	0x08007274
 8005594:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005598:	6018      	str	r0, [r3, #0]
 800559a:	9b07      	ldr	r3, [sp, #28]
 800559c:	2b0e      	cmp	r3, #14
 800559e:	f200 80a4 	bhi.w	80056ea <_dtoa_r+0x442>
 80055a2:	2c00      	cmp	r4, #0
 80055a4:	f000 80a1 	beq.w	80056ea <_dtoa_r+0x442>
 80055a8:	2f00      	cmp	r7, #0
 80055aa:	dd33      	ble.n	8005614 <_dtoa_r+0x36c>
 80055ac:	4bad      	ldr	r3, [pc, #692]	@ (8005864 <_dtoa_r+0x5bc>)
 80055ae:	f007 020f 	and.w	r2, r7, #15
 80055b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055b6:	ed93 7b00 	vldr	d7, [r3]
 80055ba:	05f8      	lsls	r0, r7, #23
 80055bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80055c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80055c4:	d516      	bpl.n	80055f4 <_dtoa_r+0x34c>
 80055c6:	4ba8      	ldr	r3, [pc, #672]	@ (8005868 <_dtoa_r+0x5c0>)
 80055c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80055cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055d0:	f7fb f93c 	bl	800084c <__aeabi_ddiv>
 80055d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055d8:	f004 040f 	and.w	r4, r4, #15
 80055dc:	2603      	movs	r6, #3
 80055de:	4da2      	ldr	r5, [pc, #648]	@ (8005868 <_dtoa_r+0x5c0>)
 80055e0:	b954      	cbnz	r4, 80055f8 <_dtoa_r+0x350>
 80055e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055ea:	f7fb f92f 	bl	800084c <__aeabi_ddiv>
 80055ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055f2:	e028      	b.n	8005646 <_dtoa_r+0x39e>
 80055f4:	2602      	movs	r6, #2
 80055f6:	e7f2      	b.n	80055de <_dtoa_r+0x336>
 80055f8:	07e1      	lsls	r1, r4, #31
 80055fa:	d508      	bpl.n	800560e <_dtoa_r+0x366>
 80055fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005600:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005604:	f7fa fff8 	bl	80005f8 <__aeabi_dmul>
 8005608:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800560c:	3601      	adds	r6, #1
 800560e:	1064      	asrs	r4, r4, #1
 8005610:	3508      	adds	r5, #8
 8005612:	e7e5      	b.n	80055e0 <_dtoa_r+0x338>
 8005614:	f000 80d2 	beq.w	80057bc <_dtoa_r+0x514>
 8005618:	427c      	negs	r4, r7
 800561a:	4b92      	ldr	r3, [pc, #584]	@ (8005864 <_dtoa_r+0x5bc>)
 800561c:	4d92      	ldr	r5, [pc, #584]	@ (8005868 <_dtoa_r+0x5c0>)
 800561e:	f004 020f 	and.w	r2, r4, #15
 8005622:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800562e:	f7fa ffe3 	bl	80005f8 <__aeabi_dmul>
 8005632:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005636:	1124      	asrs	r4, r4, #4
 8005638:	2300      	movs	r3, #0
 800563a:	2602      	movs	r6, #2
 800563c:	2c00      	cmp	r4, #0
 800563e:	f040 80b2 	bne.w	80057a6 <_dtoa_r+0x4fe>
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1d3      	bne.n	80055ee <_dtoa_r+0x346>
 8005646:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005648:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 80b7 	beq.w	80057c0 <_dtoa_r+0x518>
 8005652:	4b86      	ldr	r3, [pc, #536]	@ (800586c <_dtoa_r+0x5c4>)
 8005654:	2200      	movs	r2, #0
 8005656:	4620      	mov	r0, r4
 8005658:	4629      	mov	r1, r5
 800565a:	f7fb fa3f 	bl	8000adc <__aeabi_dcmplt>
 800565e:	2800      	cmp	r0, #0
 8005660:	f000 80ae 	beq.w	80057c0 <_dtoa_r+0x518>
 8005664:	9b07      	ldr	r3, [sp, #28]
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 80aa 	beq.w	80057c0 <_dtoa_r+0x518>
 800566c:	9b00      	ldr	r3, [sp, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	dd37      	ble.n	80056e2 <_dtoa_r+0x43a>
 8005672:	1e7b      	subs	r3, r7, #1
 8005674:	9304      	str	r3, [sp, #16]
 8005676:	4620      	mov	r0, r4
 8005678:	4b7d      	ldr	r3, [pc, #500]	@ (8005870 <_dtoa_r+0x5c8>)
 800567a:	2200      	movs	r2, #0
 800567c:	4629      	mov	r1, r5
 800567e:	f7fa ffbb 	bl	80005f8 <__aeabi_dmul>
 8005682:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005686:	9c00      	ldr	r4, [sp, #0]
 8005688:	3601      	adds	r6, #1
 800568a:	4630      	mov	r0, r6
 800568c:	f7fa ff4a 	bl	8000524 <__aeabi_i2d>
 8005690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005694:	f7fa ffb0 	bl	80005f8 <__aeabi_dmul>
 8005698:	4b76      	ldr	r3, [pc, #472]	@ (8005874 <_dtoa_r+0x5cc>)
 800569a:	2200      	movs	r2, #0
 800569c:	f7fa fdf6 	bl	800028c <__adddf3>
 80056a0:	4605      	mov	r5, r0
 80056a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80056a6:	2c00      	cmp	r4, #0
 80056a8:	f040 808d 	bne.w	80057c6 <_dtoa_r+0x51e>
 80056ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056b0:	4b71      	ldr	r3, [pc, #452]	@ (8005878 <_dtoa_r+0x5d0>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	f7fa fde8 	bl	8000288 <__aeabi_dsub>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80056c0:	462a      	mov	r2, r5
 80056c2:	4633      	mov	r3, r6
 80056c4:	f7fb fa28 	bl	8000b18 <__aeabi_dcmpgt>
 80056c8:	2800      	cmp	r0, #0
 80056ca:	f040 828b 	bne.w	8005be4 <_dtoa_r+0x93c>
 80056ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056d2:	462a      	mov	r2, r5
 80056d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80056d8:	f7fb fa00 	bl	8000adc <__aeabi_dcmplt>
 80056dc:	2800      	cmp	r0, #0
 80056de:	f040 8128 	bne.w	8005932 <_dtoa_r+0x68a>
 80056e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80056e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80056ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f2c0 815a 	blt.w	80059a6 <_dtoa_r+0x6fe>
 80056f2:	2f0e      	cmp	r7, #14
 80056f4:	f300 8157 	bgt.w	80059a6 <_dtoa_r+0x6fe>
 80056f8:	4b5a      	ldr	r3, [pc, #360]	@ (8005864 <_dtoa_r+0x5bc>)
 80056fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80056fe:	ed93 7b00 	vldr	d7, [r3]
 8005702:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005704:	2b00      	cmp	r3, #0
 8005706:	ed8d 7b00 	vstr	d7, [sp]
 800570a:	da03      	bge.n	8005714 <_dtoa_r+0x46c>
 800570c:	9b07      	ldr	r3, [sp, #28]
 800570e:	2b00      	cmp	r3, #0
 8005710:	f340 8101 	ble.w	8005916 <_dtoa_r+0x66e>
 8005714:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005718:	4656      	mov	r6, sl
 800571a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800571e:	4620      	mov	r0, r4
 8005720:	4629      	mov	r1, r5
 8005722:	f7fb f893 	bl	800084c <__aeabi_ddiv>
 8005726:	f7fb fa17 	bl	8000b58 <__aeabi_d2iz>
 800572a:	4680      	mov	r8, r0
 800572c:	f7fa fefa 	bl	8000524 <__aeabi_i2d>
 8005730:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005734:	f7fa ff60 	bl	80005f8 <__aeabi_dmul>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	4620      	mov	r0, r4
 800573e:	4629      	mov	r1, r5
 8005740:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005744:	f7fa fda0 	bl	8000288 <__aeabi_dsub>
 8005748:	f806 4b01 	strb.w	r4, [r6], #1
 800574c:	9d07      	ldr	r5, [sp, #28]
 800574e:	eba6 040a 	sub.w	r4, r6, sl
 8005752:	42a5      	cmp	r5, r4
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	f040 8117 	bne.w	800598a <_dtoa_r+0x6e2>
 800575c:	f7fa fd96 	bl	800028c <__adddf3>
 8005760:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005764:	4604      	mov	r4, r0
 8005766:	460d      	mov	r5, r1
 8005768:	f7fb f9d6 	bl	8000b18 <__aeabi_dcmpgt>
 800576c:	2800      	cmp	r0, #0
 800576e:	f040 80f9 	bne.w	8005964 <_dtoa_r+0x6bc>
 8005772:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005776:	4620      	mov	r0, r4
 8005778:	4629      	mov	r1, r5
 800577a:	f7fb f9a5 	bl	8000ac8 <__aeabi_dcmpeq>
 800577e:	b118      	cbz	r0, 8005788 <_dtoa_r+0x4e0>
 8005780:	f018 0f01 	tst.w	r8, #1
 8005784:	f040 80ee 	bne.w	8005964 <_dtoa_r+0x6bc>
 8005788:	4649      	mov	r1, r9
 800578a:	4658      	mov	r0, fp
 800578c:	f000 fc90 	bl	80060b0 <_Bfree>
 8005790:	2300      	movs	r3, #0
 8005792:	7033      	strb	r3, [r6, #0]
 8005794:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005796:	3701      	adds	r7, #1
 8005798:	601f      	str	r7, [r3, #0]
 800579a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 831d 	beq.w	8005ddc <_dtoa_r+0xb34>
 80057a2:	601e      	str	r6, [r3, #0]
 80057a4:	e31a      	b.n	8005ddc <_dtoa_r+0xb34>
 80057a6:	07e2      	lsls	r2, r4, #31
 80057a8:	d505      	bpl.n	80057b6 <_dtoa_r+0x50e>
 80057aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80057ae:	f7fa ff23 	bl	80005f8 <__aeabi_dmul>
 80057b2:	3601      	adds	r6, #1
 80057b4:	2301      	movs	r3, #1
 80057b6:	1064      	asrs	r4, r4, #1
 80057b8:	3508      	adds	r5, #8
 80057ba:	e73f      	b.n	800563c <_dtoa_r+0x394>
 80057bc:	2602      	movs	r6, #2
 80057be:	e742      	b.n	8005646 <_dtoa_r+0x39e>
 80057c0:	9c07      	ldr	r4, [sp, #28]
 80057c2:	9704      	str	r7, [sp, #16]
 80057c4:	e761      	b.n	800568a <_dtoa_r+0x3e2>
 80057c6:	4b27      	ldr	r3, [pc, #156]	@ (8005864 <_dtoa_r+0x5bc>)
 80057c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80057ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80057ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80057d2:	4454      	add	r4, sl
 80057d4:	2900      	cmp	r1, #0
 80057d6:	d053      	beq.n	8005880 <_dtoa_r+0x5d8>
 80057d8:	4928      	ldr	r1, [pc, #160]	@ (800587c <_dtoa_r+0x5d4>)
 80057da:	2000      	movs	r0, #0
 80057dc:	f7fb f836 	bl	800084c <__aeabi_ddiv>
 80057e0:	4633      	mov	r3, r6
 80057e2:	462a      	mov	r2, r5
 80057e4:	f7fa fd50 	bl	8000288 <__aeabi_dsub>
 80057e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80057ec:	4656      	mov	r6, sl
 80057ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057f2:	f7fb f9b1 	bl	8000b58 <__aeabi_d2iz>
 80057f6:	4605      	mov	r5, r0
 80057f8:	f7fa fe94 	bl	8000524 <__aeabi_i2d>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005804:	f7fa fd40 	bl	8000288 <__aeabi_dsub>
 8005808:	3530      	adds	r5, #48	@ 0x30
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005812:	f806 5b01 	strb.w	r5, [r6], #1
 8005816:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800581a:	f7fb f95f 	bl	8000adc <__aeabi_dcmplt>
 800581e:	2800      	cmp	r0, #0
 8005820:	d171      	bne.n	8005906 <_dtoa_r+0x65e>
 8005822:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005826:	4911      	ldr	r1, [pc, #68]	@ (800586c <_dtoa_r+0x5c4>)
 8005828:	2000      	movs	r0, #0
 800582a:	f7fa fd2d 	bl	8000288 <__aeabi_dsub>
 800582e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005832:	f7fb f953 	bl	8000adc <__aeabi_dcmplt>
 8005836:	2800      	cmp	r0, #0
 8005838:	f040 8095 	bne.w	8005966 <_dtoa_r+0x6be>
 800583c:	42a6      	cmp	r6, r4
 800583e:	f43f af50 	beq.w	80056e2 <_dtoa_r+0x43a>
 8005842:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005846:	4b0a      	ldr	r3, [pc, #40]	@ (8005870 <_dtoa_r+0x5c8>)
 8005848:	2200      	movs	r2, #0
 800584a:	f7fa fed5 	bl	80005f8 <__aeabi_dmul>
 800584e:	4b08      	ldr	r3, [pc, #32]	@ (8005870 <_dtoa_r+0x5c8>)
 8005850:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005854:	2200      	movs	r2, #0
 8005856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800585a:	f7fa fecd 	bl	80005f8 <__aeabi_dmul>
 800585e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005862:	e7c4      	b.n	80057ee <_dtoa_r+0x546>
 8005864:	080073b8 	.word	0x080073b8
 8005868:	08007390 	.word	0x08007390
 800586c:	3ff00000 	.word	0x3ff00000
 8005870:	40240000 	.word	0x40240000
 8005874:	401c0000 	.word	0x401c0000
 8005878:	40140000 	.word	0x40140000
 800587c:	3fe00000 	.word	0x3fe00000
 8005880:	4631      	mov	r1, r6
 8005882:	4628      	mov	r0, r5
 8005884:	f7fa feb8 	bl	80005f8 <__aeabi_dmul>
 8005888:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800588c:	9415      	str	r4, [sp, #84]	@ 0x54
 800588e:	4656      	mov	r6, sl
 8005890:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005894:	f7fb f960 	bl	8000b58 <__aeabi_d2iz>
 8005898:	4605      	mov	r5, r0
 800589a:	f7fa fe43 	bl	8000524 <__aeabi_i2d>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058a6:	f7fa fcef 	bl	8000288 <__aeabi_dsub>
 80058aa:	3530      	adds	r5, #48	@ 0x30
 80058ac:	f806 5b01 	strb.w	r5, [r6], #1
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	42a6      	cmp	r6, r4
 80058b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80058ba:	f04f 0200 	mov.w	r2, #0
 80058be:	d124      	bne.n	800590a <_dtoa_r+0x662>
 80058c0:	4bac      	ldr	r3, [pc, #688]	@ (8005b74 <_dtoa_r+0x8cc>)
 80058c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80058c6:	f7fa fce1 	bl	800028c <__adddf3>
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058d2:	f7fb f921 	bl	8000b18 <__aeabi_dcmpgt>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d145      	bne.n	8005966 <_dtoa_r+0x6be>
 80058da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80058de:	49a5      	ldr	r1, [pc, #660]	@ (8005b74 <_dtoa_r+0x8cc>)
 80058e0:	2000      	movs	r0, #0
 80058e2:	f7fa fcd1 	bl	8000288 <__aeabi_dsub>
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ee:	f7fb f8f5 	bl	8000adc <__aeabi_dcmplt>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	f43f aef5 	beq.w	80056e2 <_dtoa_r+0x43a>
 80058f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80058fa:	1e73      	subs	r3, r6, #1
 80058fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80058fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005902:	2b30      	cmp	r3, #48	@ 0x30
 8005904:	d0f8      	beq.n	80058f8 <_dtoa_r+0x650>
 8005906:	9f04      	ldr	r7, [sp, #16]
 8005908:	e73e      	b.n	8005788 <_dtoa_r+0x4e0>
 800590a:	4b9b      	ldr	r3, [pc, #620]	@ (8005b78 <_dtoa_r+0x8d0>)
 800590c:	f7fa fe74 	bl	80005f8 <__aeabi_dmul>
 8005910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005914:	e7bc      	b.n	8005890 <_dtoa_r+0x5e8>
 8005916:	d10c      	bne.n	8005932 <_dtoa_r+0x68a>
 8005918:	4b98      	ldr	r3, [pc, #608]	@ (8005b7c <_dtoa_r+0x8d4>)
 800591a:	2200      	movs	r2, #0
 800591c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005920:	f7fa fe6a 	bl	80005f8 <__aeabi_dmul>
 8005924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005928:	f7fb f8ec 	bl	8000b04 <__aeabi_dcmpge>
 800592c:	2800      	cmp	r0, #0
 800592e:	f000 8157 	beq.w	8005be0 <_dtoa_r+0x938>
 8005932:	2400      	movs	r4, #0
 8005934:	4625      	mov	r5, r4
 8005936:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005938:	43db      	mvns	r3, r3
 800593a:	9304      	str	r3, [sp, #16]
 800593c:	4656      	mov	r6, sl
 800593e:	2700      	movs	r7, #0
 8005940:	4621      	mov	r1, r4
 8005942:	4658      	mov	r0, fp
 8005944:	f000 fbb4 	bl	80060b0 <_Bfree>
 8005948:	2d00      	cmp	r5, #0
 800594a:	d0dc      	beq.n	8005906 <_dtoa_r+0x65e>
 800594c:	b12f      	cbz	r7, 800595a <_dtoa_r+0x6b2>
 800594e:	42af      	cmp	r7, r5
 8005950:	d003      	beq.n	800595a <_dtoa_r+0x6b2>
 8005952:	4639      	mov	r1, r7
 8005954:	4658      	mov	r0, fp
 8005956:	f000 fbab 	bl	80060b0 <_Bfree>
 800595a:	4629      	mov	r1, r5
 800595c:	4658      	mov	r0, fp
 800595e:	f000 fba7 	bl	80060b0 <_Bfree>
 8005962:	e7d0      	b.n	8005906 <_dtoa_r+0x65e>
 8005964:	9704      	str	r7, [sp, #16]
 8005966:	4633      	mov	r3, r6
 8005968:	461e      	mov	r6, r3
 800596a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800596e:	2a39      	cmp	r2, #57	@ 0x39
 8005970:	d107      	bne.n	8005982 <_dtoa_r+0x6da>
 8005972:	459a      	cmp	sl, r3
 8005974:	d1f8      	bne.n	8005968 <_dtoa_r+0x6c0>
 8005976:	9a04      	ldr	r2, [sp, #16]
 8005978:	3201      	adds	r2, #1
 800597a:	9204      	str	r2, [sp, #16]
 800597c:	2230      	movs	r2, #48	@ 0x30
 800597e:	f88a 2000 	strb.w	r2, [sl]
 8005982:	781a      	ldrb	r2, [r3, #0]
 8005984:	3201      	adds	r2, #1
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	e7bd      	b.n	8005906 <_dtoa_r+0x65e>
 800598a:	4b7b      	ldr	r3, [pc, #492]	@ (8005b78 <_dtoa_r+0x8d0>)
 800598c:	2200      	movs	r2, #0
 800598e:	f7fa fe33 	bl	80005f8 <__aeabi_dmul>
 8005992:	2200      	movs	r2, #0
 8005994:	2300      	movs	r3, #0
 8005996:	4604      	mov	r4, r0
 8005998:	460d      	mov	r5, r1
 800599a:	f7fb f895 	bl	8000ac8 <__aeabi_dcmpeq>
 800599e:	2800      	cmp	r0, #0
 80059a0:	f43f aebb 	beq.w	800571a <_dtoa_r+0x472>
 80059a4:	e6f0      	b.n	8005788 <_dtoa_r+0x4e0>
 80059a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80059a8:	2a00      	cmp	r2, #0
 80059aa:	f000 80db 	beq.w	8005b64 <_dtoa_r+0x8bc>
 80059ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059b0:	2a01      	cmp	r2, #1
 80059b2:	f300 80bf 	bgt.w	8005b34 <_dtoa_r+0x88c>
 80059b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80059b8:	2a00      	cmp	r2, #0
 80059ba:	f000 80b7 	beq.w	8005b2c <_dtoa_r+0x884>
 80059be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80059c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80059c4:	4646      	mov	r6, r8
 80059c6:	9a08      	ldr	r2, [sp, #32]
 80059c8:	2101      	movs	r1, #1
 80059ca:	441a      	add	r2, r3
 80059cc:	4658      	mov	r0, fp
 80059ce:	4498      	add	r8, r3
 80059d0:	9208      	str	r2, [sp, #32]
 80059d2:	f000 fc21 	bl	8006218 <__i2b>
 80059d6:	4605      	mov	r5, r0
 80059d8:	b15e      	cbz	r6, 80059f2 <_dtoa_r+0x74a>
 80059da:	9b08      	ldr	r3, [sp, #32]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	dd08      	ble.n	80059f2 <_dtoa_r+0x74a>
 80059e0:	42b3      	cmp	r3, r6
 80059e2:	9a08      	ldr	r2, [sp, #32]
 80059e4:	bfa8      	it	ge
 80059e6:	4633      	movge	r3, r6
 80059e8:	eba8 0803 	sub.w	r8, r8, r3
 80059ec:	1af6      	subs	r6, r6, r3
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	9308      	str	r3, [sp, #32]
 80059f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059f4:	b1f3      	cbz	r3, 8005a34 <_dtoa_r+0x78c>
 80059f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 80b7 	beq.w	8005b6c <_dtoa_r+0x8c4>
 80059fe:	b18c      	cbz	r4, 8005a24 <_dtoa_r+0x77c>
 8005a00:	4629      	mov	r1, r5
 8005a02:	4622      	mov	r2, r4
 8005a04:	4658      	mov	r0, fp
 8005a06:	f000 fcc7 	bl	8006398 <__pow5mult>
 8005a0a:	464a      	mov	r2, r9
 8005a0c:	4601      	mov	r1, r0
 8005a0e:	4605      	mov	r5, r0
 8005a10:	4658      	mov	r0, fp
 8005a12:	f000 fc17 	bl	8006244 <__multiply>
 8005a16:	4649      	mov	r1, r9
 8005a18:	9004      	str	r0, [sp, #16]
 8005a1a:	4658      	mov	r0, fp
 8005a1c:	f000 fb48 	bl	80060b0 <_Bfree>
 8005a20:	9b04      	ldr	r3, [sp, #16]
 8005a22:	4699      	mov	r9, r3
 8005a24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a26:	1b1a      	subs	r2, r3, r4
 8005a28:	d004      	beq.n	8005a34 <_dtoa_r+0x78c>
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	4658      	mov	r0, fp
 8005a2e:	f000 fcb3 	bl	8006398 <__pow5mult>
 8005a32:	4681      	mov	r9, r0
 8005a34:	2101      	movs	r1, #1
 8005a36:	4658      	mov	r0, fp
 8005a38:	f000 fbee 	bl	8006218 <__i2b>
 8005a3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a3e:	4604      	mov	r4, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 81cf 	beq.w	8005de4 <_dtoa_r+0xb3c>
 8005a46:	461a      	mov	r2, r3
 8005a48:	4601      	mov	r1, r0
 8005a4a:	4658      	mov	r0, fp
 8005a4c:	f000 fca4 	bl	8006398 <__pow5mult>
 8005a50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	4604      	mov	r4, r0
 8005a56:	f300 8095 	bgt.w	8005b84 <_dtoa_r+0x8dc>
 8005a5a:	9b02      	ldr	r3, [sp, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f040 8087 	bne.w	8005b70 <_dtoa_r+0x8c8>
 8005a62:	9b03      	ldr	r3, [sp, #12]
 8005a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f040 8089 	bne.w	8005b80 <_dtoa_r+0x8d8>
 8005a6e:	9b03      	ldr	r3, [sp, #12]
 8005a70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a74:	0d1b      	lsrs	r3, r3, #20
 8005a76:	051b      	lsls	r3, r3, #20
 8005a78:	b12b      	cbz	r3, 8005a86 <_dtoa_r+0x7de>
 8005a7a:	9b08      	ldr	r3, [sp, #32]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	9308      	str	r3, [sp, #32]
 8005a80:	f108 0801 	add.w	r8, r8, #1
 8005a84:	2301      	movs	r3, #1
 8005a86:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 81b0 	beq.w	8005df0 <_dtoa_r+0xb48>
 8005a90:	6923      	ldr	r3, [r4, #16]
 8005a92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005a96:	6918      	ldr	r0, [r3, #16]
 8005a98:	f000 fb72 	bl	8006180 <__hi0bits>
 8005a9c:	f1c0 0020 	rsb	r0, r0, #32
 8005aa0:	9b08      	ldr	r3, [sp, #32]
 8005aa2:	4418      	add	r0, r3
 8005aa4:	f010 001f 	ands.w	r0, r0, #31
 8005aa8:	d077      	beq.n	8005b9a <_dtoa_r+0x8f2>
 8005aaa:	f1c0 0320 	rsb	r3, r0, #32
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	dd6b      	ble.n	8005b8a <_dtoa_r+0x8e2>
 8005ab2:	9b08      	ldr	r3, [sp, #32]
 8005ab4:	f1c0 001c 	rsb	r0, r0, #28
 8005ab8:	4403      	add	r3, r0
 8005aba:	4480      	add	r8, r0
 8005abc:	4406      	add	r6, r0
 8005abe:	9308      	str	r3, [sp, #32]
 8005ac0:	f1b8 0f00 	cmp.w	r8, #0
 8005ac4:	dd05      	ble.n	8005ad2 <_dtoa_r+0x82a>
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	4642      	mov	r2, r8
 8005aca:	4658      	mov	r0, fp
 8005acc:	f000 fcbe 	bl	800644c <__lshift>
 8005ad0:	4681      	mov	r9, r0
 8005ad2:	9b08      	ldr	r3, [sp, #32]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	dd05      	ble.n	8005ae4 <_dtoa_r+0x83c>
 8005ad8:	4621      	mov	r1, r4
 8005ada:	461a      	mov	r2, r3
 8005adc:	4658      	mov	r0, fp
 8005ade:	f000 fcb5 	bl	800644c <__lshift>
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d059      	beq.n	8005b9e <_dtoa_r+0x8f6>
 8005aea:	4621      	mov	r1, r4
 8005aec:	4648      	mov	r0, r9
 8005aee:	f000 fd19 	bl	8006524 <__mcmp>
 8005af2:	2800      	cmp	r0, #0
 8005af4:	da53      	bge.n	8005b9e <_dtoa_r+0x8f6>
 8005af6:	1e7b      	subs	r3, r7, #1
 8005af8:	9304      	str	r3, [sp, #16]
 8005afa:	4649      	mov	r1, r9
 8005afc:	2300      	movs	r3, #0
 8005afe:	220a      	movs	r2, #10
 8005b00:	4658      	mov	r0, fp
 8005b02:	f000 faf7 	bl	80060f4 <__multadd>
 8005b06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b08:	4681      	mov	r9, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 8172 	beq.w	8005df4 <_dtoa_r+0xb4c>
 8005b10:	2300      	movs	r3, #0
 8005b12:	4629      	mov	r1, r5
 8005b14:	220a      	movs	r2, #10
 8005b16:	4658      	mov	r0, fp
 8005b18:	f000 faec 	bl	80060f4 <__multadd>
 8005b1c:	9b00      	ldr	r3, [sp, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	4605      	mov	r5, r0
 8005b22:	dc67      	bgt.n	8005bf4 <_dtoa_r+0x94c>
 8005b24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	dc41      	bgt.n	8005bae <_dtoa_r+0x906>
 8005b2a:	e063      	b.n	8005bf4 <_dtoa_r+0x94c>
 8005b2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005b2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005b32:	e746      	b.n	80059c2 <_dtoa_r+0x71a>
 8005b34:	9b07      	ldr	r3, [sp, #28]
 8005b36:	1e5c      	subs	r4, r3, #1
 8005b38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b3a:	42a3      	cmp	r3, r4
 8005b3c:	bfbf      	itttt	lt
 8005b3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005b40:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005b42:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005b44:	1ae3      	sublt	r3, r4, r3
 8005b46:	bfb4      	ite	lt
 8005b48:	18d2      	addlt	r2, r2, r3
 8005b4a:	1b1c      	subge	r4, r3, r4
 8005b4c:	9b07      	ldr	r3, [sp, #28]
 8005b4e:	bfbc      	itt	lt
 8005b50:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005b52:	2400      	movlt	r4, #0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	bfb5      	itete	lt
 8005b58:	eba8 0603 	sublt.w	r6, r8, r3
 8005b5c:	9b07      	ldrge	r3, [sp, #28]
 8005b5e:	2300      	movlt	r3, #0
 8005b60:	4646      	movge	r6, r8
 8005b62:	e730      	b.n	80059c6 <_dtoa_r+0x71e>
 8005b64:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005b66:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005b68:	4646      	mov	r6, r8
 8005b6a:	e735      	b.n	80059d8 <_dtoa_r+0x730>
 8005b6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b6e:	e75c      	b.n	8005a2a <_dtoa_r+0x782>
 8005b70:	2300      	movs	r3, #0
 8005b72:	e788      	b.n	8005a86 <_dtoa_r+0x7de>
 8005b74:	3fe00000 	.word	0x3fe00000
 8005b78:	40240000 	.word	0x40240000
 8005b7c:	40140000 	.word	0x40140000
 8005b80:	9b02      	ldr	r3, [sp, #8]
 8005b82:	e780      	b.n	8005a86 <_dtoa_r+0x7de>
 8005b84:	2300      	movs	r3, #0
 8005b86:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b88:	e782      	b.n	8005a90 <_dtoa_r+0x7e8>
 8005b8a:	d099      	beq.n	8005ac0 <_dtoa_r+0x818>
 8005b8c:	9a08      	ldr	r2, [sp, #32]
 8005b8e:	331c      	adds	r3, #28
 8005b90:	441a      	add	r2, r3
 8005b92:	4498      	add	r8, r3
 8005b94:	441e      	add	r6, r3
 8005b96:	9208      	str	r2, [sp, #32]
 8005b98:	e792      	b.n	8005ac0 <_dtoa_r+0x818>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	e7f6      	b.n	8005b8c <_dtoa_r+0x8e4>
 8005b9e:	9b07      	ldr	r3, [sp, #28]
 8005ba0:	9704      	str	r7, [sp, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	dc20      	bgt.n	8005be8 <_dtoa_r+0x940>
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	dd1e      	ble.n	8005bec <_dtoa_r+0x944>
 8005bae:	9b00      	ldr	r3, [sp, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f47f aec0 	bne.w	8005936 <_dtoa_r+0x68e>
 8005bb6:	4621      	mov	r1, r4
 8005bb8:	2205      	movs	r2, #5
 8005bba:	4658      	mov	r0, fp
 8005bbc:	f000 fa9a 	bl	80060f4 <__multadd>
 8005bc0:	4601      	mov	r1, r0
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	4648      	mov	r0, r9
 8005bc6:	f000 fcad 	bl	8006524 <__mcmp>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	f77f aeb3 	ble.w	8005936 <_dtoa_r+0x68e>
 8005bd0:	4656      	mov	r6, sl
 8005bd2:	2331      	movs	r3, #49	@ 0x31
 8005bd4:	f806 3b01 	strb.w	r3, [r6], #1
 8005bd8:	9b04      	ldr	r3, [sp, #16]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	9304      	str	r3, [sp, #16]
 8005bde:	e6ae      	b.n	800593e <_dtoa_r+0x696>
 8005be0:	9c07      	ldr	r4, [sp, #28]
 8005be2:	9704      	str	r7, [sp, #16]
 8005be4:	4625      	mov	r5, r4
 8005be6:	e7f3      	b.n	8005bd0 <_dtoa_r+0x928>
 8005be8:	9b07      	ldr	r3, [sp, #28]
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 8104 	beq.w	8005dfc <_dtoa_r+0xb54>
 8005bf4:	2e00      	cmp	r6, #0
 8005bf6:	dd05      	ble.n	8005c04 <_dtoa_r+0x95c>
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	4632      	mov	r2, r6
 8005bfc:	4658      	mov	r0, fp
 8005bfe:	f000 fc25 	bl	800644c <__lshift>
 8005c02:	4605      	mov	r5, r0
 8005c04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d05a      	beq.n	8005cc0 <_dtoa_r+0xa18>
 8005c0a:	6869      	ldr	r1, [r5, #4]
 8005c0c:	4658      	mov	r0, fp
 8005c0e:	f000 fa0f 	bl	8006030 <_Balloc>
 8005c12:	4606      	mov	r6, r0
 8005c14:	b928      	cbnz	r0, 8005c22 <_dtoa_r+0x97a>
 8005c16:	4b84      	ldr	r3, [pc, #528]	@ (8005e28 <_dtoa_r+0xb80>)
 8005c18:	4602      	mov	r2, r0
 8005c1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005c1e:	f7ff bb5a 	b.w	80052d6 <_dtoa_r+0x2e>
 8005c22:	692a      	ldr	r2, [r5, #16]
 8005c24:	3202      	adds	r2, #2
 8005c26:	0092      	lsls	r2, r2, #2
 8005c28:	f105 010c 	add.w	r1, r5, #12
 8005c2c:	300c      	adds	r0, #12
 8005c2e:	f000 ffaf 	bl	8006b90 <memcpy>
 8005c32:	2201      	movs	r2, #1
 8005c34:	4631      	mov	r1, r6
 8005c36:	4658      	mov	r0, fp
 8005c38:	f000 fc08 	bl	800644c <__lshift>
 8005c3c:	f10a 0301 	add.w	r3, sl, #1
 8005c40:	9307      	str	r3, [sp, #28]
 8005c42:	9b00      	ldr	r3, [sp, #0]
 8005c44:	4453      	add	r3, sl
 8005c46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c48:	9b02      	ldr	r3, [sp, #8]
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	462f      	mov	r7, r5
 8005c50:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c52:	4605      	mov	r5, r0
 8005c54:	9b07      	ldr	r3, [sp, #28]
 8005c56:	4621      	mov	r1, r4
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	4648      	mov	r0, r9
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	f7ff fa98 	bl	8005192 <quorem>
 8005c62:	4639      	mov	r1, r7
 8005c64:	9002      	str	r0, [sp, #8]
 8005c66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005c6a:	4648      	mov	r0, r9
 8005c6c:	f000 fc5a 	bl	8006524 <__mcmp>
 8005c70:	462a      	mov	r2, r5
 8005c72:	9008      	str	r0, [sp, #32]
 8005c74:	4621      	mov	r1, r4
 8005c76:	4658      	mov	r0, fp
 8005c78:	f000 fc70 	bl	800655c <__mdiff>
 8005c7c:	68c2      	ldr	r2, [r0, #12]
 8005c7e:	4606      	mov	r6, r0
 8005c80:	bb02      	cbnz	r2, 8005cc4 <_dtoa_r+0xa1c>
 8005c82:	4601      	mov	r1, r0
 8005c84:	4648      	mov	r0, r9
 8005c86:	f000 fc4d 	bl	8006524 <__mcmp>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	4631      	mov	r1, r6
 8005c8e:	4658      	mov	r0, fp
 8005c90:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c92:	f000 fa0d 	bl	80060b0 <_Bfree>
 8005c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c9a:	9e07      	ldr	r6, [sp, #28]
 8005c9c:	ea43 0102 	orr.w	r1, r3, r2
 8005ca0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ca2:	4319      	orrs	r1, r3
 8005ca4:	d110      	bne.n	8005cc8 <_dtoa_r+0xa20>
 8005ca6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005caa:	d029      	beq.n	8005d00 <_dtoa_r+0xa58>
 8005cac:	9b08      	ldr	r3, [sp, #32]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	dd02      	ble.n	8005cb8 <_dtoa_r+0xa10>
 8005cb2:	9b02      	ldr	r3, [sp, #8]
 8005cb4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005cb8:	9b00      	ldr	r3, [sp, #0]
 8005cba:	f883 8000 	strb.w	r8, [r3]
 8005cbe:	e63f      	b.n	8005940 <_dtoa_r+0x698>
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	e7bb      	b.n	8005c3c <_dtoa_r+0x994>
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	e7e1      	b.n	8005c8c <_dtoa_r+0x9e4>
 8005cc8:	9b08      	ldr	r3, [sp, #32]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	db04      	blt.n	8005cd8 <_dtoa_r+0xa30>
 8005cce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005cd4:	430b      	orrs	r3, r1
 8005cd6:	d120      	bne.n	8005d1a <_dtoa_r+0xa72>
 8005cd8:	2a00      	cmp	r2, #0
 8005cda:	dded      	ble.n	8005cb8 <_dtoa_r+0xa10>
 8005cdc:	4649      	mov	r1, r9
 8005cde:	2201      	movs	r2, #1
 8005ce0:	4658      	mov	r0, fp
 8005ce2:	f000 fbb3 	bl	800644c <__lshift>
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	4681      	mov	r9, r0
 8005cea:	f000 fc1b 	bl	8006524 <__mcmp>
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	dc03      	bgt.n	8005cfa <_dtoa_r+0xa52>
 8005cf2:	d1e1      	bne.n	8005cb8 <_dtoa_r+0xa10>
 8005cf4:	f018 0f01 	tst.w	r8, #1
 8005cf8:	d0de      	beq.n	8005cb8 <_dtoa_r+0xa10>
 8005cfa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005cfe:	d1d8      	bne.n	8005cb2 <_dtoa_r+0xa0a>
 8005d00:	9a00      	ldr	r2, [sp, #0]
 8005d02:	2339      	movs	r3, #57	@ 0x39
 8005d04:	7013      	strb	r3, [r2, #0]
 8005d06:	4633      	mov	r3, r6
 8005d08:	461e      	mov	r6, r3
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005d10:	2a39      	cmp	r2, #57	@ 0x39
 8005d12:	d052      	beq.n	8005dba <_dtoa_r+0xb12>
 8005d14:	3201      	adds	r2, #1
 8005d16:	701a      	strb	r2, [r3, #0]
 8005d18:	e612      	b.n	8005940 <_dtoa_r+0x698>
 8005d1a:	2a00      	cmp	r2, #0
 8005d1c:	dd07      	ble.n	8005d2e <_dtoa_r+0xa86>
 8005d1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005d22:	d0ed      	beq.n	8005d00 <_dtoa_r+0xa58>
 8005d24:	9a00      	ldr	r2, [sp, #0]
 8005d26:	f108 0301 	add.w	r3, r8, #1
 8005d2a:	7013      	strb	r3, [r2, #0]
 8005d2c:	e608      	b.n	8005940 <_dtoa_r+0x698>
 8005d2e:	9b07      	ldr	r3, [sp, #28]
 8005d30:	9a07      	ldr	r2, [sp, #28]
 8005d32:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005d36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d028      	beq.n	8005d8e <_dtoa_r+0xae6>
 8005d3c:	4649      	mov	r1, r9
 8005d3e:	2300      	movs	r3, #0
 8005d40:	220a      	movs	r2, #10
 8005d42:	4658      	mov	r0, fp
 8005d44:	f000 f9d6 	bl	80060f4 <__multadd>
 8005d48:	42af      	cmp	r7, r5
 8005d4a:	4681      	mov	r9, r0
 8005d4c:	f04f 0300 	mov.w	r3, #0
 8005d50:	f04f 020a 	mov.w	r2, #10
 8005d54:	4639      	mov	r1, r7
 8005d56:	4658      	mov	r0, fp
 8005d58:	d107      	bne.n	8005d6a <_dtoa_r+0xac2>
 8005d5a:	f000 f9cb 	bl	80060f4 <__multadd>
 8005d5e:	4607      	mov	r7, r0
 8005d60:	4605      	mov	r5, r0
 8005d62:	9b07      	ldr	r3, [sp, #28]
 8005d64:	3301      	adds	r3, #1
 8005d66:	9307      	str	r3, [sp, #28]
 8005d68:	e774      	b.n	8005c54 <_dtoa_r+0x9ac>
 8005d6a:	f000 f9c3 	bl	80060f4 <__multadd>
 8005d6e:	4629      	mov	r1, r5
 8005d70:	4607      	mov	r7, r0
 8005d72:	2300      	movs	r3, #0
 8005d74:	220a      	movs	r2, #10
 8005d76:	4658      	mov	r0, fp
 8005d78:	f000 f9bc 	bl	80060f4 <__multadd>
 8005d7c:	4605      	mov	r5, r0
 8005d7e:	e7f0      	b.n	8005d62 <_dtoa_r+0xaba>
 8005d80:	9b00      	ldr	r3, [sp, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	bfcc      	ite	gt
 8005d86:	461e      	movgt	r6, r3
 8005d88:	2601      	movle	r6, #1
 8005d8a:	4456      	add	r6, sl
 8005d8c:	2700      	movs	r7, #0
 8005d8e:	4649      	mov	r1, r9
 8005d90:	2201      	movs	r2, #1
 8005d92:	4658      	mov	r0, fp
 8005d94:	f000 fb5a 	bl	800644c <__lshift>
 8005d98:	4621      	mov	r1, r4
 8005d9a:	4681      	mov	r9, r0
 8005d9c:	f000 fbc2 	bl	8006524 <__mcmp>
 8005da0:	2800      	cmp	r0, #0
 8005da2:	dcb0      	bgt.n	8005d06 <_dtoa_r+0xa5e>
 8005da4:	d102      	bne.n	8005dac <_dtoa_r+0xb04>
 8005da6:	f018 0f01 	tst.w	r8, #1
 8005daa:	d1ac      	bne.n	8005d06 <_dtoa_r+0xa5e>
 8005dac:	4633      	mov	r3, r6
 8005dae:	461e      	mov	r6, r3
 8005db0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005db4:	2a30      	cmp	r2, #48	@ 0x30
 8005db6:	d0fa      	beq.n	8005dae <_dtoa_r+0xb06>
 8005db8:	e5c2      	b.n	8005940 <_dtoa_r+0x698>
 8005dba:	459a      	cmp	sl, r3
 8005dbc:	d1a4      	bne.n	8005d08 <_dtoa_r+0xa60>
 8005dbe:	9b04      	ldr	r3, [sp, #16]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	9304      	str	r3, [sp, #16]
 8005dc4:	2331      	movs	r3, #49	@ 0x31
 8005dc6:	f88a 3000 	strb.w	r3, [sl]
 8005dca:	e5b9      	b.n	8005940 <_dtoa_r+0x698>
 8005dcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005dce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005e2c <_dtoa_r+0xb84>
 8005dd2:	b11b      	cbz	r3, 8005ddc <_dtoa_r+0xb34>
 8005dd4:	f10a 0308 	add.w	r3, sl, #8
 8005dd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	4650      	mov	r0, sl
 8005dde:	b019      	add	sp, #100	@ 0x64
 8005de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	f77f ae37 	ble.w	8005a5a <_dtoa_r+0x7b2>
 8005dec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005dee:	930a      	str	r3, [sp, #40]	@ 0x28
 8005df0:	2001      	movs	r0, #1
 8005df2:	e655      	b.n	8005aa0 <_dtoa_r+0x7f8>
 8005df4:	9b00      	ldr	r3, [sp, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f77f aed6 	ble.w	8005ba8 <_dtoa_r+0x900>
 8005dfc:	4656      	mov	r6, sl
 8005dfe:	4621      	mov	r1, r4
 8005e00:	4648      	mov	r0, r9
 8005e02:	f7ff f9c6 	bl	8005192 <quorem>
 8005e06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005e0a:	f806 8b01 	strb.w	r8, [r6], #1
 8005e0e:	9b00      	ldr	r3, [sp, #0]
 8005e10:	eba6 020a 	sub.w	r2, r6, sl
 8005e14:	4293      	cmp	r3, r2
 8005e16:	ddb3      	ble.n	8005d80 <_dtoa_r+0xad8>
 8005e18:	4649      	mov	r1, r9
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	220a      	movs	r2, #10
 8005e1e:	4658      	mov	r0, fp
 8005e20:	f000 f968 	bl	80060f4 <__multadd>
 8005e24:	4681      	mov	r9, r0
 8005e26:	e7ea      	b.n	8005dfe <_dtoa_r+0xb56>
 8005e28:	08007314 	.word	0x08007314
 8005e2c:	08007298 	.word	0x08007298

08005e30 <_free_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4605      	mov	r5, r0
 8005e34:	2900      	cmp	r1, #0
 8005e36:	d041      	beq.n	8005ebc <_free_r+0x8c>
 8005e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e3c:	1f0c      	subs	r4, r1, #4
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	bfb8      	it	lt
 8005e42:	18e4      	addlt	r4, r4, r3
 8005e44:	f000 f8e8 	bl	8006018 <__malloc_lock>
 8005e48:	4a1d      	ldr	r2, [pc, #116]	@ (8005ec0 <_free_r+0x90>)
 8005e4a:	6813      	ldr	r3, [r2, #0]
 8005e4c:	b933      	cbnz	r3, 8005e5c <_free_r+0x2c>
 8005e4e:	6063      	str	r3, [r4, #4]
 8005e50:	6014      	str	r4, [r2, #0]
 8005e52:	4628      	mov	r0, r5
 8005e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e58:	f000 b8e4 	b.w	8006024 <__malloc_unlock>
 8005e5c:	42a3      	cmp	r3, r4
 8005e5e:	d908      	bls.n	8005e72 <_free_r+0x42>
 8005e60:	6820      	ldr	r0, [r4, #0]
 8005e62:	1821      	adds	r1, r4, r0
 8005e64:	428b      	cmp	r3, r1
 8005e66:	bf01      	itttt	eq
 8005e68:	6819      	ldreq	r1, [r3, #0]
 8005e6a:	685b      	ldreq	r3, [r3, #4]
 8005e6c:	1809      	addeq	r1, r1, r0
 8005e6e:	6021      	streq	r1, [r4, #0]
 8005e70:	e7ed      	b.n	8005e4e <_free_r+0x1e>
 8005e72:	461a      	mov	r2, r3
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	b10b      	cbz	r3, 8005e7c <_free_r+0x4c>
 8005e78:	42a3      	cmp	r3, r4
 8005e7a:	d9fa      	bls.n	8005e72 <_free_r+0x42>
 8005e7c:	6811      	ldr	r1, [r2, #0]
 8005e7e:	1850      	adds	r0, r2, r1
 8005e80:	42a0      	cmp	r0, r4
 8005e82:	d10b      	bne.n	8005e9c <_free_r+0x6c>
 8005e84:	6820      	ldr	r0, [r4, #0]
 8005e86:	4401      	add	r1, r0
 8005e88:	1850      	adds	r0, r2, r1
 8005e8a:	4283      	cmp	r3, r0
 8005e8c:	6011      	str	r1, [r2, #0]
 8005e8e:	d1e0      	bne.n	8005e52 <_free_r+0x22>
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	6053      	str	r3, [r2, #4]
 8005e96:	4408      	add	r0, r1
 8005e98:	6010      	str	r0, [r2, #0]
 8005e9a:	e7da      	b.n	8005e52 <_free_r+0x22>
 8005e9c:	d902      	bls.n	8005ea4 <_free_r+0x74>
 8005e9e:	230c      	movs	r3, #12
 8005ea0:	602b      	str	r3, [r5, #0]
 8005ea2:	e7d6      	b.n	8005e52 <_free_r+0x22>
 8005ea4:	6820      	ldr	r0, [r4, #0]
 8005ea6:	1821      	adds	r1, r4, r0
 8005ea8:	428b      	cmp	r3, r1
 8005eaa:	bf04      	itt	eq
 8005eac:	6819      	ldreq	r1, [r3, #0]
 8005eae:	685b      	ldreq	r3, [r3, #4]
 8005eb0:	6063      	str	r3, [r4, #4]
 8005eb2:	bf04      	itt	eq
 8005eb4:	1809      	addeq	r1, r1, r0
 8005eb6:	6021      	streq	r1, [r4, #0]
 8005eb8:	6054      	str	r4, [r2, #4]
 8005eba:	e7ca      	b.n	8005e52 <_free_r+0x22>
 8005ebc:	bd38      	pop	{r3, r4, r5, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000454 	.word	0x20000454

08005ec4 <malloc>:
 8005ec4:	4b02      	ldr	r3, [pc, #8]	@ (8005ed0 <malloc+0xc>)
 8005ec6:	4601      	mov	r1, r0
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	f000 b825 	b.w	8005f18 <_malloc_r>
 8005ece:	bf00      	nop
 8005ed0:	20000020 	.word	0x20000020

08005ed4 <sbrk_aligned>:
 8005ed4:	b570      	push	{r4, r5, r6, lr}
 8005ed6:	4e0f      	ldr	r6, [pc, #60]	@ (8005f14 <sbrk_aligned+0x40>)
 8005ed8:	460c      	mov	r4, r1
 8005eda:	6831      	ldr	r1, [r6, #0]
 8005edc:	4605      	mov	r5, r0
 8005ede:	b911      	cbnz	r1, 8005ee6 <sbrk_aligned+0x12>
 8005ee0:	f000 fe46 	bl	8006b70 <_sbrk_r>
 8005ee4:	6030      	str	r0, [r6, #0]
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	4628      	mov	r0, r5
 8005eea:	f000 fe41 	bl	8006b70 <_sbrk_r>
 8005eee:	1c43      	adds	r3, r0, #1
 8005ef0:	d103      	bne.n	8005efa <sbrk_aligned+0x26>
 8005ef2:	f04f 34ff 	mov.w	r4, #4294967295
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	bd70      	pop	{r4, r5, r6, pc}
 8005efa:	1cc4      	adds	r4, r0, #3
 8005efc:	f024 0403 	bic.w	r4, r4, #3
 8005f00:	42a0      	cmp	r0, r4
 8005f02:	d0f8      	beq.n	8005ef6 <sbrk_aligned+0x22>
 8005f04:	1a21      	subs	r1, r4, r0
 8005f06:	4628      	mov	r0, r5
 8005f08:	f000 fe32 	bl	8006b70 <_sbrk_r>
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d1f2      	bne.n	8005ef6 <sbrk_aligned+0x22>
 8005f10:	e7ef      	b.n	8005ef2 <sbrk_aligned+0x1e>
 8005f12:	bf00      	nop
 8005f14:	20000450 	.word	0x20000450

08005f18 <_malloc_r>:
 8005f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f1c:	1ccd      	adds	r5, r1, #3
 8005f1e:	f025 0503 	bic.w	r5, r5, #3
 8005f22:	3508      	adds	r5, #8
 8005f24:	2d0c      	cmp	r5, #12
 8005f26:	bf38      	it	cc
 8005f28:	250c      	movcc	r5, #12
 8005f2a:	2d00      	cmp	r5, #0
 8005f2c:	4606      	mov	r6, r0
 8005f2e:	db01      	blt.n	8005f34 <_malloc_r+0x1c>
 8005f30:	42a9      	cmp	r1, r5
 8005f32:	d904      	bls.n	8005f3e <_malloc_r+0x26>
 8005f34:	230c      	movs	r3, #12
 8005f36:	6033      	str	r3, [r6, #0]
 8005f38:	2000      	movs	r0, #0
 8005f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006014 <_malloc_r+0xfc>
 8005f42:	f000 f869 	bl	8006018 <__malloc_lock>
 8005f46:	f8d8 3000 	ldr.w	r3, [r8]
 8005f4a:	461c      	mov	r4, r3
 8005f4c:	bb44      	cbnz	r4, 8005fa0 <_malloc_r+0x88>
 8005f4e:	4629      	mov	r1, r5
 8005f50:	4630      	mov	r0, r6
 8005f52:	f7ff ffbf 	bl	8005ed4 <sbrk_aligned>
 8005f56:	1c43      	adds	r3, r0, #1
 8005f58:	4604      	mov	r4, r0
 8005f5a:	d158      	bne.n	800600e <_malloc_r+0xf6>
 8005f5c:	f8d8 4000 	ldr.w	r4, [r8]
 8005f60:	4627      	mov	r7, r4
 8005f62:	2f00      	cmp	r7, #0
 8005f64:	d143      	bne.n	8005fee <_malloc_r+0xd6>
 8005f66:	2c00      	cmp	r4, #0
 8005f68:	d04b      	beq.n	8006002 <_malloc_r+0xea>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	4639      	mov	r1, r7
 8005f6e:	4630      	mov	r0, r6
 8005f70:	eb04 0903 	add.w	r9, r4, r3
 8005f74:	f000 fdfc 	bl	8006b70 <_sbrk_r>
 8005f78:	4581      	cmp	r9, r0
 8005f7a:	d142      	bne.n	8006002 <_malloc_r+0xea>
 8005f7c:	6821      	ldr	r1, [r4, #0]
 8005f7e:	1a6d      	subs	r5, r5, r1
 8005f80:	4629      	mov	r1, r5
 8005f82:	4630      	mov	r0, r6
 8005f84:	f7ff ffa6 	bl	8005ed4 <sbrk_aligned>
 8005f88:	3001      	adds	r0, #1
 8005f8a:	d03a      	beq.n	8006002 <_malloc_r+0xea>
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	442b      	add	r3, r5
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	f8d8 3000 	ldr.w	r3, [r8]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	bb62      	cbnz	r2, 8005ff4 <_malloc_r+0xdc>
 8005f9a:	f8c8 7000 	str.w	r7, [r8]
 8005f9e:	e00f      	b.n	8005fc0 <_malloc_r+0xa8>
 8005fa0:	6822      	ldr	r2, [r4, #0]
 8005fa2:	1b52      	subs	r2, r2, r5
 8005fa4:	d420      	bmi.n	8005fe8 <_malloc_r+0xd0>
 8005fa6:	2a0b      	cmp	r2, #11
 8005fa8:	d917      	bls.n	8005fda <_malloc_r+0xc2>
 8005faa:	1961      	adds	r1, r4, r5
 8005fac:	42a3      	cmp	r3, r4
 8005fae:	6025      	str	r5, [r4, #0]
 8005fb0:	bf18      	it	ne
 8005fb2:	6059      	strne	r1, [r3, #4]
 8005fb4:	6863      	ldr	r3, [r4, #4]
 8005fb6:	bf08      	it	eq
 8005fb8:	f8c8 1000 	streq.w	r1, [r8]
 8005fbc:	5162      	str	r2, [r4, r5]
 8005fbe:	604b      	str	r3, [r1, #4]
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	f000 f82f 	bl	8006024 <__malloc_unlock>
 8005fc6:	f104 000b 	add.w	r0, r4, #11
 8005fca:	1d23      	adds	r3, r4, #4
 8005fcc:	f020 0007 	bic.w	r0, r0, #7
 8005fd0:	1ac2      	subs	r2, r0, r3
 8005fd2:	bf1c      	itt	ne
 8005fd4:	1a1b      	subne	r3, r3, r0
 8005fd6:	50a3      	strne	r3, [r4, r2]
 8005fd8:	e7af      	b.n	8005f3a <_malloc_r+0x22>
 8005fda:	6862      	ldr	r2, [r4, #4]
 8005fdc:	42a3      	cmp	r3, r4
 8005fde:	bf0c      	ite	eq
 8005fe0:	f8c8 2000 	streq.w	r2, [r8]
 8005fe4:	605a      	strne	r2, [r3, #4]
 8005fe6:	e7eb      	b.n	8005fc0 <_malloc_r+0xa8>
 8005fe8:	4623      	mov	r3, r4
 8005fea:	6864      	ldr	r4, [r4, #4]
 8005fec:	e7ae      	b.n	8005f4c <_malloc_r+0x34>
 8005fee:	463c      	mov	r4, r7
 8005ff0:	687f      	ldr	r7, [r7, #4]
 8005ff2:	e7b6      	b.n	8005f62 <_malloc_r+0x4a>
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	42a3      	cmp	r3, r4
 8005ffa:	d1fb      	bne.n	8005ff4 <_malloc_r+0xdc>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	6053      	str	r3, [r2, #4]
 8006000:	e7de      	b.n	8005fc0 <_malloc_r+0xa8>
 8006002:	230c      	movs	r3, #12
 8006004:	6033      	str	r3, [r6, #0]
 8006006:	4630      	mov	r0, r6
 8006008:	f000 f80c 	bl	8006024 <__malloc_unlock>
 800600c:	e794      	b.n	8005f38 <_malloc_r+0x20>
 800600e:	6005      	str	r5, [r0, #0]
 8006010:	e7d6      	b.n	8005fc0 <_malloc_r+0xa8>
 8006012:	bf00      	nop
 8006014:	20000454 	.word	0x20000454

08006018 <__malloc_lock>:
 8006018:	4801      	ldr	r0, [pc, #4]	@ (8006020 <__malloc_lock+0x8>)
 800601a:	f7ff b8b8 	b.w	800518e <__retarget_lock_acquire_recursive>
 800601e:	bf00      	nop
 8006020:	2000044c 	.word	0x2000044c

08006024 <__malloc_unlock>:
 8006024:	4801      	ldr	r0, [pc, #4]	@ (800602c <__malloc_unlock+0x8>)
 8006026:	f7ff b8b3 	b.w	8005190 <__retarget_lock_release_recursive>
 800602a:	bf00      	nop
 800602c:	2000044c 	.word	0x2000044c

08006030 <_Balloc>:
 8006030:	b570      	push	{r4, r5, r6, lr}
 8006032:	69c6      	ldr	r6, [r0, #28]
 8006034:	4604      	mov	r4, r0
 8006036:	460d      	mov	r5, r1
 8006038:	b976      	cbnz	r6, 8006058 <_Balloc+0x28>
 800603a:	2010      	movs	r0, #16
 800603c:	f7ff ff42 	bl	8005ec4 <malloc>
 8006040:	4602      	mov	r2, r0
 8006042:	61e0      	str	r0, [r4, #28]
 8006044:	b920      	cbnz	r0, 8006050 <_Balloc+0x20>
 8006046:	4b18      	ldr	r3, [pc, #96]	@ (80060a8 <_Balloc+0x78>)
 8006048:	4818      	ldr	r0, [pc, #96]	@ (80060ac <_Balloc+0x7c>)
 800604a:	216b      	movs	r1, #107	@ 0x6b
 800604c:	f000 fdae 	bl	8006bac <__assert_func>
 8006050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006054:	6006      	str	r6, [r0, #0]
 8006056:	60c6      	str	r6, [r0, #12]
 8006058:	69e6      	ldr	r6, [r4, #28]
 800605a:	68f3      	ldr	r3, [r6, #12]
 800605c:	b183      	cbz	r3, 8006080 <_Balloc+0x50>
 800605e:	69e3      	ldr	r3, [r4, #28]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006066:	b9b8      	cbnz	r0, 8006098 <_Balloc+0x68>
 8006068:	2101      	movs	r1, #1
 800606a:	fa01 f605 	lsl.w	r6, r1, r5
 800606e:	1d72      	adds	r2, r6, #5
 8006070:	0092      	lsls	r2, r2, #2
 8006072:	4620      	mov	r0, r4
 8006074:	f000 fdb8 	bl	8006be8 <_calloc_r>
 8006078:	b160      	cbz	r0, 8006094 <_Balloc+0x64>
 800607a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800607e:	e00e      	b.n	800609e <_Balloc+0x6e>
 8006080:	2221      	movs	r2, #33	@ 0x21
 8006082:	2104      	movs	r1, #4
 8006084:	4620      	mov	r0, r4
 8006086:	f000 fdaf 	bl	8006be8 <_calloc_r>
 800608a:	69e3      	ldr	r3, [r4, #28]
 800608c:	60f0      	str	r0, [r6, #12]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1e4      	bne.n	800605e <_Balloc+0x2e>
 8006094:	2000      	movs	r0, #0
 8006096:	bd70      	pop	{r4, r5, r6, pc}
 8006098:	6802      	ldr	r2, [r0, #0]
 800609a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800609e:	2300      	movs	r3, #0
 80060a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80060a4:	e7f7      	b.n	8006096 <_Balloc+0x66>
 80060a6:	bf00      	nop
 80060a8:	080072a5 	.word	0x080072a5
 80060ac:	08007325 	.word	0x08007325

080060b0 <_Bfree>:
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	69c6      	ldr	r6, [r0, #28]
 80060b4:	4605      	mov	r5, r0
 80060b6:	460c      	mov	r4, r1
 80060b8:	b976      	cbnz	r6, 80060d8 <_Bfree+0x28>
 80060ba:	2010      	movs	r0, #16
 80060bc:	f7ff ff02 	bl	8005ec4 <malloc>
 80060c0:	4602      	mov	r2, r0
 80060c2:	61e8      	str	r0, [r5, #28]
 80060c4:	b920      	cbnz	r0, 80060d0 <_Bfree+0x20>
 80060c6:	4b09      	ldr	r3, [pc, #36]	@ (80060ec <_Bfree+0x3c>)
 80060c8:	4809      	ldr	r0, [pc, #36]	@ (80060f0 <_Bfree+0x40>)
 80060ca:	218f      	movs	r1, #143	@ 0x8f
 80060cc:	f000 fd6e 	bl	8006bac <__assert_func>
 80060d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060d4:	6006      	str	r6, [r0, #0]
 80060d6:	60c6      	str	r6, [r0, #12]
 80060d8:	b13c      	cbz	r4, 80060ea <_Bfree+0x3a>
 80060da:	69eb      	ldr	r3, [r5, #28]
 80060dc:	6862      	ldr	r2, [r4, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060e4:	6021      	str	r1, [r4, #0]
 80060e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80060ea:	bd70      	pop	{r4, r5, r6, pc}
 80060ec:	080072a5 	.word	0x080072a5
 80060f0:	08007325 	.word	0x08007325

080060f4 <__multadd>:
 80060f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f8:	690d      	ldr	r5, [r1, #16]
 80060fa:	4607      	mov	r7, r0
 80060fc:	460c      	mov	r4, r1
 80060fe:	461e      	mov	r6, r3
 8006100:	f101 0c14 	add.w	ip, r1, #20
 8006104:	2000      	movs	r0, #0
 8006106:	f8dc 3000 	ldr.w	r3, [ip]
 800610a:	b299      	uxth	r1, r3
 800610c:	fb02 6101 	mla	r1, r2, r1, r6
 8006110:	0c1e      	lsrs	r6, r3, #16
 8006112:	0c0b      	lsrs	r3, r1, #16
 8006114:	fb02 3306 	mla	r3, r2, r6, r3
 8006118:	b289      	uxth	r1, r1
 800611a:	3001      	adds	r0, #1
 800611c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006120:	4285      	cmp	r5, r0
 8006122:	f84c 1b04 	str.w	r1, [ip], #4
 8006126:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800612a:	dcec      	bgt.n	8006106 <__multadd+0x12>
 800612c:	b30e      	cbz	r6, 8006172 <__multadd+0x7e>
 800612e:	68a3      	ldr	r3, [r4, #8]
 8006130:	42ab      	cmp	r3, r5
 8006132:	dc19      	bgt.n	8006168 <__multadd+0x74>
 8006134:	6861      	ldr	r1, [r4, #4]
 8006136:	4638      	mov	r0, r7
 8006138:	3101      	adds	r1, #1
 800613a:	f7ff ff79 	bl	8006030 <_Balloc>
 800613e:	4680      	mov	r8, r0
 8006140:	b928      	cbnz	r0, 800614e <__multadd+0x5a>
 8006142:	4602      	mov	r2, r0
 8006144:	4b0c      	ldr	r3, [pc, #48]	@ (8006178 <__multadd+0x84>)
 8006146:	480d      	ldr	r0, [pc, #52]	@ (800617c <__multadd+0x88>)
 8006148:	21ba      	movs	r1, #186	@ 0xba
 800614a:	f000 fd2f 	bl	8006bac <__assert_func>
 800614e:	6922      	ldr	r2, [r4, #16]
 8006150:	3202      	adds	r2, #2
 8006152:	f104 010c 	add.w	r1, r4, #12
 8006156:	0092      	lsls	r2, r2, #2
 8006158:	300c      	adds	r0, #12
 800615a:	f000 fd19 	bl	8006b90 <memcpy>
 800615e:	4621      	mov	r1, r4
 8006160:	4638      	mov	r0, r7
 8006162:	f7ff ffa5 	bl	80060b0 <_Bfree>
 8006166:	4644      	mov	r4, r8
 8006168:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800616c:	3501      	adds	r5, #1
 800616e:	615e      	str	r6, [r3, #20]
 8006170:	6125      	str	r5, [r4, #16]
 8006172:	4620      	mov	r0, r4
 8006174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006178:	08007314 	.word	0x08007314
 800617c:	08007325 	.word	0x08007325

08006180 <__hi0bits>:
 8006180:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006184:	4603      	mov	r3, r0
 8006186:	bf36      	itet	cc
 8006188:	0403      	lslcc	r3, r0, #16
 800618a:	2000      	movcs	r0, #0
 800618c:	2010      	movcc	r0, #16
 800618e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006192:	bf3c      	itt	cc
 8006194:	021b      	lslcc	r3, r3, #8
 8006196:	3008      	addcc	r0, #8
 8006198:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800619c:	bf3c      	itt	cc
 800619e:	011b      	lslcc	r3, r3, #4
 80061a0:	3004      	addcc	r0, #4
 80061a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a6:	bf3c      	itt	cc
 80061a8:	009b      	lslcc	r3, r3, #2
 80061aa:	3002      	addcc	r0, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	db05      	blt.n	80061bc <__hi0bits+0x3c>
 80061b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80061b4:	f100 0001 	add.w	r0, r0, #1
 80061b8:	bf08      	it	eq
 80061ba:	2020      	moveq	r0, #32
 80061bc:	4770      	bx	lr

080061be <__lo0bits>:
 80061be:	6803      	ldr	r3, [r0, #0]
 80061c0:	4602      	mov	r2, r0
 80061c2:	f013 0007 	ands.w	r0, r3, #7
 80061c6:	d00b      	beq.n	80061e0 <__lo0bits+0x22>
 80061c8:	07d9      	lsls	r1, r3, #31
 80061ca:	d421      	bmi.n	8006210 <__lo0bits+0x52>
 80061cc:	0798      	lsls	r0, r3, #30
 80061ce:	bf49      	itett	mi
 80061d0:	085b      	lsrmi	r3, r3, #1
 80061d2:	089b      	lsrpl	r3, r3, #2
 80061d4:	2001      	movmi	r0, #1
 80061d6:	6013      	strmi	r3, [r2, #0]
 80061d8:	bf5c      	itt	pl
 80061da:	6013      	strpl	r3, [r2, #0]
 80061dc:	2002      	movpl	r0, #2
 80061de:	4770      	bx	lr
 80061e0:	b299      	uxth	r1, r3
 80061e2:	b909      	cbnz	r1, 80061e8 <__lo0bits+0x2a>
 80061e4:	0c1b      	lsrs	r3, r3, #16
 80061e6:	2010      	movs	r0, #16
 80061e8:	b2d9      	uxtb	r1, r3
 80061ea:	b909      	cbnz	r1, 80061f0 <__lo0bits+0x32>
 80061ec:	3008      	adds	r0, #8
 80061ee:	0a1b      	lsrs	r3, r3, #8
 80061f0:	0719      	lsls	r1, r3, #28
 80061f2:	bf04      	itt	eq
 80061f4:	091b      	lsreq	r3, r3, #4
 80061f6:	3004      	addeq	r0, #4
 80061f8:	0799      	lsls	r1, r3, #30
 80061fa:	bf04      	itt	eq
 80061fc:	089b      	lsreq	r3, r3, #2
 80061fe:	3002      	addeq	r0, #2
 8006200:	07d9      	lsls	r1, r3, #31
 8006202:	d403      	bmi.n	800620c <__lo0bits+0x4e>
 8006204:	085b      	lsrs	r3, r3, #1
 8006206:	f100 0001 	add.w	r0, r0, #1
 800620a:	d003      	beq.n	8006214 <__lo0bits+0x56>
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	4770      	bx	lr
 8006210:	2000      	movs	r0, #0
 8006212:	4770      	bx	lr
 8006214:	2020      	movs	r0, #32
 8006216:	4770      	bx	lr

08006218 <__i2b>:
 8006218:	b510      	push	{r4, lr}
 800621a:	460c      	mov	r4, r1
 800621c:	2101      	movs	r1, #1
 800621e:	f7ff ff07 	bl	8006030 <_Balloc>
 8006222:	4602      	mov	r2, r0
 8006224:	b928      	cbnz	r0, 8006232 <__i2b+0x1a>
 8006226:	4b05      	ldr	r3, [pc, #20]	@ (800623c <__i2b+0x24>)
 8006228:	4805      	ldr	r0, [pc, #20]	@ (8006240 <__i2b+0x28>)
 800622a:	f240 1145 	movw	r1, #325	@ 0x145
 800622e:	f000 fcbd 	bl	8006bac <__assert_func>
 8006232:	2301      	movs	r3, #1
 8006234:	6144      	str	r4, [r0, #20]
 8006236:	6103      	str	r3, [r0, #16]
 8006238:	bd10      	pop	{r4, pc}
 800623a:	bf00      	nop
 800623c:	08007314 	.word	0x08007314
 8006240:	08007325 	.word	0x08007325

08006244 <__multiply>:
 8006244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006248:	4614      	mov	r4, r2
 800624a:	690a      	ldr	r2, [r1, #16]
 800624c:	6923      	ldr	r3, [r4, #16]
 800624e:	429a      	cmp	r2, r3
 8006250:	bfa8      	it	ge
 8006252:	4623      	movge	r3, r4
 8006254:	460f      	mov	r7, r1
 8006256:	bfa4      	itt	ge
 8006258:	460c      	movge	r4, r1
 800625a:	461f      	movge	r7, r3
 800625c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006260:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006264:	68a3      	ldr	r3, [r4, #8]
 8006266:	6861      	ldr	r1, [r4, #4]
 8006268:	eb0a 0609 	add.w	r6, sl, r9
 800626c:	42b3      	cmp	r3, r6
 800626e:	b085      	sub	sp, #20
 8006270:	bfb8      	it	lt
 8006272:	3101      	addlt	r1, #1
 8006274:	f7ff fedc 	bl	8006030 <_Balloc>
 8006278:	b930      	cbnz	r0, 8006288 <__multiply+0x44>
 800627a:	4602      	mov	r2, r0
 800627c:	4b44      	ldr	r3, [pc, #272]	@ (8006390 <__multiply+0x14c>)
 800627e:	4845      	ldr	r0, [pc, #276]	@ (8006394 <__multiply+0x150>)
 8006280:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006284:	f000 fc92 	bl	8006bac <__assert_func>
 8006288:	f100 0514 	add.w	r5, r0, #20
 800628c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006290:	462b      	mov	r3, r5
 8006292:	2200      	movs	r2, #0
 8006294:	4543      	cmp	r3, r8
 8006296:	d321      	bcc.n	80062dc <__multiply+0x98>
 8006298:	f107 0114 	add.w	r1, r7, #20
 800629c:	f104 0214 	add.w	r2, r4, #20
 80062a0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80062a4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80062a8:	9302      	str	r3, [sp, #8]
 80062aa:	1b13      	subs	r3, r2, r4
 80062ac:	3b15      	subs	r3, #21
 80062ae:	f023 0303 	bic.w	r3, r3, #3
 80062b2:	3304      	adds	r3, #4
 80062b4:	f104 0715 	add.w	r7, r4, #21
 80062b8:	42ba      	cmp	r2, r7
 80062ba:	bf38      	it	cc
 80062bc:	2304      	movcc	r3, #4
 80062be:	9301      	str	r3, [sp, #4]
 80062c0:	9b02      	ldr	r3, [sp, #8]
 80062c2:	9103      	str	r1, [sp, #12]
 80062c4:	428b      	cmp	r3, r1
 80062c6:	d80c      	bhi.n	80062e2 <__multiply+0x9e>
 80062c8:	2e00      	cmp	r6, #0
 80062ca:	dd03      	ble.n	80062d4 <__multiply+0x90>
 80062cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d05b      	beq.n	800638c <__multiply+0x148>
 80062d4:	6106      	str	r6, [r0, #16]
 80062d6:	b005      	add	sp, #20
 80062d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062dc:	f843 2b04 	str.w	r2, [r3], #4
 80062e0:	e7d8      	b.n	8006294 <__multiply+0x50>
 80062e2:	f8b1 a000 	ldrh.w	sl, [r1]
 80062e6:	f1ba 0f00 	cmp.w	sl, #0
 80062ea:	d024      	beq.n	8006336 <__multiply+0xf2>
 80062ec:	f104 0e14 	add.w	lr, r4, #20
 80062f0:	46a9      	mov	r9, r5
 80062f2:	f04f 0c00 	mov.w	ip, #0
 80062f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80062fa:	f8d9 3000 	ldr.w	r3, [r9]
 80062fe:	fa1f fb87 	uxth.w	fp, r7
 8006302:	b29b      	uxth	r3, r3
 8006304:	fb0a 330b 	mla	r3, sl, fp, r3
 8006308:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800630c:	f8d9 7000 	ldr.w	r7, [r9]
 8006310:	4463      	add	r3, ip
 8006312:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006316:	fb0a c70b 	mla	r7, sl, fp, ip
 800631a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800631e:	b29b      	uxth	r3, r3
 8006320:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006324:	4572      	cmp	r2, lr
 8006326:	f849 3b04 	str.w	r3, [r9], #4
 800632a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800632e:	d8e2      	bhi.n	80062f6 <__multiply+0xb2>
 8006330:	9b01      	ldr	r3, [sp, #4]
 8006332:	f845 c003 	str.w	ip, [r5, r3]
 8006336:	9b03      	ldr	r3, [sp, #12]
 8006338:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800633c:	3104      	adds	r1, #4
 800633e:	f1b9 0f00 	cmp.w	r9, #0
 8006342:	d021      	beq.n	8006388 <__multiply+0x144>
 8006344:	682b      	ldr	r3, [r5, #0]
 8006346:	f104 0c14 	add.w	ip, r4, #20
 800634a:	46ae      	mov	lr, r5
 800634c:	f04f 0a00 	mov.w	sl, #0
 8006350:	f8bc b000 	ldrh.w	fp, [ip]
 8006354:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006358:	fb09 770b 	mla	r7, r9, fp, r7
 800635c:	4457      	add	r7, sl
 800635e:	b29b      	uxth	r3, r3
 8006360:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006364:	f84e 3b04 	str.w	r3, [lr], #4
 8006368:	f85c 3b04 	ldr.w	r3, [ip], #4
 800636c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006370:	f8be 3000 	ldrh.w	r3, [lr]
 8006374:	fb09 330a 	mla	r3, r9, sl, r3
 8006378:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800637c:	4562      	cmp	r2, ip
 800637e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006382:	d8e5      	bhi.n	8006350 <__multiply+0x10c>
 8006384:	9f01      	ldr	r7, [sp, #4]
 8006386:	51eb      	str	r3, [r5, r7]
 8006388:	3504      	adds	r5, #4
 800638a:	e799      	b.n	80062c0 <__multiply+0x7c>
 800638c:	3e01      	subs	r6, #1
 800638e:	e79b      	b.n	80062c8 <__multiply+0x84>
 8006390:	08007314 	.word	0x08007314
 8006394:	08007325 	.word	0x08007325

08006398 <__pow5mult>:
 8006398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800639c:	4615      	mov	r5, r2
 800639e:	f012 0203 	ands.w	r2, r2, #3
 80063a2:	4607      	mov	r7, r0
 80063a4:	460e      	mov	r6, r1
 80063a6:	d007      	beq.n	80063b8 <__pow5mult+0x20>
 80063a8:	4c25      	ldr	r4, [pc, #148]	@ (8006440 <__pow5mult+0xa8>)
 80063aa:	3a01      	subs	r2, #1
 80063ac:	2300      	movs	r3, #0
 80063ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063b2:	f7ff fe9f 	bl	80060f4 <__multadd>
 80063b6:	4606      	mov	r6, r0
 80063b8:	10ad      	asrs	r5, r5, #2
 80063ba:	d03d      	beq.n	8006438 <__pow5mult+0xa0>
 80063bc:	69fc      	ldr	r4, [r7, #28]
 80063be:	b97c      	cbnz	r4, 80063e0 <__pow5mult+0x48>
 80063c0:	2010      	movs	r0, #16
 80063c2:	f7ff fd7f 	bl	8005ec4 <malloc>
 80063c6:	4602      	mov	r2, r0
 80063c8:	61f8      	str	r0, [r7, #28]
 80063ca:	b928      	cbnz	r0, 80063d8 <__pow5mult+0x40>
 80063cc:	4b1d      	ldr	r3, [pc, #116]	@ (8006444 <__pow5mult+0xac>)
 80063ce:	481e      	ldr	r0, [pc, #120]	@ (8006448 <__pow5mult+0xb0>)
 80063d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80063d4:	f000 fbea 	bl	8006bac <__assert_func>
 80063d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063dc:	6004      	str	r4, [r0, #0]
 80063de:	60c4      	str	r4, [r0, #12]
 80063e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80063e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80063e8:	b94c      	cbnz	r4, 80063fe <__pow5mult+0x66>
 80063ea:	f240 2171 	movw	r1, #625	@ 0x271
 80063ee:	4638      	mov	r0, r7
 80063f0:	f7ff ff12 	bl	8006218 <__i2b>
 80063f4:	2300      	movs	r3, #0
 80063f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80063fa:	4604      	mov	r4, r0
 80063fc:	6003      	str	r3, [r0, #0]
 80063fe:	f04f 0900 	mov.w	r9, #0
 8006402:	07eb      	lsls	r3, r5, #31
 8006404:	d50a      	bpl.n	800641c <__pow5mult+0x84>
 8006406:	4631      	mov	r1, r6
 8006408:	4622      	mov	r2, r4
 800640a:	4638      	mov	r0, r7
 800640c:	f7ff ff1a 	bl	8006244 <__multiply>
 8006410:	4631      	mov	r1, r6
 8006412:	4680      	mov	r8, r0
 8006414:	4638      	mov	r0, r7
 8006416:	f7ff fe4b 	bl	80060b0 <_Bfree>
 800641a:	4646      	mov	r6, r8
 800641c:	106d      	asrs	r5, r5, #1
 800641e:	d00b      	beq.n	8006438 <__pow5mult+0xa0>
 8006420:	6820      	ldr	r0, [r4, #0]
 8006422:	b938      	cbnz	r0, 8006434 <__pow5mult+0x9c>
 8006424:	4622      	mov	r2, r4
 8006426:	4621      	mov	r1, r4
 8006428:	4638      	mov	r0, r7
 800642a:	f7ff ff0b 	bl	8006244 <__multiply>
 800642e:	6020      	str	r0, [r4, #0]
 8006430:	f8c0 9000 	str.w	r9, [r0]
 8006434:	4604      	mov	r4, r0
 8006436:	e7e4      	b.n	8006402 <__pow5mult+0x6a>
 8006438:	4630      	mov	r0, r6
 800643a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800643e:	bf00      	nop
 8006440:	08007380 	.word	0x08007380
 8006444:	080072a5 	.word	0x080072a5
 8006448:	08007325 	.word	0x08007325

0800644c <__lshift>:
 800644c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006450:	460c      	mov	r4, r1
 8006452:	6849      	ldr	r1, [r1, #4]
 8006454:	6923      	ldr	r3, [r4, #16]
 8006456:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800645a:	68a3      	ldr	r3, [r4, #8]
 800645c:	4607      	mov	r7, r0
 800645e:	4691      	mov	r9, r2
 8006460:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006464:	f108 0601 	add.w	r6, r8, #1
 8006468:	42b3      	cmp	r3, r6
 800646a:	db0b      	blt.n	8006484 <__lshift+0x38>
 800646c:	4638      	mov	r0, r7
 800646e:	f7ff fddf 	bl	8006030 <_Balloc>
 8006472:	4605      	mov	r5, r0
 8006474:	b948      	cbnz	r0, 800648a <__lshift+0x3e>
 8006476:	4602      	mov	r2, r0
 8006478:	4b28      	ldr	r3, [pc, #160]	@ (800651c <__lshift+0xd0>)
 800647a:	4829      	ldr	r0, [pc, #164]	@ (8006520 <__lshift+0xd4>)
 800647c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006480:	f000 fb94 	bl	8006bac <__assert_func>
 8006484:	3101      	adds	r1, #1
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	e7ee      	b.n	8006468 <__lshift+0x1c>
 800648a:	2300      	movs	r3, #0
 800648c:	f100 0114 	add.w	r1, r0, #20
 8006490:	f100 0210 	add.w	r2, r0, #16
 8006494:	4618      	mov	r0, r3
 8006496:	4553      	cmp	r3, sl
 8006498:	db33      	blt.n	8006502 <__lshift+0xb6>
 800649a:	6920      	ldr	r0, [r4, #16]
 800649c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064a0:	f104 0314 	add.w	r3, r4, #20
 80064a4:	f019 091f 	ands.w	r9, r9, #31
 80064a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80064b0:	d02b      	beq.n	800650a <__lshift+0xbe>
 80064b2:	f1c9 0e20 	rsb	lr, r9, #32
 80064b6:	468a      	mov	sl, r1
 80064b8:	2200      	movs	r2, #0
 80064ba:	6818      	ldr	r0, [r3, #0]
 80064bc:	fa00 f009 	lsl.w	r0, r0, r9
 80064c0:	4310      	orrs	r0, r2
 80064c2:	f84a 0b04 	str.w	r0, [sl], #4
 80064c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80064ca:	459c      	cmp	ip, r3
 80064cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80064d0:	d8f3      	bhi.n	80064ba <__lshift+0x6e>
 80064d2:	ebac 0304 	sub.w	r3, ip, r4
 80064d6:	3b15      	subs	r3, #21
 80064d8:	f023 0303 	bic.w	r3, r3, #3
 80064dc:	3304      	adds	r3, #4
 80064de:	f104 0015 	add.w	r0, r4, #21
 80064e2:	4584      	cmp	ip, r0
 80064e4:	bf38      	it	cc
 80064e6:	2304      	movcc	r3, #4
 80064e8:	50ca      	str	r2, [r1, r3]
 80064ea:	b10a      	cbz	r2, 80064f0 <__lshift+0xa4>
 80064ec:	f108 0602 	add.w	r6, r8, #2
 80064f0:	3e01      	subs	r6, #1
 80064f2:	4638      	mov	r0, r7
 80064f4:	612e      	str	r6, [r5, #16]
 80064f6:	4621      	mov	r1, r4
 80064f8:	f7ff fdda 	bl	80060b0 <_Bfree>
 80064fc:	4628      	mov	r0, r5
 80064fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006502:	f842 0f04 	str.w	r0, [r2, #4]!
 8006506:	3301      	adds	r3, #1
 8006508:	e7c5      	b.n	8006496 <__lshift+0x4a>
 800650a:	3904      	subs	r1, #4
 800650c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006510:	f841 2f04 	str.w	r2, [r1, #4]!
 8006514:	459c      	cmp	ip, r3
 8006516:	d8f9      	bhi.n	800650c <__lshift+0xc0>
 8006518:	e7ea      	b.n	80064f0 <__lshift+0xa4>
 800651a:	bf00      	nop
 800651c:	08007314 	.word	0x08007314
 8006520:	08007325 	.word	0x08007325

08006524 <__mcmp>:
 8006524:	690a      	ldr	r2, [r1, #16]
 8006526:	4603      	mov	r3, r0
 8006528:	6900      	ldr	r0, [r0, #16]
 800652a:	1a80      	subs	r0, r0, r2
 800652c:	b530      	push	{r4, r5, lr}
 800652e:	d10e      	bne.n	800654e <__mcmp+0x2a>
 8006530:	3314      	adds	r3, #20
 8006532:	3114      	adds	r1, #20
 8006534:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006538:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800653c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006540:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006544:	4295      	cmp	r5, r2
 8006546:	d003      	beq.n	8006550 <__mcmp+0x2c>
 8006548:	d205      	bcs.n	8006556 <__mcmp+0x32>
 800654a:	f04f 30ff 	mov.w	r0, #4294967295
 800654e:	bd30      	pop	{r4, r5, pc}
 8006550:	42a3      	cmp	r3, r4
 8006552:	d3f3      	bcc.n	800653c <__mcmp+0x18>
 8006554:	e7fb      	b.n	800654e <__mcmp+0x2a>
 8006556:	2001      	movs	r0, #1
 8006558:	e7f9      	b.n	800654e <__mcmp+0x2a>
	...

0800655c <__mdiff>:
 800655c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006560:	4689      	mov	r9, r1
 8006562:	4606      	mov	r6, r0
 8006564:	4611      	mov	r1, r2
 8006566:	4648      	mov	r0, r9
 8006568:	4614      	mov	r4, r2
 800656a:	f7ff ffdb 	bl	8006524 <__mcmp>
 800656e:	1e05      	subs	r5, r0, #0
 8006570:	d112      	bne.n	8006598 <__mdiff+0x3c>
 8006572:	4629      	mov	r1, r5
 8006574:	4630      	mov	r0, r6
 8006576:	f7ff fd5b 	bl	8006030 <_Balloc>
 800657a:	4602      	mov	r2, r0
 800657c:	b928      	cbnz	r0, 800658a <__mdiff+0x2e>
 800657e:	4b3f      	ldr	r3, [pc, #252]	@ (800667c <__mdiff+0x120>)
 8006580:	f240 2137 	movw	r1, #567	@ 0x237
 8006584:	483e      	ldr	r0, [pc, #248]	@ (8006680 <__mdiff+0x124>)
 8006586:	f000 fb11 	bl	8006bac <__assert_func>
 800658a:	2301      	movs	r3, #1
 800658c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006590:	4610      	mov	r0, r2
 8006592:	b003      	add	sp, #12
 8006594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006598:	bfbc      	itt	lt
 800659a:	464b      	movlt	r3, r9
 800659c:	46a1      	movlt	r9, r4
 800659e:	4630      	mov	r0, r6
 80065a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80065a4:	bfba      	itte	lt
 80065a6:	461c      	movlt	r4, r3
 80065a8:	2501      	movlt	r5, #1
 80065aa:	2500      	movge	r5, #0
 80065ac:	f7ff fd40 	bl	8006030 <_Balloc>
 80065b0:	4602      	mov	r2, r0
 80065b2:	b918      	cbnz	r0, 80065bc <__mdiff+0x60>
 80065b4:	4b31      	ldr	r3, [pc, #196]	@ (800667c <__mdiff+0x120>)
 80065b6:	f240 2145 	movw	r1, #581	@ 0x245
 80065ba:	e7e3      	b.n	8006584 <__mdiff+0x28>
 80065bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80065c0:	6926      	ldr	r6, [r4, #16]
 80065c2:	60c5      	str	r5, [r0, #12]
 80065c4:	f109 0310 	add.w	r3, r9, #16
 80065c8:	f109 0514 	add.w	r5, r9, #20
 80065cc:	f104 0e14 	add.w	lr, r4, #20
 80065d0:	f100 0b14 	add.w	fp, r0, #20
 80065d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80065d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80065dc:	9301      	str	r3, [sp, #4]
 80065de:	46d9      	mov	r9, fp
 80065e0:	f04f 0c00 	mov.w	ip, #0
 80065e4:	9b01      	ldr	r3, [sp, #4]
 80065e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80065ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80065ee:	9301      	str	r3, [sp, #4]
 80065f0:	fa1f f38a 	uxth.w	r3, sl
 80065f4:	4619      	mov	r1, r3
 80065f6:	b283      	uxth	r3, r0
 80065f8:	1acb      	subs	r3, r1, r3
 80065fa:	0c00      	lsrs	r0, r0, #16
 80065fc:	4463      	add	r3, ip
 80065fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006602:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006606:	b29b      	uxth	r3, r3
 8006608:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800660c:	4576      	cmp	r6, lr
 800660e:	f849 3b04 	str.w	r3, [r9], #4
 8006612:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006616:	d8e5      	bhi.n	80065e4 <__mdiff+0x88>
 8006618:	1b33      	subs	r3, r6, r4
 800661a:	3b15      	subs	r3, #21
 800661c:	f023 0303 	bic.w	r3, r3, #3
 8006620:	3415      	adds	r4, #21
 8006622:	3304      	adds	r3, #4
 8006624:	42a6      	cmp	r6, r4
 8006626:	bf38      	it	cc
 8006628:	2304      	movcc	r3, #4
 800662a:	441d      	add	r5, r3
 800662c:	445b      	add	r3, fp
 800662e:	461e      	mov	r6, r3
 8006630:	462c      	mov	r4, r5
 8006632:	4544      	cmp	r4, r8
 8006634:	d30e      	bcc.n	8006654 <__mdiff+0xf8>
 8006636:	f108 0103 	add.w	r1, r8, #3
 800663a:	1b49      	subs	r1, r1, r5
 800663c:	f021 0103 	bic.w	r1, r1, #3
 8006640:	3d03      	subs	r5, #3
 8006642:	45a8      	cmp	r8, r5
 8006644:	bf38      	it	cc
 8006646:	2100      	movcc	r1, #0
 8006648:	440b      	add	r3, r1
 800664a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800664e:	b191      	cbz	r1, 8006676 <__mdiff+0x11a>
 8006650:	6117      	str	r7, [r2, #16]
 8006652:	e79d      	b.n	8006590 <__mdiff+0x34>
 8006654:	f854 1b04 	ldr.w	r1, [r4], #4
 8006658:	46e6      	mov	lr, ip
 800665a:	0c08      	lsrs	r0, r1, #16
 800665c:	fa1c fc81 	uxtah	ip, ip, r1
 8006660:	4471      	add	r1, lr
 8006662:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006666:	b289      	uxth	r1, r1
 8006668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800666c:	f846 1b04 	str.w	r1, [r6], #4
 8006670:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006674:	e7dd      	b.n	8006632 <__mdiff+0xd6>
 8006676:	3f01      	subs	r7, #1
 8006678:	e7e7      	b.n	800664a <__mdiff+0xee>
 800667a:	bf00      	nop
 800667c:	08007314 	.word	0x08007314
 8006680:	08007325 	.word	0x08007325

08006684 <__d2b>:
 8006684:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006688:	460f      	mov	r7, r1
 800668a:	2101      	movs	r1, #1
 800668c:	ec59 8b10 	vmov	r8, r9, d0
 8006690:	4616      	mov	r6, r2
 8006692:	f7ff fccd 	bl	8006030 <_Balloc>
 8006696:	4604      	mov	r4, r0
 8006698:	b930      	cbnz	r0, 80066a8 <__d2b+0x24>
 800669a:	4602      	mov	r2, r0
 800669c:	4b23      	ldr	r3, [pc, #140]	@ (800672c <__d2b+0xa8>)
 800669e:	4824      	ldr	r0, [pc, #144]	@ (8006730 <__d2b+0xac>)
 80066a0:	f240 310f 	movw	r1, #783	@ 0x30f
 80066a4:	f000 fa82 	bl	8006bac <__assert_func>
 80066a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80066ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80066b0:	b10d      	cbz	r5, 80066b6 <__d2b+0x32>
 80066b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066b6:	9301      	str	r3, [sp, #4]
 80066b8:	f1b8 0300 	subs.w	r3, r8, #0
 80066bc:	d023      	beq.n	8006706 <__d2b+0x82>
 80066be:	4668      	mov	r0, sp
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	f7ff fd7c 	bl	80061be <__lo0bits>
 80066c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80066ca:	b1d0      	cbz	r0, 8006702 <__d2b+0x7e>
 80066cc:	f1c0 0320 	rsb	r3, r0, #32
 80066d0:	fa02 f303 	lsl.w	r3, r2, r3
 80066d4:	430b      	orrs	r3, r1
 80066d6:	40c2      	lsrs	r2, r0
 80066d8:	6163      	str	r3, [r4, #20]
 80066da:	9201      	str	r2, [sp, #4]
 80066dc:	9b01      	ldr	r3, [sp, #4]
 80066de:	61a3      	str	r3, [r4, #24]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	bf0c      	ite	eq
 80066e4:	2201      	moveq	r2, #1
 80066e6:	2202      	movne	r2, #2
 80066e8:	6122      	str	r2, [r4, #16]
 80066ea:	b1a5      	cbz	r5, 8006716 <__d2b+0x92>
 80066ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80066f0:	4405      	add	r5, r0
 80066f2:	603d      	str	r5, [r7, #0]
 80066f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80066f8:	6030      	str	r0, [r6, #0]
 80066fa:	4620      	mov	r0, r4
 80066fc:	b003      	add	sp, #12
 80066fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006702:	6161      	str	r1, [r4, #20]
 8006704:	e7ea      	b.n	80066dc <__d2b+0x58>
 8006706:	a801      	add	r0, sp, #4
 8006708:	f7ff fd59 	bl	80061be <__lo0bits>
 800670c:	9b01      	ldr	r3, [sp, #4]
 800670e:	6163      	str	r3, [r4, #20]
 8006710:	3020      	adds	r0, #32
 8006712:	2201      	movs	r2, #1
 8006714:	e7e8      	b.n	80066e8 <__d2b+0x64>
 8006716:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800671a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800671e:	6038      	str	r0, [r7, #0]
 8006720:	6918      	ldr	r0, [r3, #16]
 8006722:	f7ff fd2d 	bl	8006180 <__hi0bits>
 8006726:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800672a:	e7e5      	b.n	80066f8 <__d2b+0x74>
 800672c:	08007314 	.word	0x08007314
 8006730:	08007325 	.word	0x08007325

08006734 <__ssputs_r>:
 8006734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006738:	688e      	ldr	r6, [r1, #8]
 800673a:	461f      	mov	r7, r3
 800673c:	42be      	cmp	r6, r7
 800673e:	680b      	ldr	r3, [r1, #0]
 8006740:	4682      	mov	sl, r0
 8006742:	460c      	mov	r4, r1
 8006744:	4690      	mov	r8, r2
 8006746:	d82d      	bhi.n	80067a4 <__ssputs_r+0x70>
 8006748:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800674c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006750:	d026      	beq.n	80067a0 <__ssputs_r+0x6c>
 8006752:	6965      	ldr	r5, [r4, #20]
 8006754:	6909      	ldr	r1, [r1, #16]
 8006756:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800675a:	eba3 0901 	sub.w	r9, r3, r1
 800675e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006762:	1c7b      	adds	r3, r7, #1
 8006764:	444b      	add	r3, r9
 8006766:	106d      	asrs	r5, r5, #1
 8006768:	429d      	cmp	r5, r3
 800676a:	bf38      	it	cc
 800676c:	461d      	movcc	r5, r3
 800676e:	0553      	lsls	r3, r2, #21
 8006770:	d527      	bpl.n	80067c2 <__ssputs_r+0x8e>
 8006772:	4629      	mov	r1, r5
 8006774:	f7ff fbd0 	bl	8005f18 <_malloc_r>
 8006778:	4606      	mov	r6, r0
 800677a:	b360      	cbz	r0, 80067d6 <__ssputs_r+0xa2>
 800677c:	6921      	ldr	r1, [r4, #16]
 800677e:	464a      	mov	r2, r9
 8006780:	f000 fa06 	bl	8006b90 <memcpy>
 8006784:	89a3      	ldrh	r3, [r4, #12]
 8006786:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800678a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800678e:	81a3      	strh	r3, [r4, #12]
 8006790:	6126      	str	r6, [r4, #16]
 8006792:	6165      	str	r5, [r4, #20]
 8006794:	444e      	add	r6, r9
 8006796:	eba5 0509 	sub.w	r5, r5, r9
 800679a:	6026      	str	r6, [r4, #0]
 800679c:	60a5      	str	r5, [r4, #8]
 800679e:	463e      	mov	r6, r7
 80067a0:	42be      	cmp	r6, r7
 80067a2:	d900      	bls.n	80067a6 <__ssputs_r+0x72>
 80067a4:	463e      	mov	r6, r7
 80067a6:	6820      	ldr	r0, [r4, #0]
 80067a8:	4632      	mov	r2, r6
 80067aa:	4641      	mov	r1, r8
 80067ac:	f000 f9c6 	bl	8006b3c <memmove>
 80067b0:	68a3      	ldr	r3, [r4, #8]
 80067b2:	1b9b      	subs	r3, r3, r6
 80067b4:	60a3      	str	r3, [r4, #8]
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	4433      	add	r3, r6
 80067ba:	6023      	str	r3, [r4, #0]
 80067bc:	2000      	movs	r0, #0
 80067be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c2:	462a      	mov	r2, r5
 80067c4:	f000 fa36 	bl	8006c34 <_realloc_r>
 80067c8:	4606      	mov	r6, r0
 80067ca:	2800      	cmp	r0, #0
 80067cc:	d1e0      	bne.n	8006790 <__ssputs_r+0x5c>
 80067ce:	6921      	ldr	r1, [r4, #16]
 80067d0:	4650      	mov	r0, sl
 80067d2:	f7ff fb2d 	bl	8005e30 <_free_r>
 80067d6:	230c      	movs	r3, #12
 80067d8:	f8ca 3000 	str.w	r3, [sl]
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067e2:	81a3      	strh	r3, [r4, #12]
 80067e4:	f04f 30ff 	mov.w	r0, #4294967295
 80067e8:	e7e9      	b.n	80067be <__ssputs_r+0x8a>
	...

080067ec <_svfiprintf_r>:
 80067ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f0:	4698      	mov	r8, r3
 80067f2:	898b      	ldrh	r3, [r1, #12]
 80067f4:	061b      	lsls	r3, r3, #24
 80067f6:	b09d      	sub	sp, #116	@ 0x74
 80067f8:	4607      	mov	r7, r0
 80067fa:	460d      	mov	r5, r1
 80067fc:	4614      	mov	r4, r2
 80067fe:	d510      	bpl.n	8006822 <_svfiprintf_r+0x36>
 8006800:	690b      	ldr	r3, [r1, #16]
 8006802:	b973      	cbnz	r3, 8006822 <_svfiprintf_r+0x36>
 8006804:	2140      	movs	r1, #64	@ 0x40
 8006806:	f7ff fb87 	bl	8005f18 <_malloc_r>
 800680a:	6028      	str	r0, [r5, #0]
 800680c:	6128      	str	r0, [r5, #16]
 800680e:	b930      	cbnz	r0, 800681e <_svfiprintf_r+0x32>
 8006810:	230c      	movs	r3, #12
 8006812:	603b      	str	r3, [r7, #0]
 8006814:	f04f 30ff 	mov.w	r0, #4294967295
 8006818:	b01d      	add	sp, #116	@ 0x74
 800681a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800681e:	2340      	movs	r3, #64	@ 0x40
 8006820:	616b      	str	r3, [r5, #20]
 8006822:	2300      	movs	r3, #0
 8006824:	9309      	str	r3, [sp, #36]	@ 0x24
 8006826:	2320      	movs	r3, #32
 8006828:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800682c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006830:	2330      	movs	r3, #48	@ 0x30
 8006832:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80069d0 <_svfiprintf_r+0x1e4>
 8006836:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800683a:	f04f 0901 	mov.w	r9, #1
 800683e:	4623      	mov	r3, r4
 8006840:	469a      	mov	sl, r3
 8006842:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006846:	b10a      	cbz	r2, 800684c <_svfiprintf_r+0x60>
 8006848:	2a25      	cmp	r2, #37	@ 0x25
 800684a:	d1f9      	bne.n	8006840 <_svfiprintf_r+0x54>
 800684c:	ebba 0b04 	subs.w	fp, sl, r4
 8006850:	d00b      	beq.n	800686a <_svfiprintf_r+0x7e>
 8006852:	465b      	mov	r3, fp
 8006854:	4622      	mov	r2, r4
 8006856:	4629      	mov	r1, r5
 8006858:	4638      	mov	r0, r7
 800685a:	f7ff ff6b 	bl	8006734 <__ssputs_r>
 800685e:	3001      	adds	r0, #1
 8006860:	f000 80a7 	beq.w	80069b2 <_svfiprintf_r+0x1c6>
 8006864:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006866:	445a      	add	r2, fp
 8006868:	9209      	str	r2, [sp, #36]	@ 0x24
 800686a:	f89a 3000 	ldrb.w	r3, [sl]
 800686e:	2b00      	cmp	r3, #0
 8006870:	f000 809f 	beq.w	80069b2 <_svfiprintf_r+0x1c6>
 8006874:	2300      	movs	r3, #0
 8006876:	f04f 32ff 	mov.w	r2, #4294967295
 800687a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800687e:	f10a 0a01 	add.w	sl, sl, #1
 8006882:	9304      	str	r3, [sp, #16]
 8006884:	9307      	str	r3, [sp, #28]
 8006886:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800688a:	931a      	str	r3, [sp, #104]	@ 0x68
 800688c:	4654      	mov	r4, sl
 800688e:	2205      	movs	r2, #5
 8006890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006894:	484e      	ldr	r0, [pc, #312]	@ (80069d0 <_svfiprintf_r+0x1e4>)
 8006896:	f7f9 fc9b 	bl	80001d0 <memchr>
 800689a:	9a04      	ldr	r2, [sp, #16]
 800689c:	b9d8      	cbnz	r0, 80068d6 <_svfiprintf_r+0xea>
 800689e:	06d0      	lsls	r0, r2, #27
 80068a0:	bf44      	itt	mi
 80068a2:	2320      	movmi	r3, #32
 80068a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068a8:	0711      	lsls	r1, r2, #28
 80068aa:	bf44      	itt	mi
 80068ac:	232b      	movmi	r3, #43	@ 0x2b
 80068ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068b2:	f89a 3000 	ldrb.w	r3, [sl]
 80068b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80068b8:	d015      	beq.n	80068e6 <_svfiprintf_r+0xfa>
 80068ba:	9a07      	ldr	r2, [sp, #28]
 80068bc:	4654      	mov	r4, sl
 80068be:	2000      	movs	r0, #0
 80068c0:	f04f 0c0a 	mov.w	ip, #10
 80068c4:	4621      	mov	r1, r4
 80068c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068ca:	3b30      	subs	r3, #48	@ 0x30
 80068cc:	2b09      	cmp	r3, #9
 80068ce:	d94b      	bls.n	8006968 <_svfiprintf_r+0x17c>
 80068d0:	b1b0      	cbz	r0, 8006900 <_svfiprintf_r+0x114>
 80068d2:	9207      	str	r2, [sp, #28]
 80068d4:	e014      	b.n	8006900 <_svfiprintf_r+0x114>
 80068d6:	eba0 0308 	sub.w	r3, r0, r8
 80068da:	fa09 f303 	lsl.w	r3, r9, r3
 80068de:	4313      	orrs	r3, r2
 80068e0:	9304      	str	r3, [sp, #16]
 80068e2:	46a2      	mov	sl, r4
 80068e4:	e7d2      	b.n	800688c <_svfiprintf_r+0xa0>
 80068e6:	9b03      	ldr	r3, [sp, #12]
 80068e8:	1d19      	adds	r1, r3, #4
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	9103      	str	r1, [sp, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	bfbb      	ittet	lt
 80068f2:	425b      	neglt	r3, r3
 80068f4:	f042 0202 	orrlt.w	r2, r2, #2
 80068f8:	9307      	strge	r3, [sp, #28]
 80068fa:	9307      	strlt	r3, [sp, #28]
 80068fc:	bfb8      	it	lt
 80068fe:	9204      	strlt	r2, [sp, #16]
 8006900:	7823      	ldrb	r3, [r4, #0]
 8006902:	2b2e      	cmp	r3, #46	@ 0x2e
 8006904:	d10a      	bne.n	800691c <_svfiprintf_r+0x130>
 8006906:	7863      	ldrb	r3, [r4, #1]
 8006908:	2b2a      	cmp	r3, #42	@ 0x2a
 800690a:	d132      	bne.n	8006972 <_svfiprintf_r+0x186>
 800690c:	9b03      	ldr	r3, [sp, #12]
 800690e:	1d1a      	adds	r2, r3, #4
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	9203      	str	r2, [sp, #12]
 8006914:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006918:	3402      	adds	r4, #2
 800691a:	9305      	str	r3, [sp, #20]
 800691c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80069e0 <_svfiprintf_r+0x1f4>
 8006920:	7821      	ldrb	r1, [r4, #0]
 8006922:	2203      	movs	r2, #3
 8006924:	4650      	mov	r0, sl
 8006926:	f7f9 fc53 	bl	80001d0 <memchr>
 800692a:	b138      	cbz	r0, 800693c <_svfiprintf_r+0x150>
 800692c:	9b04      	ldr	r3, [sp, #16]
 800692e:	eba0 000a 	sub.w	r0, r0, sl
 8006932:	2240      	movs	r2, #64	@ 0x40
 8006934:	4082      	lsls	r2, r0
 8006936:	4313      	orrs	r3, r2
 8006938:	3401      	adds	r4, #1
 800693a:	9304      	str	r3, [sp, #16]
 800693c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006940:	4824      	ldr	r0, [pc, #144]	@ (80069d4 <_svfiprintf_r+0x1e8>)
 8006942:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006946:	2206      	movs	r2, #6
 8006948:	f7f9 fc42 	bl	80001d0 <memchr>
 800694c:	2800      	cmp	r0, #0
 800694e:	d036      	beq.n	80069be <_svfiprintf_r+0x1d2>
 8006950:	4b21      	ldr	r3, [pc, #132]	@ (80069d8 <_svfiprintf_r+0x1ec>)
 8006952:	bb1b      	cbnz	r3, 800699c <_svfiprintf_r+0x1b0>
 8006954:	9b03      	ldr	r3, [sp, #12]
 8006956:	3307      	adds	r3, #7
 8006958:	f023 0307 	bic.w	r3, r3, #7
 800695c:	3308      	adds	r3, #8
 800695e:	9303      	str	r3, [sp, #12]
 8006960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006962:	4433      	add	r3, r6
 8006964:	9309      	str	r3, [sp, #36]	@ 0x24
 8006966:	e76a      	b.n	800683e <_svfiprintf_r+0x52>
 8006968:	fb0c 3202 	mla	r2, ip, r2, r3
 800696c:	460c      	mov	r4, r1
 800696e:	2001      	movs	r0, #1
 8006970:	e7a8      	b.n	80068c4 <_svfiprintf_r+0xd8>
 8006972:	2300      	movs	r3, #0
 8006974:	3401      	adds	r4, #1
 8006976:	9305      	str	r3, [sp, #20]
 8006978:	4619      	mov	r1, r3
 800697a:	f04f 0c0a 	mov.w	ip, #10
 800697e:	4620      	mov	r0, r4
 8006980:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006984:	3a30      	subs	r2, #48	@ 0x30
 8006986:	2a09      	cmp	r2, #9
 8006988:	d903      	bls.n	8006992 <_svfiprintf_r+0x1a6>
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0c6      	beq.n	800691c <_svfiprintf_r+0x130>
 800698e:	9105      	str	r1, [sp, #20]
 8006990:	e7c4      	b.n	800691c <_svfiprintf_r+0x130>
 8006992:	fb0c 2101 	mla	r1, ip, r1, r2
 8006996:	4604      	mov	r4, r0
 8006998:	2301      	movs	r3, #1
 800699a:	e7f0      	b.n	800697e <_svfiprintf_r+0x192>
 800699c:	ab03      	add	r3, sp, #12
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	462a      	mov	r2, r5
 80069a2:	4b0e      	ldr	r3, [pc, #56]	@ (80069dc <_svfiprintf_r+0x1f0>)
 80069a4:	a904      	add	r1, sp, #16
 80069a6:	4638      	mov	r0, r7
 80069a8:	f7fd fe96 	bl	80046d8 <_printf_float>
 80069ac:	1c42      	adds	r2, r0, #1
 80069ae:	4606      	mov	r6, r0
 80069b0:	d1d6      	bne.n	8006960 <_svfiprintf_r+0x174>
 80069b2:	89ab      	ldrh	r3, [r5, #12]
 80069b4:	065b      	lsls	r3, r3, #25
 80069b6:	f53f af2d 	bmi.w	8006814 <_svfiprintf_r+0x28>
 80069ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069bc:	e72c      	b.n	8006818 <_svfiprintf_r+0x2c>
 80069be:	ab03      	add	r3, sp, #12
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	462a      	mov	r2, r5
 80069c4:	4b05      	ldr	r3, [pc, #20]	@ (80069dc <_svfiprintf_r+0x1f0>)
 80069c6:	a904      	add	r1, sp, #16
 80069c8:	4638      	mov	r0, r7
 80069ca:	f7fe f91d 	bl	8004c08 <_printf_i>
 80069ce:	e7ed      	b.n	80069ac <_svfiprintf_r+0x1c0>
 80069d0:	08007480 	.word	0x08007480
 80069d4:	0800748a 	.word	0x0800748a
 80069d8:	080046d9 	.word	0x080046d9
 80069dc:	08006735 	.word	0x08006735
 80069e0:	08007486 	.word	0x08007486

080069e4 <__sflush_r>:
 80069e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ec:	0716      	lsls	r6, r2, #28
 80069ee:	4605      	mov	r5, r0
 80069f0:	460c      	mov	r4, r1
 80069f2:	d454      	bmi.n	8006a9e <__sflush_r+0xba>
 80069f4:	684b      	ldr	r3, [r1, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	dc02      	bgt.n	8006a00 <__sflush_r+0x1c>
 80069fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	dd48      	ble.n	8006a92 <__sflush_r+0xae>
 8006a00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a02:	2e00      	cmp	r6, #0
 8006a04:	d045      	beq.n	8006a92 <__sflush_r+0xae>
 8006a06:	2300      	movs	r3, #0
 8006a08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a0c:	682f      	ldr	r7, [r5, #0]
 8006a0e:	6a21      	ldr	r1, [r4, #32]
 8006a10:	602b      	str	r3, [r5, #0]
 8006a12:	d030      	beq.n	8006a76 <__sflush_r+0x92>
 8006a14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	0759      	lsls	r1, r3, #29
 8006a1a:	d505      	bpl.n	8006a28 <__sflush_r+0x44>
 8006a1c:	6863      	ldr	r3, [r4, #4]
 8006a1e:	1ad2      	subs	r2, r2, r3
 8006a20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a22:	b10b      	cbz	r3, 8006a28 <__sflush_r+0x44>
 8006a24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a26:	1ad2      	subs	r2, r2, r3
 8006a28:	2300      	movs	r3, #0
 8006a2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a2c:	6a21      	ldr	r1, [r4, #32]
 8006a2e:	4628      	mov	r0, r5
 8006a30:	47b0      	blx	r6
 8006a32:	1c43      	adds	r3, r0, #1
 8006a34:	89a3      	ldrh	r3, [r4, #12]
 8006a36:	d106      	bne.n	8006a46 <__sflush_r+0x62>
 8006a38:	6829      	ldr	r1, [r5, #0]
 8006a3a:	291d      	cmp	r1, #29
 8006a3c:	d82b      	bhi.n	8006a96 <__sflush_r+0xb2>
 8006a3e:	4a2a      	ldr	r2, [pc, #168]	@ (8006ae8 <__sflush_r+0x104>)
 8006a40:	410a      	asrs	r2, r1
 8006a42:	07d6      	lsls	r6, r2, #31
 8006a44:	d427      	bmi.n	8006a96 <__sflush_r+0xb2>
 8006a46:	2200      	movs	r2, #0
 8006a48:	6062      	str	r2, [r4, #4]
 8006a4a:	04d9      	lsls	r1, r3, #19
 8006a4c:	6922      	ldr	r2, [r4, #16]
 8006a4e:	6022      	str	r2, [r4, #0]
 8006a50:	d504      	bpl.n	8006a5c <__sflush_r+0x78>
 8006a52:	1c42      	adds	r2, r0, #1
 8006a54:	d101      	bne.n	8006a5a <__sflush_r+0x76>
 8006a56:	682b      	ldr	r3, [r5, #0]
 8006a58:	b903      	cbnz	r3, 8006a5c <__sflush_r+0x78>
 8006a5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a5e:	602f      	str	r7, [r5, #0]
 8006a60:	b1b9      	cbz	r1, 8006a92 <__sflush_r+0xae>
 8006a62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a66:	4299      	cmp	r1, r3
 8006a68:	d002      	beq.n	8006a70 <__sflush_r+0x8c>
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	f7ff f9e0 	bl	8005e30 <_free_r>
 8006a70:	2300      	movs	r3, #0
 8006a72:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a74:	e00d      	b.n	8006a92 <__sflush_r+0xae>
 8006a76:	2301      	movs	r3, #1
 8006a78:	4628      	mov	r0, r5
 8006a7a:	47b0      	blx	r6
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	1c50      	adds	r0, r2, #1
 8006a80:	d1c9      	bne.n	8006a16 <__sflush_r+0x32>
 8006a82:	682b      	ldr	r3, [r5, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d0c6      	beq.n	8006a16 <__sflush_r+0x32>
 8006a88:	2b1d      	cmp	r3, #29
 8006a8a:	d001      	beq.n	8006a90 <__sflush_r+0xac>
 8006a8c:	2b16      	cmp	r3, #22
 8006a8e:	d11e      	bne.n	8006ace <__sflush_r+0xea>
 8006a90:	602f      	str	r7, [r5, #0]
 8006a92:	2000      	movs	r0, #0
 8006a94:	e022      	b.n	8006adc <__sflush_r+0xf8>
 8006a96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a9a:	b21b      	sxth	r3, r3
 8006a9c:	e01b      	b.n	8006ad6 <__sflush_r+0xf2>
 8006a9e:	690f      	ldr	r7, [r1, #16]
 8006aa0:	2f00      	cmp	r7, #0
 8006aa2:	d0f6      	beq.n	8006a92 <__sflush_r+0xae>
 8006aa4:	0793      	lsls	r3, r2, #30
 8006aa6:	680e      	ldr	r6, [r1, #0]
 8006aa8:	bf08      	it	eq
 8006aaa:	694b      	ldreq	r3, [r1, #20]
 8006aac:	600f      	str	r7, [r1, #0]
 8006aae:	bf18      	it	ne
 8006ab0:	2300      	movne	r3, #0
 8006ab2:	eba6 0807 	sub.w	r8, r6, r7
 8006ab6:	608b      	str	r3, [r1, #8]
 8006ab8:	f1b8 0f00 	cmp.w	r8, #0
 8006abc:	dde9      	ble.n	8006a92 <__sflush_r+0xae>
 8006abe:	6a21      	ldr	r1, [r4, #32]
 8006ac0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006ac2:	4643      	mov	r3, r8
 8006ac4:	463a      	mov	r2, r7
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	47b0      	blx	r6
 8006aca:	2800      	cmp	r0, #0
 8006acc:	dc08      	bgt.n	8006ae0 <__sflush_r+0xfc>
 8006ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ad6:	81a3      	strh	r3, [r4, #12]
 8006ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8006adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ae0:	4407      	add	r7, r0
 8006ae2:	eba8 0800 	sub.w	r8, r8, r0
 8006ae6:	e7e7      	b.n	8006ab8 <__sflush_r+0xd4>
 8006ae8:	dfbffffe 	.word	0xdfbffffe

08006aec <_fflush_r>:
 8006aec:	b538      	push	{r3, r4, r5, lr}
 8006aee:	690b      	ldr	r3, [r1, #16]
 8006af0:	4605      	mov	r5, r0
 8006af2:	460c      	mov	r4, r1
 8006af4:	b913      	cbnz	r3, 8006afc <_fflush_r+0x10>
 8006af6:	2500      	movs	r5, #0
 8006af8:	4628      	mov	r0, r5
 8006afa:	bd38      	pop	{r3, r4, r5, pc}
 8006afc:	b118      	cbz	r0, 8006b06 <_fflush_r+0x1a>
 8006afe:	6a03      	ldr	r3, [r0, #32]
 8006b00:	b90b      	cbnz	r3, 8006b06 <_fflush_r+0x1a>
 8006b02:	f7fe fa2d 	bl	8004f60 <__sinit>
 8006b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0f3      	beq.n	8006af6 <_fflush_r+0xa>
 8006b0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b10:	07d0      	lsls	r0, r2, #31
 8006b12:	d404      	bmi.n	8006b1e <_fflush_r+0x32>
 8006b14:	0599      	lsls	r1, r3, #22
 8006b16:	d402      	bmi.n	8006b1e <_fflush_r+0x32>
 8006b18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b1a:	f7fe fb38 	bl	800518e <__retarget_lock_acquire_recursive>
 8006b1e:	4628      	mov	r0, r5
 8006b20:	4621      	mov	r1, r4
 8006b22:	f7ff ff5f 	bl	80069e4 <__sflush_r>
 8006b26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b28:	07da      	lsls	r2, r3, #31
 8006b2a:	4605      	mov	r5, r0
 8006b2c:	d4e4      	bmi.n	8006af8 <_fflush_r+0xc>
 8006b2e:	89a3      	ldrh	r3, [r4, #12]
 8006b30:	059b      	lsls	r3, r3, #22
 8006b32:	d4e1      	bmi.n	8006af8 <_fflush_r+0xc>
 8006b34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b36:	f7fe fb2b 	bl	8005190 <__retarget_lock_release_recursive>
 8006b3a:	e7dd      	b.n	8006af8 <_fflush_r+0xc>

08006b3c <memmove>:
 8006b3c:	4288      	cmp	r0, r1
 8006b3e:	b510      	push	{r4, lr}
 8006b40:	eb01 0402 	add.w	r4, r1, r2
 8006b44:	d902      	bls.n	8006b4c <memmove+0x10>
 8006b46:	4284      	cmp	r4, r0
 8006b48:	4623      	mov	r3, r4
 8006b4a:	d807      	bhi.n	8006b5c <memmove+0x20>
 8006b4c:	1e43      	subs	r3, r0, #1
 8006b4e:	42a1      	cmp	r1, r4
 8006b50:	d008      	beq.n	8006b64 <memmove+0x28>
 8006b52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b5a:	e7f8      	b.n	8006b4e <memmove+0x12>
 8006b5c:	4402      	add	r2, r0
 8006b5e:	4601      	mov	r1, r0
 8006b60:	428a      	cmp	r2, r1
 8006b62:	d100      	bne.n	8006b66 <memmove+0x2a>
 8006b64:	bd10      	pop	{r4, pc}
 8006b66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b6e:	e7f7      	b.n	8006b60 <memmove+0x24>

08006b70 <_sbrk_r>:
 8006b70:	b538      	push	{r3, r4, r5, lr}
 8006b72:	4d06      	ldr	r5, [pc, #24]	@ (8006b8c <_sbrk_r+0x1c>)
 8006b74:	2300      	movs	r3, #0
 8006b76:	4604      	mov	r4, r0
 8006b78:	4608      	mov	r0, r1
 8006b7a:	602b      	str	r3, [r5, #0]
 8006b7c:	f7fa fe30 	bl	80017e0 <_sbrk>
 8006b80:	1c43      	adds	r3, r0, #1
 8006b82:	d102      	bne.n	8006b8a <_sbrk_r+0x1a>
 8006b84:	682b      	ldr	r3, [r5, #0]
 8006b86:	b103      	cbz	r3, 8006b8a <_sbrk_r+0x1a>
 8006b88:	6023      	str	r3, [r4, #0]
 8006b8a:	bd38      	pop	{r3, r4, r5, pc}
 8006b8c:	20000448 	.word	0x20000448

08006b90 <memcpy>:
 8006b90:	440a      	add	r2, r1
 8006b92:	4291      	cmp	r1, r2
 8006b94:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b98:	d100      	bne.n	8006b9c <memcpy+0xc>
 8006b9a:	4770      	bx	lr
 8006b9c:	b510      	push	{r4, lr}
 8006b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ba2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ba6:	4291      	cmp	r1, r2
 8006ba8:	d1f9      	bne.n	8006b9e <memcpy+0xe>
 8006baa:	bd10      	pop	{r4, pc}

08006bac <__assert_func>:
 8006bac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006bae:	4614      	mov	r4, r2
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	4b09      	ldr	r3, [pc, #36]	@ (8006bd8 <__assert_func+0x2c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	68d8      	ldr	r0, [r3, #12]
 8006bba:	b954      	cbnz	r4, 8006bd2 <__assert_func+0x26>
 8006bbc:	4b07      	ldr	r3, [pc, #28]	@ (8006bdc <__assert_func+0x30>)
 8006bbe:	461c      	mov	r4, r3
 8006bc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006bc4:	9100      	str	r1, [sp, #0]
 8006bc6:	462b      	mov	r3, r5
 8006bc8:	4905      	ldr	r1, [pc, #20]	@ (8006be0 <__assert_func+0x34>)
 8006bca:	f000 f86f 	bl	8006cac <fiprintf>
 8006bce:	f000 f87f 	bl	8006cd0 <abort>
 8006bd2:	4b04      	ldr	r3, [pc, #16]	@ (8006be4 <__assert_func+0x38>)
 8006bd4:	e7f4      	b.n	8006bc0 <__assert_func+0x14>
 8006bd6:	bf00      	nop
 8006bd8:	20000020 	.word	0x20000020
 8006bdc:	080074d6 	.word	0x080074d6
 8006be0:	080074a8 	.word	0x080074a8
 8006be4:	0800749b 	.word	0x0800749b

08006be8 <_calloc_r>:
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	fba1 5402 	umull	r5, r4, r1, r2
 8006bee:	b93c      	cbnz	r4, 8006c00 <_calloc_r+0x18>
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	f7ff f991 	bl	8005f18 <_malloc_r>
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	b928      	cbnz	r0, 8006c06 <_calloc_r+0x1e>
 8006bfa:	2600      	movs	r6, #0
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	bd70      	pop	{r4, r5, r6, pc}
 8006c00:	220c      	movs	r2, #12
 8006c02:	6002      	str	r2, [r0, #0]
 8006c04:	e7f9      	b.n	8006bfa <_calloc_r+0x12>
 8006c06:	462a      	mov	r2, r5
 8006c08:	4621      	mov	r1, r4
 8006c0a:	f7fe fa42 	bl	8005092 <memset>
 8006c0e:	e7f5      	b.n	8006bfc <_calloc_r+0x14>

08006c10 <__ascii_mbtowc>:
 8006c10:	b082      	sub	sp, #8
 8006c12:	b901      	cbnz	r1, 8006c16 <__ascii_mbtowc+0x6>
 8006c14:	a901      	add	r1, sp, #4
 8006c16:	b142      	cbz	r2, 8006c2a <__ascii_mbtowc+0x1a>
 8006c18:	b14b      	cbz	r3, 8006c2e <__ascii_mbtowc+0x1e>
 8006c1a:	7813      	ldrb	r3, [r2, #0]
 8006c1c:	600b      	str	r3, [r1, #0]
 8006c1e:	7812      	ldrb	r2, [r2, #0]
 8006c20:	1e10      	subs	r0, r2, #0
 8006c22:	bf18      	it	ne
 8006c24:	2001      	movne	r0, #1
 8006c26:	b002      	add	sp, #8
 8006c28:	4770      	bx	lr
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	e7fb      	b.n	8006c26 <__ascii_mbtowc+0x16>
 8006c2e:	f06f 0001 	mvn.w	r0, #1
 8006c32:	e7f8      	b.n	8006c26 <__ascii_mbtowc+0x16>

08006c34 <_realloc_r>:
 8006c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c38:	4680      	mov	r8, r0
 8006c3a:	4615      	mov	r5, r2
 8006c3c:	460c      	mov	r4, r1
 8006c3e:	b921      	cbnz	r1, 8006c4a <_realloc_r+0x16>
 8006c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c44:	4611      	mov	r1, r2
 8006c46:	f7ff b967 	b.w	8005f18 <_malloc_r>
 8006c4a:	b92a      	cbnz	r2, 8006c58 <_realloc_r+0x24>
 8006c4c:	f7ff f8f0 	bl	8005e30 <_free_r>
 8006c50:	2400      	movs	r4, #0
 8006c52:	4620      	mov	r0, r4
 8006c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c58:	f000 f841 	bl	8006cde <_malloc_usable_size_r>
 8006c5c:	4285      	cmp	r5, r0
 8006c5e:	4606      	mov	r6, r0
 8006c60:	d802      	bhi.n	8006c68 <_realloc_r+0x34>
 8006c62:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006c66:	d8f4      	bhi.n	8006c52 <_realloc_r+0x1e>
 8006c68:	4629      	mov	r1, r5
 8006c6a:	4640      	mov	r0, r8
 8006c6c:	f7ff f954 	bl	8005f18 <_malloc_r>
 8006c70:	4607      	mov	r7, r0
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d0ec      	beq.n	8006c50 <_realloc_r+0x1c>
 8006c76:	42b5      	cmp	r5, r6
 8006c78:	462a      	mov	r2, r5
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	bf28      	it	cs
 8006c7e:	4632      	movcs	r2, r6
 8006c80:	f7ff ff86 	bl	8006b90 <memcpy>
 8006c84:	4621      	mov	r1, r4
 8006c86:	4640      	mov	r0, r8
 8006c88:	f7ff f8d2 	bl	8005e30 <_free_r>
 8006c8c:	463c      	mov	r4, r7
 8006c8e:	e7e0      	b.n	8006c52 <_realloc_r+0x1e>

08006c90 <__ascii_wctomb>:
 8006c90:	4603      	mov	r3, r0
 8006c92:	4608      	mov	r0, r1
 8006c94:	b141      	cbz	r1, 8006ca8 <__ascii_wctomb+0x18>
 8006c96:	2aff      	cmp	r2, #255	@ 0xff
 8006c98:	d904      	bls.n	8006ca4 <__ascii_wctomb+0x14>
 8006c9a:	228a      	movs	r2, #138	@ 0x8a
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca2:	4770      	bx	lr
 8006ca4:	700a      	strb	r2, [r1, #0]
 8006ca6:	2001      	movs	r0, #1
 8006ca8:	4770      	bx	lr
	...

08006cac <fiprintf>:
 8006cac:	b40e      	push	{r1, r2, r3}
 8006cae:	b503      	push	{r0, r1, lr}
 8006cb0:	4601      	mov	r1, r0
 8006cb2:	ab03      	add	r3, sp, #12
 8006cb4:	4805      	ldr	r0, [pc, #20]	@ (8006ccc <fiprintf+0x20>)
 8006cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cba:	6800      	ldr	r0, [r0, #0]
 8006cbc:	9301      	str	r3, [sp, #4]
 8006cbe:	f000 f83f 	bl	8006d40 <_vfiprintf_r>
 8006cc2:	b002      	add	sp, #8
 8006cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cc8:	b003      	add	sp, #12
 8006cca:	4770      	bx	lr
 8006ccc:	20000020 	.word	0x20000020

08006cd0 <abort>:
 8006cd0:	b508      	push	{r3, lr}
 8006cd2:	2006      	movs	r0, #6
 8006cd4:	f000 fa08 	bl	80070e8 <raise>
 8006cd8:	2001      	movs	r0, #1
 8006cda:	f7fa fd09 	bl	80016f0 <_exit>

08006cde <_malloc_usable_size_r>:
 8006cde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ce2:	1f18      	subs	r0, r3, #4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	bfbc      	itt	lt
 8006ce8:	580b      	ldrlt	r3, [r1, r0]
 8006cea:	18c0      	addlt	r0, r0, r3
 8006cec:	4770      	bx	lr

08006cee <__sfputc_r>:
 8006cee:	6893      	ldr	r3, [r2, #8]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	b410      	push	{r4}
 8006cf6:	6093      	str	r3, [r2, #8]
 8006cf8:	da08      	bge.n	8006d0c <__sfputc_r+0x1e>
 8006cfa:	6994      	ldr	r4, [r2, #24]
 8006cfc:	42a3      	cmp	r3, r4
 8006cfe:	db01      	blt.n	8006d04 <__sfputc_r+0x16>
 8006d00:	290a      	cmp	r1, #10
 8006d02:	d103      	bne.n	8006d0c <__sfputc_r+0x1e>
 8006d04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d08:	f000 b932 	b.w	8006f70 <__swbuf_r>
 8006d0c:	6813      	ldr	r3, [r2, #0]
 8006d0e:	1c58      	adds	r0, r3, #1
 8006d10:	6010      	str	r0, [r2, #0]
 8006d12:	7019      	strb	r1, [r3, #0]
 8006d14:	4608      	mov	r0, r1
 8006d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <__sfputs_r>:
 8006d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1e:	4606      	mov	r6, r0
 8006d20:	460f      	mov	r7, r1
 8006d22:	4614      	mov	r4, r2
 8006d24:	18d5      	adds	r5, r2, r3
 8006d26:	42ac      	cmp	r4, r5
 8006d28:	d101      	bne.n	8006d2e <__sfputs_r+0x12>
 8006d2a:	2000      	movs	r0, #0
 8006d2c:	e007      	b.n	8006d3e <__sfputs_r+0x22>
 8006d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d32:	463a      	mov	r2, r7
 8006d34:	4630      	mov	r0, r6
 8006d36:	f7ff ffda 	bl	8006cee <__sfputc_r>
 8006d3a:	1c43      	adds	r3, r0, #1
 8006d3c:	d1f3      	bne.n	8006d26 <__sfputs_r+0xa>
 8006d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d40 <_vfiprintf_r>:
 8006d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d44:	460d      	mov	r5, r1
 8006d46:	b09d      	sub	sp, #116	@ 0x74
 8006d48:	4614      	mov	r4, r2
 8006d4a:	4698      	mov	r8, r3
 8006d4c:	4606      	mov	r6, r0
 8006d4e:	b118      	cbz	r0, 8006d58 <_vfiprintf_r+0x18>
 8006d50:	6a03      	ldr	r3, [r0, #32]
 8006d52:	b90b      	cbnz	r3, 8006d58 <_vfiprintf_r+0x18>
 8006d54:	f7fe f904 	bl	8004f60 <__sinit>
 8006d58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d5a:	07d9      	lsls	r1, r3, #31
 8006d5c:	d405      	bmi.n	8006d6a <_vfiprintf_r+0x2a>
 8006d5e:	89ab      	ldrh	r3, [r5, #12]
 8006d60:	059a      	lsls	r2, r3, #22
 8006d62:	d402      	bmi.n	8006d6a <_vfiprintf_r+0x2a>
 8006d64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d66:	f7fe fa12 	bl	800518e <__retarget_lock_acquire_recursive>
 8006d6a:	89ab      	ldrh	r3, [r5, #12]
 8006d6c:	071b      	lsls	r3, r3, #28
 8006d6e:	d501      	bpl.n	8006d74 <_vfiprintf_r+0x34>
 8006d70:	692b      	ldr	r3, [r5, #16]
 8006d72:	b99b      	cbnz	r3, 8006d9c <_vfiprintf_r+0x5c>
 8006d74:	4629      	mov	r1, r5
 8006d76:	4630      	mov	r0, r6
 8006d78:	f000 f938 	bl	8006fec <__swsetup_r>
 8006d7c:	b170      	cbz	r0, 8006d9c <_vfiprintf_r+0x5c>
 8006d7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d80:	07dc      	lsls	r4, r3, #31
 8006d82:	d504      	bpl.n	8006d8e <_vfiprintf_r+0x4e>
 8006d84:	f04f 30ff 	mov.w	r0, #4294967295
 8006d88:	b01d      	add	sp, #116	@ 0x74
 8006d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8e:	89ab      	ldrh	r3, [r5, #12]
 8006d90:	0598      	lsls	r0, r3, #22
 8006d92:	d4f7      	bmi.n	8006d84 <_vfiprintf_r+0x44>
 8006d94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d96:	f7fe f9fb 	bl	8005190 <__retarget_lock_release_recursive>
 8006d9a:	e7f3      	b.n	8006d84 <_vfiprintf_r+0x44>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006da0:	2320      	movs	r3, #32
 8006da2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006da6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006daa:	2330      	movs	r3, #48	@ 0x30
 8006dac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006f5c <_vfiprintf_r+0x21c>
 8006db0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006db4:	f04f 0901 	mov.w	r9, #1
 8006db8:	4623      	mov	r3, r4
 8006dba:	469a      	mov	sl, r3
 8006dbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dc0:	b10a      	cbz	r2, 8006dc6 <_vfiprintf_r+0x86>
 8006dc2:	2a25      	cmp	r2, #37	@ 0x25
 8006dc4:	d1f9      	bne.n	8006dba <_vfiprintf_r+0x7a>
 8006dc6:	ebba 0b04 	subs.w	fp, sl, r4
 8006dca:	d00b      	beq.n	8006de4 <_vfiprintf_r+0xa4>
 8006dcc:	465b      	mov	r3, fp
 8006dce:	4622      	mov	r2, r4
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f7ff ffa2 	bl	8006d1c <__sfputs_r>
 8006dd8:	3001      	adds	r0, #1
 8006dda:	f000 80a7 	beq.w	8006f2c <_vfiprintf_r+0x1ec>
 8006dde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006de0:	445a      	add	r2, fp
 8006de2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006de4:	f89a 3000 	ldrb.w	r3, [sl]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 809f 	beq.w	8006f2c <_vfiprintf_r+0x1ec>
 8006dee:	2300      	movs	r3, #0
 8006df0:	f04f 32ff 	mov.w	r2, #4294967295
 8006df4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006df8:	f10a 0a01 	add.w	sl, sl, #1
 8006dfc:	9304      	str	r3, [sp, #16]
 8006dfe:	9307      	str	r3, [sp, #28]
 8006e00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e04:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e06:	4654      	mov	r4, sl
 8006e08:	2205      	movs	r2, #5
 8006e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e0e:	4853      	ldr	r0, [pc, #332]	@ (8006f5c <_vfiprintf_r+0x21c>)
 8006e10:	f7f9 f9de 	bl	80001d0 <memchr>
 8006e14:	9a04      	ldr	r2, [sp, #16]
 8006e16:	b9d8      	cbnz	r0, 8006e50 <_vfiprintf_r+0x110>
 8006e18:	06d1      	lsls	r1, r2, #27
 8006e1a:	bf44      	itt	mi
 8006e1c:	2320      	movmi	r3, #32
 8006e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e22:	0713      	lsls	r3, r2, #28
 8006e24:	bf44      	itt	mi
 8006e26:	232b      	movmi	r3, #43	@ 0x2b
 8006e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8006e30:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e32:	d015      	beq.n	8006e60 <_vfiprintf_r+0x120>
 8006e34:	9a07      	ldr	r2, [sp, #28]
 8006e36:	4654      	mov	r4, sl
 8006e38:	2000      	movs	r0, #0
 8006e3a:	f04f 0c0a 	mov.w	ip, #10
 8006e3e:	4621      	mov	r1, r4
 8006e40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e44:	3b30      	subs	r3, #48	@ 0x30
 8006e46:	2b09      	cmp	r3, #9
 8006e48:	d94b      	bls.n	8006ee2 <_vfiprintf_r+0x1a2>
 8006e4a:	b1b0      	cbz	r0, 8006e7a <_vfiprintf_r+0x13a>
 8006e4c:	9207      	str	r2, [sp, #28]
 8006e4e:	e014      	b.n	8006e7a <_vfiprintf_r+0x13a>
 8006e50:	eba0 0308 	sub.w	r3, r0, r8
 8006e54:	fa09 f303 	lsl.w	r3, r9, r3
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	9304      	str	r3, [sp, #16]
 8006e5c:	46a2      	mov	sl, r4
 8006e5e:	e7d2      	b.n	8006e06 <_vfiprintf_r+0xc6>
 8006e60:	9b03      	ldr	r3, [sp, #12]
 8006e62:	1d19      	adds	r1, r3, #4
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	9103      	str	r1, [sp, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	bfbb      	ittet	lt
 8006e6c:	425b      	neglt	r3, r3
 8006e6e:	f042 0202 	orrlt.w	r2, r2, #2
 8006e72:	9307      	strge	r3, [sp, #28]
 8006e74:	9307      	strlt	r3, [sp, #28]
 8006e76:	bfb8      	it	lt
 8006e78:	9204      	strlt	r2, [sp, #16]
 8006e7a:	7823      	ldrb	r3, [r4, #0]
 8006e7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e7e:	d10a      	bne.n	8006e96 <_vfiprintf_r+0x156>
 8006e80:	7863      	ldrb	r3, [r4, #1]
 8006e82:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e84:	d132      	bne.n	8006eec <_vfiprintf_r+0x1ac>
 8006e86:	9b03      	ldr	r3, [sp, #12]
 8006e88:	1d1a      	adds	r2, r3, #4
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	9203      	str	r2, [sp, #12]
 8006e8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e92:	3402      	adds	r4, #2
 8006e94:	9305      	str	r3, [sp, #20]
 8006e96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006f6c <_vfiprintf_r+0x22c>
 8006e9a:	7821      	ldrb	r1, [r4, #0]
 8006e9c:	2203      	movs	r2, #3
 8006e9e:	4650      	mov	r0, sl
 8006ea0:	f7f9 f996 	bl	80001d0 <memchr>
 8006ea4:	b138      	cbz	r0, 8006eb6 <_vfiprintf_r+0x176>
 8006ea6:	9b04      	ldr	r3, [sp, #16]
 8006ea8:	eba0 000a 	sub.w	r0, r0, sl
 8006eac:	2240      	movs	r2, #64	@ 0x40
 8006eae:	4082      	lsls	r2, r0
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	3401      	adds	r4, #1
 8006eb4:	9304      	str	r3, [sp, #16]
 8006eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eba:	4829      	ldr	r0, [pc, #164]	@ (8006f60 <_vfiprintf_r+0x220>)
 8006ebc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ec0:	2206      	movs	r2, #6
 8006ec2:	f7f9 f985 	bl	80001d0 <memchr>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	d03f      	beq.n	8006f4a <_vfiprintf_r+0x20a>
 8006eca:	4b26      	ldr	r3, [pc, #152]	@ (8006f64 <_vfiprintf_r+0x224>)
 8006ecc:	bb1b      	cbnz	r3, 8006f16 <_vfiprintf_r+0x1d6>
 8006ece:	9b03      	ldr	r3, [sp, #12]
 8006ed0:	3307      	adds	r3, #7
 8006ed2:	f023 0307 	bic.w	r3, r3, #7
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	9303      	str	r3, [sp, #12]
 8006eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006edc:	443b      	add	r3, r7
 8006ede:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ee0:	e76a      	b.n	8006db8 <_vfiprintf_r+0x78>
 8006ee2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	2001      	movs	r0, #1
 8006eea:	e7a8      	b.n	8006e3e <_vfiprintf_r+0xfe>
 8006eec:	2300      	movs	r3, #0
 8006eee:	3401      	adds	r4, #1
 8006ef0:	9305      	str	r3, [sp, #20]
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	f04f 0c0a 	mov.w	ip, #10
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006efe:	3a30      	subs	r2, #48	@ 0x30
 8006f00:	2a09      	cmp	r2, #9
 8006f02:	d903      	bls.n	8006f0c <_vfiprintf_r+0x1cc>
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d0c6      	beq.n	8006e96 <_vfiprintf_r+0x156>
 8006f08:	9105      	str	r1, [sp, #20]
 8006f0a:	e7c4      	b.n	8006e96 <_vfiprintf_r+0x156>
 8006f0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f10:	4604      	mov	r4, r0
 8006f12:	2301      	movs	r3, #1
 8006f14:	e7f0      	b.n	8006ef8 <_vfiprintf_r+0x1b8>
 8006f16:	ab03      	add	r3, sp, #12
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	462a      	mov	r2, r5
 8006f1c:	4b12      	ldr	r3, [pc, #72]	@ (8006f68 <_vfiprintf_r+0x228>)
 8006f1e:	a904      	add	r1, sp, #16
 8006f20:	4630      	mov	r0, r6
 8006f22:	f7fd fbd9 	bl	80046d8 <_printf_float>
 8006f26:	4607      	mov	r7, r0
 8006f28:	1c78      	adds	r0, r7, #1
 8006f2a:	d1d6      	bne.n	8006eda <_vfiprintf_r+0x19a>
 8006f2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f2e:	07d9      	lsls	r1, r3, #31
 8006f30:	d405      	bmi.n	8006f3e <_vfiprintf_r+0x1fe>
 8006f32:	89ab      	ldrh	r3, [r5, #12]
 8006f34:	059a      	lsls	r2, r3, #22
 8006f36:	d402      	bmi.n	8006f3e <_vfiprintf_r+0x1fe>
 8006f38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f3a:	f7fe f929 	bl	8005190 <__retarget_lock_release_recursive>
 8006f3e:	89ab      	ldrh	r3, [r5, #12]
 8006f40:	065b      	lsls	r3, r3, #25
 8006f42:	f53f af1f 	bmi.w	8006d84 <_vfiprintf_r+0x44>
 8006f46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f48:	e71e      	b.n	8006d88 <_vfiprintf_r+0x48>
 8006f4a:	ab03      	add	r3, sp, #12
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	462a      	mov	r2, r5
 8006f50:	4b05      	ldr	r3, [pc, #20]	@ (8006f68 <_vfiprintf_r+0x228>)
 8006f52:	a904      	add	r1, sp, #16
 8006f54:	4630      	mov	r0, r6
 8006f56:	f7fd fe57 	bl	8004c08 <_printf_i>
 8006f5a:	e7e4      	b.n	8006f26 <_vfiprintf_r+0x1e6>
 8006f5c:	08007480 	.word	0x08007480
 8006f60:	0800748a 	.word	0x0800748a
 8006f64:	080046d9 	.word	0x080046d9
 8006f68:	08006d1d 	.word	0x08006d1d
 8006f6c:	08007486 	.word	0x08007486

08006f70 <__swbuf_r>:
 8006f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f72:	460e      	mov	r6, r1
 8006f74:	4614      	mov	r4, r2
 8006f76:	4605      	mov	r5, r0
 8006f78:	b118      	cbz	r0, 8006f82 <__swbuf_r+0x12>
 8006f7a:	6a03      	ldr	r3, [r0, #32]
 8006f7c:	b90b      	cbnz	r3, 8006f82 <__swbuf_r+0x12>
 8006f7e:	f7fd ffef 	bl	8004f60 <__sinit>
 8006f82:	69a3      	ldr	r3, [r4, #24]
 8006f84:	60a3      	str	r3, [r4, #8]
 8006f86:	89a3      	ldrh	r3, [r4, #12]
 8006f88:	071a      	lsls	r2, r3, #28
 8006f8a:	d501      	bpl.n	8006f90 <__swbuf_r+0x20>
 8006f8c:	6923      	ldr	r3, [r4, #16]
 8006f8e:	b943      	cbnz	r3, 8006fa2 <__swbuf_r+0x32>
 8006f90:	4621      	mov	r1, r4
 8006f92:	4628      	mov	r0, r5
 8006f94:	f000 f82a 	bl	8006fec <__swsetup_r>
 8006f98:	b118      	cbz	r0, 8006fa2 <__swbuf_r+0x32>
 8006f9a:	f04f 37ff 	mov.w	r7, #4294967295
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	6922      	ldr	r2, [r4, #16]
 8006fa6:	1a98      	subs	r0, r3, r2
 8006fa8:	6963      	ldr	r3, [r4, #20]
 8006faa:	b2f6      	uxtb	r6, r6
 8006fac:	4283      	cmp	r3, r0
 8006fae:	4637      	mov	r7, r6
 8006fb0:	dc05      	bgt.n	8006fbe <__swbuf_r+0x4e>
 8006fb2:	4621      	mov	r1, r4
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	f7ff fd99 	bl	8006aec <_fflush_r>
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	d1ed      	bne.n	8006f9a <__swbuf_r+0x2a>
 8006fbe:	68a3      	ldr	r3, [r4, #8]
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	60a3      	str	r3, [r4, #8]
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	6022      	str	r2, [r4, #0]
 8006fca:	701e      	strb	r6, [r3, #0]
 8006fcc:	6962      	ldr	r2, [r4, #20]
 8006fce:	1c43      	adds	r3, r0, #1
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d004      	beq.n	8006fde <__swbuf_r+0x6e>
 8006fd4:	89a3      	ldrh	r3, [r4, #12]
 8006fd6:	07db      	lsls	r3, r3, #31
 8006fd8:	d5e1      	bpl.n	8006f9e <__swbuf_r+0x2e>
 8006fda:	2e0a      	cmp	r6, #10
 8006fdc:	d1df      	bne.n	8006f9e <__swbuf_r+0x2e>
 8006fde:	4621      	mov	r1, r4
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	f7ff fd83 	bl	8006aec <_fflush_r>
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d0d9      	beq.n	8006f9e <__swbuf_r+0x2e>
 8006fea:	e7d6      	b.n	8006f9a <__swbuf_r+0x2a>

08006fec <__swsetup_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	4b29      	ldr	r3, [pc, #164]	@ (8007094 <__swsetup_r+0xa8>)
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	6818      	ldr	r0, [r3, #0]
 8006ff4:	460c      	mov	r4, r1
 8006ff6:	b118      	cbz	r0, 8007000 <__swsetup_r+0x14>
 8006ff8:	6a03      	ldr	r3, [r0, #32]
 8006ffa:	b90b      	cbnz	r3, 8007000 <__swsetup_r+0x14>
 8006ffc:	f7fd ffb0 	bl	8004f60 <__sinit>
 8007000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007004:	0719      	lsls	r1, r3, #28
 8007006:	d422      	bmi.n	800704e <__swsetup_r+0x62>
 8007008:	06da      	lsls	r2, r3, #27
 800700a:	d407      	bmi.n	800701c <__swsetup_r+0x30>
 800700c:	2209      	movs	r2, #9
 800700e:	602a      	str	r2, [r5, #0]
 8007010:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007014:	81a3      	strh	r3, [r4, #12]
 8007016:	f04f 30ff 	mov.w	r0, #4294967295
 800701a:	e033      	b.n	8007084 <__swsetup_r+0x98>
 800701c:	0758      	lsls	r0, r3, #29
 800701e:	d512      	bpl.n	8007046 <__swsetup_r+0x5a>
 8007020:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007022:	b141      	cbz	r1, 8007036 <__swsetup_r+0x4a>
 8007024:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007028:	4299      	cmp	r1, r3
 800702a:	d002      	beq.n	8007032 <__swsetup_r+0x46>
 800702c:	4628      	mov	r0, r5
 800702e:	f7fe feff 	bl	8005e30 <_free_r>
 8007032:	2300      	movs	r3, #0
 8007034:	6363      	str	r3, [r4, #52]	@ 0x34
 8007036:	89a3      	ldrh	r3, [r4, #12]
 8007038:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800703c:	81a3      	strh	r3, [r4, #12]
 800703e:	2300      	movs	r3, #0
 8007040:	6063      	str	r3, [r4, #4]
 8007042:	6923      	ldr	r3, [r4, #16]
 8007044:	6023      	str	r3, [r4, #0]
 8007046:	89a3      	ldrh	r3, [r4, #12]
 8007048:	f043 0308 	orr.w	r3, r3, #8
 800704c:	81a3      	strh	r3, [r4, #12]
 800704e:	6923      	ldr	r3, [r4, #16]
 8007050:	b94b      	cbnz	r3, 8007066 <__swsetup_r+0x7a>
 8007052:	89a3      	ldrh	r3, [r4, #12]
 8007054:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800705c:	d003      	beq.n	8007066 <__swsetup_r+0x7a>
 800705e:	4621      	mov	r1, r4
 8007060:	4628      	mov	r0, r5
 8007062:	f000 f883 	bl	800716c <__smakebuf_r>
 8007066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800706a:	f013 0201 	ands.w	r2, r3, #1
 800706e:	d00a      	beq.n	8007086 <__swsetup_r+0x9a>
 8007070:	2200      	movs	r2, #0
 8007072:	60a2      	str	r2, [r4, #8]
 8007074:	6962      	ldr	r2, [r4, #20]
 8007076:	4252      	negs	r2, r2
 8007078:	61a2      	str	r2, [r4, #24]
 800707a:	6922      	ldr	r2, [r4, #16]
 800707c:	b942      	cbnz	r2, 8007090 <__swsetup_r+0xa4>
 800707e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007082:	d1c5      	bne.n	8007010 <__swsetup_r+0x24>
 8007084:	bd38      	pop	{r3, r4, r5, pc}
 8007086:	0799      	lsls	r1, r3, #30
 8007088:	bf58      	it	pl
 800708a:	6962      	ldrpl	r2, [r4, #20]
 800708c:	60a2      	str	r2, [r4, #8]
 800708e:	e7f4      	b.n	800707a <__swsetup_r+0x8e>
 8007090:	2000      	movs	r0, #0
 8007092:	e7f7      	b.n	8007084 <__swsetup_r+0x98>
 8007094:	20000020 	.word	0x20000020

08007098 <_raise_r>:
 8007098:	291f      	cmp	r1, #31
 800709a:	b538      	push	{r3, r4, r5, lr}
 800709c:	4605      	mov	r5, r0
 800709e:	460c      	mov	r4, r1
 80070a0:	d904      	bls.n	80070ac <_raise_r+0x14>
 80070a2:	2316      	movs	r3, #22
 80070a4:	6003      	str	r3, [r0, #0]
 80070a6:	f04f 30ff 	mov.w	r0, #4294967295
 80070aa:	bd38      	pop	{r3, r4, r5, pc}
 80070ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80070ae:	b112      	cbz	r2, 80070b6 <_raise_r+0x1e>
 80070b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070b4:	b94b      	cbnz	r3, 80070ca <_raise_r+0x32>
 80070b6:	4628      	mov	r0, r5
 80070b8:	f000 f830 	bl	800711c <_getpid_r>
 80070bc:	4622      	mov	r2, r4
 80070be:	4601      	mov	r1, r0
 80070c0:	4628      	mov	r0, r5
 80070c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070c6:	f000 b817 	b.w	80070f8 <_kill_r>
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d00a      	beq.n	80070e4 <_raise_r+0x4c>
 80070ce:	1c59      	adds	r1, r3, #1
 80070d0:	d103      	bne.n	80070da <_raise_r+0x42>
 80070d2:	2316      	movs	r3, #22
 80070d4:	6003      	str	r3, [r0, #0]
 80070d6:	2001      	movs	r0, #1
 80070d8:	e7e7      	b.n	80070aa <_raise_r+0x12>
 80070da:	2100      	movs	r1, #0
 80070dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80070e0:	4620      	mov	r0, r4
 80070e2:	4798      	blx	r3
 80070e4:	2000      	movs	r0, #0
 80070e6:	e7e0      	b.n	80070aa <_raise_r+0x12>

080070e8 <raise>:
 80070e8:	4b02      	ldr	r3, [pc, #8]	@ (80070f4 <raise+0xc>)
 80070ea:	4601      	mov	r1, r0
 80070ec:	6818      	ldr	r0, [r3, #0]
 80070ee:	f7ff bfd3 	b.w	8007098 <_raise_r>
 80070f2:	bf00      	nop
 80070f4:	20000020 	.word	0x20000020

080070f8 <_kill_r>:
 80070f8:	b538      	push	{r3, r4, r5, lr}
 80070fa:	4d07      	ldr	r5, [pc, #28]	@ (8007118 <_kill_r+0x20>)
 80070fc:	2300      	movs	r3, #0
 80070fe:	4604      	mov	r4, r0
 8007100:	4608      	mov	r0, r1
 8007102:	4611      	mov	r1, r2
 8007104:	602b      	str	r3, [r5, #0]
 8007106:	f7fa fae3 	bl	80016d0 <_kill>
 800710a:	1c43      	adds	r3, r0, #1
 800710c:	d102      	bne.n	8007114 <_kill_r+0x1c>
 800710e:	682b      	ldr	r3, [r5, #0]
 8007110:	b103      	cbz	r3, 8007114 <_kill_r+0x1c>
 8007112:	6023      	str	r3, [r4, #0]
 8007114:	bd38      	pop	{r3, r4, r5, pc}
 8007116:	bf00      	nop
 8007118:	20000448 	.word	0x20000448

0800711c <_getpid_r>:
 800711c:	f7fa bad0 	b.w	80016c0 <_getpid>

08007120 <__swhatbuf_r>:
 8007120:	b570      	push	{r4, r5, r6, lr}
 8007122:	460c      	mov	r4, r1
 8007124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007128:	2900      	cmp	r1, #0
 800712a:	b096      	sub	sp, #88	@ 0x58
 800712c:	4615      	mov	r5, r2
 800712e:	461e      	mov	r6, r3
 8007130:	da0d      	bge.n	800714e <__swhatbuf_r+0x2e>
 8007132:	89a3      	ldrh	r3, [r4, #12]
 8007134:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007138:	f04f 0100 	mov.w	r1, #0
 800713c:	bf14      	ite	ne
 800713e:	2340      	movne	r3, #64	@ 0x40
 8007140:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007144:	2000      	movs	r0, #0
 8007146:	6031      	str	r1, [r6, #0]
 8007148:	602b      	str	r3, [r5, #0]
 800714a:	b016      	add	sp, #88	@ 0x58
 800714c:	bd70      	pop	{r4, r5, r6, pc}
 800714e:	466a      	mov	r2, sp
 8007150:	f000 f848 	bl	80071e4 <_fstat_r>
 8007154:	2800      	cmp	r0, #0
 8007156:	dbec      	blt.n	8007132 <__swhatbuf_r+0x12>
 8007158:	9901      	ldr	r1, [sp, #4]
 800715a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800715e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007162:	4259      	negs	r1, r3
 8007164:	4159      	adcs	r1, r3
 8007166:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800716a:	e7eb      	b.n	8007144 <__swhatbuf_r+0x24>

0800716c <__smakebuf_r>:
 800716c:	898b      	ldrh	r3, [r1, #12]
 800716e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007170:	079d      	lsls	r5, r3, #30
 8007172:	4606      	mov	r6, r0
 8007174:	460c      	mov	r4, r1
 8007176:	d507      	bpl.n	8007188 <__smakebuf_r+0x1c>
 8007178:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800717c:	6023      	str	r3, [r4, #0]
 800717e:	6123      	str	r3, [r4, #16]
 8007180:	2301      	movs	r3, #1
 8007182:	6163      	str	r3, [r4, #20]
 8007184:	b003      	add	sp, #12
 8007186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007188:	ab01      	add	r3, sp, #4
 800718a:	466a      	mov	r2, sp
 800718c:	f7ff ffc8 	bl	8007120 <__swhatbuf_r>
 8007190:	9f00      	ldr	r7, [sp, #0]
 8007192:	4605      	mov	r5, r0
 8007194:	4639      	mov	r1, r7
 8007196:	4630      	mov	r0, r6
 8007198:	f7fe febe 	bl	8005f18 <_malloc_r>
 800719c:	b948      	cbnz	r0, 80071b2 <__smakebuf_r+0x46>
 800719e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071a2:	059a      	lsls	r2, r3, #22
 80071a4:	d4ee      	bmi.n	8007184 <__smakebuf_r+0x18>
 80071a6:	f023 0303 	bic.w	r3, r3, #3
 80071aa:	f043 0302 	orr.w	r3, r3, #2
 80071ae:	81a3      	strh	r3, [r4, #12]
 80071b0:	e7e2      	b.n	8007178 <__smakebuf_r+0xc>
 80071b2:	89a3      	ldrh	r3, [r4, #12]
 80071b4:	6020      	str	r0, [r4, #0]
 80071b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ba:	81a3      	strh	r3, [r4, #12]
 80071bc:	9b01      	ldr	r3, [sp, #4]
 80071be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80071c2:	b15b      	cbz	r3, 80071dc <__smakebuf_r+0x70>
 80071c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071c8:	4630      	mov	r0, r6
 80071ca:	f000 f81d 	bl	8007208 <_isatty_r>
 80071ce:	b128      	cbz	r0, 80071dc <__smakebuf_r+0x70>
 80071d0:	89a3      	ldrh	r3, [r4, #12]
 80071d2:	f023 0303 	bic.w	r3, r3, #3
 80071d6:	f043 0301 	orr.w	r3, r3, #1
 80071da:	81a3      	strh	r3, [r4, #12]
 80071dc:	89a3      	ldrh	r3, [r4, #12]
 80071de:	431d      	orrs	r5, r3
 80071e0:	81a5      	strh	r5, [r4, #12]
 80071e2:	e7cf      	b.n	8007184 <__smakebuf_r+0x18>

080071e4 <_fstat_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	4d07      	ldr	r5, [pc, #28]	@ (8007204 <_fstat_r+0x20>)
 80071e8:	2300      	movs	r3, #0
 80071ea:	4604      	mov	r4, r0
 80071ec:	4608      	mov	r0, r1
 80071ee:	4611      	mov	r1, r2
 80071f0:	602b      	str	r3, [r5, #0]
 80071f2:	f7fa facd 	bl	8001790 <_fstat>
 80071f6:	1c43      	adds	r3, r0, #1
 80071f8:	d102      	bne.n	8007200 <_fstat_r+0x1c>
 80071fa:	682b      	ldr	r3, [r5, #0]
 80071fc:	b103      	cbz	r3, 8007200 <_fstat_r+0x1c>
 80071fe:	6023      	str	r3, [r4, #0]
 8007200:	bd38      	pop	{r3, r4, r5, pc}
 8007202:	bf00      	nop
 8007204:	20000448 	.word	0x20000448

08007208 <_isatty_r>:
 8007208:	b538      	push	{r3, r4, r5, lr}
 800720a:	4d06      	ldr	r5, [pc, #24]	@ (8007224 <_isatty_r+0x1c>)
 800720c:	2300      	movs	r3, #0
 800720e:	4604      	mov	r4, r0
 8007210:	4608      	mov	r0, r1
 8007212:	602b      	str	r3, [r5, #0]
 8007214:	f7fa facc 	bl	80017b0 <_isatty>
 8007218:	1c43      	adds	r3, r0, #1
 800721a:	d102      	bne.n	8007222 <_isatty_r+0x1a>
 800721c:	682b      	ldr	r3, [r5, #0]
 800721e:	b103      	cbz	r3, 8007222 <_isatty_r+0x1a>
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	bd38      	pop	{r3, r4, r5, pc}
 8007224:	20000448 	.word	0x20000448

08007228 <_init>:
 8007228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800722a:	bf00      	nop
 800722c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800722e:	bc08      	pop	{r3}
 8007230:	469e      	mov	lr, r3
 8007232:	4770      	bx	lr

08007234 <_fini>:
 8007234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007236:	bf00      	nop
 8007238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800723a:	bc08      	pop	{r3}
 800723c:	469e      	mov	lr, r3
 800723e:	4770      	bx	lr
